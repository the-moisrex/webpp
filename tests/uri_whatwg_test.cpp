// Automatically generated by convert-urltestdata-to-cpp.js on 2024-02-27T00:42:49.884Z
// Use convert-urltestdata-to-cpp.js to generate this file, DO NOT EDIT MANUALLY.
//
// If you ever update "urltestdata.json" and regenerated this file,
// make sure to update the link in the assets/whatwg/README.md file as well.

#include "../webpp/uri/uri.hpp"
#include "./common/tests_common_pch.hpp"

using namespace webpp;


using Types =
  testing::Types<uri::parsing_uri_context_string<stl::string>,
                 uri::parsing_uri_context_string<stl::string_view>,
                 // uri::parsing_uri_context_string<stl::basic_string_view<char8_t>>,
                 uri::parsing_uri_context_u32,
                 uri::parsing_uri_context_segregated<>,
                 uri::parsing_uri_context_segregated_view<>,
                 uri::parsing_uri_context<stl::string_view, char const*>>;

template <class T>
struct URIWhatwgTest : testing::Test {
  private:
    stl::string url_text;

  public:
    template <typename SpecifiedTypeParam, typename StrT = stl::string_view>
    [[nodiscard]] constexpr SpecifiedTypeParam get_context(StrT str) {
        using ctx_type    = SpecifiedTypeParam;
        using string_type = stl::remove_cvref_t<StrT>;
        using str_iter    = typename string_type::const_iterator;
        using iterator    = typename ctx_type::iterator;
        if constexpr (stl::convertible_to<str_iter, iterator>) {
            return SpecifiedTypeParam{.beg = str.begin(), .pos = str.begin(), .end = str.end()};
        } else if constexpr (stl::convertible_to<stl::string::iterator, iterator>) {
            url_text = str;
            return SpecifiedTypeParam{.beg = url_text.begin(),
                                      .pos = url_text.begin(),
                                      .end = url_text.end()};
        } else {
            return SpecifiedTypeParam{.beg = str.data(), .pos = str.data(), .end = str.data() + str.size()};
        }
    }

    template <typename SpecifiedTypeParam>
    [[nodiscard]] constexpr SpecifiedTypeParam parse_from_string(stl::string_view const str) {
        auto ctx = get_context<SpecifiedTypeParam, stl::string_view>(str);
        uri::parse_uri(ctx);
        return ctx;
    }

    template <typename SpecifiedTypeParam>
    [[nodiscard]] constexpr SpecifiedTypeParam parse_from_string(
      stl::string_view const str,
      stl::string_view const base_str) {
        auto ctx = get_context<SpecifiedTypeParam, stl::string_view>(str);
        uri::parse_uri(ctx);

        using iterator          = typename stl::string_view::const_iterator;
        using base_context_type = uri::parsing_uri_context<stl::uint32_t, iterator>;

        base_context_type origin_context{.beg = base_str.begin(),
                                         .pos = base_str.begin(),
                                         .end = base_str.end()};
        uri::parse_uri(origin_context);

        uri::parse_uri(str, origin_context.out);
        return ctx;
    }
};

TYPED_TEST_SUITE(URIWhatwgTest, Types);

// 1 - See ../README.md for a description of the format. (1)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example\\t.\\norg\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://example.org/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example\t.\norg", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 2 - See ../README.md for a description of the format. (2)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://user:pass@foo:21/bar;par?b#c\",\n    \"base\": "
      "\"http://example.org/foo/bar\",\n    \"href\": \"http://user:pass@foo:21/bar;par?b#c\",\n    "
      "\"origin\": \"http://foo:21\",\n    \"protocol\": \"http:\",\n    \"username\": \"user\",\n    "
      "\"password\": \"pass\",\n    \"host\": \"foo:21\",\n    \"hostname\": \"foo\",\n    \"port\": "
      "\"21\",\n    \"pathname\": \"/bar;par\",\n    \"search\": \"?b\",\n    \"hash\": \"#c\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://user:pass@foo:21/bar;par?b#c",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "pass") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "21") << details;
    EXPECT_EQ(ctx.out.get_path(), "/bar;par") << details;
    EXPECT_EQ(ctx.out.get_queries(), "b") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "c") << details;
}

// 3 - See ../README.md for a description of the format. (3)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://test:@test\",\n    \"base\": null,\n    \"href\": "
      "\"https://test@test/\",\n    \"origin\": \"https://test\",\n    \"protocol\": \"https:\",\n    "
      "\"username\": \"test\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": "
      "\"test\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://test:@test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "test") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 4 - See ../README.md for a description of the format. (4)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://:@test\",\n    \"base\": null,\n    \"href\": \"https://test/\",\n    "
      "\"origin\": \"https://test\",\n    \"protocol\": \"https:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://:@test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 5 - See ../README.md for a description of the format. (5)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://test:@test/x\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://test@test/x\",\n    \"origin\": \"null\",\n    \"protocol\": \"non-special:\",\n    "
      "\"username\": \"test\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": "
      "\"test\",\n    \"port\": \"\",\n    \"pathname\": \"/x\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://test:@test/x");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "test") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/x") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 6 - See ../README.md for a description of the format. (6)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://:@test/x\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://test/x\",\n    \"origin\": \"null\",\n    \"protocol\": \"non-special:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n  "
      "  \"port\": \"\",\n    \"pathname\": \"/x\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://:@test/x");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/x") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 7 - See ../README.md for a description of the format. (7)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:foo.com\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/foo.com\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/foo.com\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:foo.com", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/foo.com") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 8 - See ../README.md for a description of the format. (8)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\t   :foo.com   \\n\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://example.org/foo/:foo.com\",\n    \"origin\": \"http://example.org\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.org\",\n    \"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo/:foo.com\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("\t   :foo.com   \n", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:foo.com") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 9 - See ../README.md for a description of the format. (9)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat9) {
    static constexpr auto details =
      "\n{\n    \"input\": \" foo.com  \",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/foo.com\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/foo.com\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(" foo.com  ", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/foo.com") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 10 - See ../README.md for a description of the format. (10)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a:\\t foo.com\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"a: foo.com\",\n    \"origin\": \"null\",\n    \"protocol\": \"a:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \" foo.com\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("a:\t foo.com", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), " foo.com") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 11 - See ../README.md for a description of the format. (11)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:21/ b ? d # e \",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://f:21/%20b%20?%20d%20#%20e\",\n    \"origin\": \"http://f:21\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"f:21\",\n    "
      "\"hostname\": \"f\",\n    \"port\": \"21\",\n    \"pathname\": \"/%20b%20\",\n    \"search\": "
      "\"?%20d%20\",\n    \"hash\": \"#%20e\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:21/ b ? d # e ", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "21") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%20b%20") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/ b ") << details;
    }
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%20d%20") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), " d ") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "%20e") << details;
}

// 12 - See ../README.md for a description of the format. (12)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"lolscheme:x x#x x\",\n    \"base\": null,\n    \"href\": \"lolscheme:x "
      "x#x%20x\",\n    \"protocol\": \"lolscheme:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"x x\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#x%20x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("lolscheme:x x#x x");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "lolscheme") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x x") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x%20x") << details;
}

// 13 - See ../README.md for a description of the format. (13)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://f/c\",\n    \"origin\": \"http://f\",\n    \"protocol\": \"http:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"f\",\n    \"hostname\": \"f\",\n    \"port\": \"\",\n "
      "   \"pathname\": \"/c\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://f:/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 14 - See ../README.md for a description of the format. (14)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:0/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://f:0/c\",\n    \"origin\": \"http://f:0\",\n    \"protocol\": \"http:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"f:0\",\n    \"hostname\": \"f\",\n    \"port\": "
      "\"0\",\n    \"pathname\": \"/c\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:0/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "0") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 15 - See ../README.md for a description of the format. (15)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:00000000000000/c\",\n    \"base\": \"http://example.org/foo/bar\",\n   "
      " \"href\": \"http://f:0/c\",\n    \"origin\": \"http://f:0\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"f:0\",\n    \"hostname\": \"f\",\n    "
      "\"port\": \"0\",\n    \"pathname\": \"/c\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:00000000000000/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "0") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 16 - See ../README.md for a description of the format. (16)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:00000000000000000000080/c\",\n    \"base\": "
      "\"http://example.org/foo/bar\",\n    \"href\": \"http://f/c\",\n    \"origin\": \"http://f\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"f\",\n    "
      "\"hostname\": \"f\",\n    \"port\": \"\",\n    \"pathname\": \"/c\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://f:00000000000000000000080/c",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 17 - See ../README.md for a description of the format. (17)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:b/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:b/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 18 - See ../README.md for a description of the format. (18)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f: /c\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f: /c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 19 - See ../README.md for a description of the format. (19)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:\\n/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://f/c\",\n    \"origin\": \"http://f\",\n    \"protocol\": \"http:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"f\",\n    \"hostname\": \"f\",\n    \"port\": \"\",\n "
      "   \"pathname\": \"/c\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:\n/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "f") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 20 - See ../README.md for a description of the format. (20)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:fifty-two/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:fifty-two/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 21 - See ../README.md for a description of the format. (21)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:999999/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:999999/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 22 - See ../README.md for a description of the format. (22)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://f:999999/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("non-special://f:999999/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 23 - See ../README.md for a description of the format. (23)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f: 21 / b ? d # e \",\n    \"base\": \"http://example.org/foo/bar\",\n   "
      " \"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f: 21 / b ? d # e ", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 24 - See ../README.md for a description of the format. (24)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 25 - See ../README.md for a description of the format. (25)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"  \\t\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("  \t", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 26 - See ../README.md for a description of the format. (26)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat26) {
    static constexpr auto details =
      "\n{\n    \"input\": \":foo.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:foo.com/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:foo.com/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":foo.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:foo.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 27 - See ../README.md for a description of the format. (27)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat27) {
    static constexpr auto details =
      "\n{\n    \"input\": \":foo.com\\\\\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:foo.com/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:foo.com/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":foo.com\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:foo.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 28 - See ../README.md for a description of the format. (28)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat28) {
    static constexpr auto details =
      "\n{\n    \"input\": \":\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 29 - See ../README.md for a description of the format. (29)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat29) {
    static constexpr auto details =
      "\n{\n    \"input\": \":a\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:a\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:a\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":a", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:a") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 30 - See ../README.md for a description of the format. (30)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat30) {
    static constexpr auto details =
      "\n{\n    \"input\": \":/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 31 - See ../README.md for a description of the format. (31)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat31) {
    static constexpr auto details =
      "\n{\n    \"input\": \":\\\\\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 32 - See ../README.md for a description of the format. (32)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat32) {
    static constexpr auto details =
      "\n{\n    \"input\": \":#\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:#\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":#", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 33 - See ../README.md for a description of the format. (33)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar#\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 34 - See ../README.md for a description of the format. (34)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar#/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"#/\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "/") << details;
}

// 35 - See ../README.md for a description of the format. (35)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#\\\\\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar#\\\\\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"#\\\\\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "\\") << details;
}

// 36 - See ../README.md for a description of the format. (36)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#;?\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar#;?\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"#;?\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#;?", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), ";?") << details;
}

// 37 - See ../README.md for a description of the format. (37)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat37) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar?\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 38 - See ../README.md for a description of the format. (38)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat38) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": "
      "\"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 39 - See ../README.md for a description of the format. (39)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat39) {
    static constexpr auto details =
      "\n{\n    \"input\": \":23\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:23\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:23\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(":23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:23") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 40 - See ../README.md for a description of the format. (40)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat40) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/:23\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/:23\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": \"http:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": "
      "\"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/:23\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/:23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/:23") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 41 - See ../README.md for a description of the format. (41)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat41) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\x\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/x\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": "
      "\"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/x\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\x", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/x") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 42 - See ../README.md for a description of the format. (42)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat42) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\\\\\x\\\\hello\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://x/hello\",\n    \"origin\": \"http://x\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"x\",\n    \"hostname\": \"x\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/hello\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("\\\\x\\hello", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/hello") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 43 - See ../README.md for a description of the format. (43)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat43) {
    static constexpr auto details =
      "\n{\n    \"input\": \"::\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/::\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/::\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("::", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/::") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 44 - See ../README.md for a description of the format. (44)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat44) {
    static constexpr auto details =
      "\n{\n    \"input\": \"::23\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/::23\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/::23\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("::23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/::23") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 45 - See ../README.md for a description of the format. (45)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat45) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"foo://\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo://", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 46 - See ../README.md for a description of the format. (46)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat46) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a:b@c:29/d\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://a:b@c:29/d\",\n    \"origin\": \"http://c:29\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"a\",\n    \"password\": \"b\",\n    \"host\": \"c:29\",\n    \"hostname\": \"c\",\n   "
      " \"port\": \"29\",\n    \"pathname\": \"/d\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://a:b@c:29/d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "c") << details;
    EXPECT_EQ(ctx.out.get_port(), "29") << details;
    EXPECT_EQ(ctx.out.get_path(), "/d") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 47 - See ../README.md for a description of the format. (47)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat47) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http::@c:29\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/:@c:29\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/:@c:29\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http::@c:29", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/:@c:29") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 48 - See ../README.md for a description of the format. (48)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat48) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://&a:foo(b]c@d:2/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://&a:foo(b%5Dc@d:2/\",\n    \"origin\": \"http://d:2\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"&a\",\n    \"password\": \"foo(b%5Dc\",\n    \"host\": \"d:2\",\n    "
      "\"hostname\": \"d\",\n    \"port\": \"2\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://&a:foo(b]c@d:2/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "&a") << details;
    EXPECT_EQ(ctx.out.get_password(), "foo(b%5Dc") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "d") << details;
    EXPECT_EQ(ctx.out.get_port(), "2") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 49 - See ../README.md for a description of the format. (49)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat49) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://::@c@d:2\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://:%3A%40c@d:2/\",\n    \"origin\": \"http://d:2\",\n    \"protocol\": \"http:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"%3A%40c\",\n    \"host\": \"d:2\",\n    \"hostname\": "
      "\"d\",\n    \"port\": \"2\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://::@c@d:2", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "%3A%40c") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "d") << details;
    EXPECT_EQ(ctx.out.get_port(), "2") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 50 - See ../README.md for a description of the format. (50)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat50) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.com:b@d/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://foo.com:b@d/\",\n    \"origin\": \"http://d\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"foo.com\",\n    \"password\": \"b\",\n    \"host\": \"d\",\n    \"hostname\": "
      "\"d\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo.com:b@d/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "foo.com") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "d") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 51 - See ../README.md for a description of the format. (51)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat51) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.com/\\\\@\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://foo.com//@\",\n    \"origin\": \"http://foo.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.com\",\n    \"hostname\": "
      "\"foo.com\",\n    \"port\": \"\",\n    \"pathname\": \"//@\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo.com/\\@", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//@") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 52 - See ../README.md for a description of the format. (52)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat52) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:\\\\\\\\foo.com\\\\\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://foo.com/\",\n    \"origin\": \"http://foo.com\",\n    \"protocol\": \"http:\",\n   "
      " \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.com\",\n    \"hostname\": "
      "\"foo.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:\\\\foo.com\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 53 - See ../README.md for a description of the format. (53)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat53) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:\\\\\\\\a\\\\b:c\\\\d@foo.com\\\\\",\n    \"base\": "
      "\"http://example.org/foo/bar\",\n    \"href\": \"http://a/b:c/d@foo.com/\",\n    \"origin\": "
      "\"http://a\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"a\",\n    \"hostname\": \"a\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/b:c/d@foo.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http:\\\\a\\b:c\\d@foo.com\\",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "a") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b:c/d@foo.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 54 - See ../README.md for a description of the format. (54)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat54) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo:/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"foo:/\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo:/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 55 - See ../README.md for a description of the format. (55)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat55) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo:/bar.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"foo:/bar.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    \"username\": \"\",\n "
      "   \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/bar.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:/bar.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/bar.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 56 - See ../README.md for a description of the format. (56)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat56) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://///////\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"foo://///////\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    \"username\": \"\",\n "
      "   \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"///////\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://///////", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///////") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 57 - See ../README.md for a description of the format. (57)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat57) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://///////bar.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"foo://///////bar.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"///////bar.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://///////bar.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///////bar.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 58 - See ../README.md for a description of the format. (58)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat58) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo:////://///\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"foo:////://///\",\n    \"origin\": \"null\",\n    \"protocol\": \"foo:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"//://///\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:////://///", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//://///") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 59 - See ../README.md for a description of the format. (59)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat59) {
    static constexpr auto details =
      "\n{\n    \"input\": \"c:/foo\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"c:/foo\",\n    \"origin\": \"null\",\n    \"protocol\": \"c:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/foo\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("c:/foo", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "c") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 60 - See ../README.md for a description of the format. (60)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat60) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//foo/bar\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://foo/bar\",\n    \"origin\": \"http://foo\",\n    \"protocol\": \"http:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//foo/bar", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 61 - See ../README.md for a description of the format. (61)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat61) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo/path;a??e#f#g\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://foo/path;a??e#f#g\",\n    \"origin\": \"http://foo\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo\",\n    "
      "\"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": \"/path;a\",\n    \"search\": "
      "\"??e\",\n    \"hash\": \"#f#g\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/path;a??e#f#g", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path;a") << details;
    EXPECT_EQ(ctx.out.get_queries(), "?e") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "f#g") << details;
}

// 62 - See ../README.md for a description of the format. (62)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat62) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo/abcd?efgh?ijkl\",\n    \"base\": \"http://example.org/foo/bar\",\n   "
      " \"href\": \"http://foo/abcd?efgh?ijkl\",\n    \"origin\": \"http://foo\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo\",\n    "
      "\"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": \"/abcd\",\n    \"search\": "
      "\"?efgh?ijkl\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/abcd?efgh?ijkl", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/abcd") << details;
    EXPECT_EQ(ctx.out.get_queries(), "efgh?ijkl") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 63 - See ../README.md for a description of the format. (63)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat63) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo/abcd#foo?bar\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://foo/abcd#foo?bar\",\n    \"origin\": \"http://foo\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo\",\n    "
      "\"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": \"/abcd\",\n    \"search\": \"\",\n    "
      "\"hash\": \"#foo?bar\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/abcd#foo?bar", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/abcd") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo?bar") << details;
}

// 64 - See ../README.md for a description of the format. (64)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat64) {
    static constexpr auto details =
      "\n{\n    \"input\": \"[61:24:74]:98\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/[61:24:74]:98\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/[61:24:74]:98\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("[61:24:74]:98", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/[61:24:74]:98") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 65 - See ../README.md for a description of the format. (65)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat65) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:[61:27]/:foo\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://example.org/foo/[61:27]/:foo\",\n    \"origin\": \"http://example.org\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.org\",\n    \"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo/[61:27]/:foo\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:[61:27]/:foo", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/[61:27]/:foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 66 - See ../README.md for a description of the format. (66)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat66) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[1::2]:3:4\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[1::2]:3:4", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 67 - See ../README.md for a description of the format. (67)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat67) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://2001::1\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 68 - See ../README.md for a description of the format. (68)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat68) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://2001::1]\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1]", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 69 - See ../README.md for a description of the format. (69)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat69) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://2001::1]:80\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1]:80", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 70 - See ../README.md for a description of the format. (70)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat70) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[2001::1]\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://[2001::1]/\",\n    \"origin\": \"http://[2001::1]\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"[2001::1]\",\n    "
      "\"hostname\": \"[2001::1]\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n  "
      "  \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[2001::1]", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[2001::1]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 71 - See ../README.md for a description of the format. (71)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat71) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::127.0.0.1]\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://[::7f00:1]/\",\n    \"origin\": \"http://[::7f00:1]\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"[::7f00:1]\",\n    "
      "\"hostname\": \"[::7f00:1]\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n "
      "   \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[::127.0.0.1]", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[::7f00:1]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 72 - See ../README.md for a description of the format. (72)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat72) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::127.0.0.1.]\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[::127.0.0.1.]", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 73 - See ../README.md for a description of the format. (73)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat73) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[0:0:0:0:0:0:13.1.68.3]\",\n    \"base\": "
      "\"http://example.org/foo/bar\",\n    \"href\": \"http://[::d01:4403]/\",\n    \"origin\": "
      "\"http://[::d01:4403]\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"[::d01:4403]\",\n    \"hostname\": \"[::d01:4403]\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://[0:0:0:0:0:0:13.1.68.3]",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[::d01:4403]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 74 - See ../README.md for a description of the format. (74)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat74) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[2001::1]:80\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://[2001::1]/\",\n    \"origin\": \"http://[2001::1]\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"[2001::1]\",\n    "
      "\"hostname\": \"[2001::1]\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n  "
      "  \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[2001::1]:80", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[2001::1]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 75 - See ../README.md for a description of the format. (75)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat75) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://example.org/example.com/\",\n    \"origin\": \"http://example.org\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.org\",\n    \"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 76 - See ../README.md for a description of the format. (76)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat76) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ftp://example.com/\",\n    \"origin\": \"ftp://example.com\",\n    \"protocol\": "
      "\"ftp:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftp:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 77 - See ../README.md for a description of the format. (77)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat77) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"https://example.com/\",\n    \"origin\": \"https://example.com\",\n    \"protocol\": "
      "\"https:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("https:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 78 - See ../README.md for a description of the format. (78)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat78) {
    static constexpr auto details =
      "\n{\n    \"input\": \"madeupscheme:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n  "
      "  \"href\": \"madeupscheme:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": "
      "\"madeupscheme:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("madeupscheme:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 79 - See ../README.md for a description of the format. (79)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat79) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"file:///example.com/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 80 - See ../README.md for a description of the format. (80)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat80) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://example:1/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://example:1/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 81 - See ../README.md for a description of the format. (81)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat81) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://example:test/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://example:test/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 82 - See ../README.md for a description of the format. (82)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat82) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://example%/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://example%/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 83 - See ../README.md for a description of the format. (83)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat83) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://[example]/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://[example]/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 84 - See ../README.md for a description of the format. (84)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat84) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftps:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ftps:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"ftps:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftps:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftps") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 85 - See ../README.md for a description of the format. (85)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat85) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"gopher:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("gopher:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 86 - See ../README.md for a description of the format. (86)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat86) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ws://example.com/\",\n    \"origin\": \"ws://example.com\",\n    \"protocol\": \"ws:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ws:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 87 - See ../README.md for a description of the format. (87)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat87) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"wss://example.com/\",\n    \"origin\": \"wss://example.com\",\n    \"protocol\": "
      "\"wss:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 88 - See ../README.md for a description of the format. (88)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat88) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"data:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 89 - See ../README.md for a description of the format. (89)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat89) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"javascript:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": "
      "\"javascript:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 90 - See ../README.md for a description of the format. (90)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat90) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:/example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"mailto:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 91 - See ../README.md for a description of the format. (91)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat91) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"http://example.org/foo/example.com/\",\n    \"origin\": \"http://example.org\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.org\",\n    \"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 92 - See ../README.md for a description of the format. (92)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat92) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ftp://example.com/\",\n    \"origin\": \"ftp://example.com\",\n    \"protocol\": "
      "\"ftp:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftp:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 93 - See ../README.md for a description of the format. (93)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat93) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"https://example.com/\",\n    \"origin\": \"https://example.com\",\n    \"protocol\": "
      "\"https:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("https:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 94 - See ../README.md for a description of the format. (94)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat94) {
    static constexpr auto details =
      "\n{\n    \"input\": \"madeupscheme:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n   "
      " \"href\": \"madeupscheme:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": "
      "\"madeupscheme:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("madeupscheme:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 95 - See ../README.md for a description of the format. (95)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat95) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftps:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ftps:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"ftps:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftps:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftps") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 96 - See ../README.md for a description of the format. (96)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat96) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"gopher:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("gopher:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 97 - See ../README.md for a description of the format. (97)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat97) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"ws://example.com/\",\n    \"origin\": \"ws://example.com\",\n    \"protocol\": \"ws:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ws:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 98 - See ../README.md for a description of the format. (98)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat98) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"wss://example.com/\",\n    \"origin\": \"wss://example.com\",\n    \"protocol\": "
      "\"wss:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 99 - See ../README.md for a description of the format. (99)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat99) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"data:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 100 - See ../README.md for a description of the format. (100)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat100) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"javascript:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": "
      "\"javascript:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 101 - See ../README.md for a description of the format. (101)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat101) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:example.com/\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"mailto:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 102 - See ../README.md for a description of the format. (102)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat102) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/a/b/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/a/b/c\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/a/b/c\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/a/b/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/a/b/c") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 103 - See ../README.md for a description of the format. (103)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat103) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/a/ /c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/a/%20/c\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/a/%20/c\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/a/ /c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/a/%20/c") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/a/ /c") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 104 - See ../README.md for a description of the format. (104)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat104) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/a%2fc\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/a%2fc\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/a%2fc\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/a%2fc", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/a%2fc") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/a/c") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 105 - See ../README.md for a description of the format. (105)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat105) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/a/%2f/c\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/a/%2f/c\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/a/%2f/c\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/a/%2f/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/a/%2f/c") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/a///c") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 106 - See ../README.md for a description of the format. (106)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat106) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#β\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar#%CE%B2\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"#%CE%B2\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#β", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%CE%B2") << details;
}

// 107 - See ../README.md for a description of the format. (107)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat107) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:text/html,test#test\",\n    \"base\": \"http://example.org/foo/bar\",\n    "
      "\"href\": \"data:text/html,test#test\",\n    \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"text/html,test\",\n    \"search\": \"\",\n    \"hash\": "
      "\"#test\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:text/html,test#test", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "text/html,test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "test") << details;
}

// 108 - See ../README.md for a description of the format. (108)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat108) {
    static constexpr auto details =
      "\n{\n    \"input\": \"tel:1234567890\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"tel:1234567890\",\n    \"origin\": \"null\",\n    \"protocol\": \"tel:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"1234567890\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("tel:1234567890", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "tel") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "1234567890") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 109 - # Based on https://felixfbecker.github.io/whatwg-url-custom-host-repro/ (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpsFelixfbeckerGithubIoWhatwgUrlCustomHostRepro1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ssh://example.com/foo/bar.git\",\n    \"base\": \"http://example.org/\",\n    "
      "\"href\": \"ssh://example.com/foo/bar.git\",\n    \"origin\": \"null\",\n    \"protocol\": "
      "\"ssh:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar.git\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ssh://example.com/foo/bar.git", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ssh") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar.git") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 110 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:c:\\\\foo\\\\bar.html\",\n    \"base\": \"file:///tmp/mock/path\",\n    "
      "\"href\": \"file:///c:/foo/bar.html\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/c:/foo/bar.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:c:\\foo\\bar.html", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:/foo/bar.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 111 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"  File:c|////foo\\\\bar.html\",\n    \"base\": \"file:///tmp/mock/path\",\n    "
      "\"href\": \"file:///c:////foo/bar.html\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/c:////foo/bar.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("  File:c|////foo\\bar.html", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:////foo/bar.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 112 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|/foo/bar\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///C:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|/foo/bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 113 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/C|\\\\foo\\\\bar\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///C:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/C|\\foo\\bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 114 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//C|/foo/bar\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///C:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//C|/foo/bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 115 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//server/file\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file://server/file\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"server\",\n    \"hostname\": \"server\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/file\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//server/file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "server") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/file") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 116 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\\\\\server\\\\file\",\n    \"base\": \"file:///tmp/mock/path\",\n    "
      "\"href\": \"file://server/file\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"server\",\n    \"hostname\": \"server\",\n    \"port\": \"\",\n  "
      "  \"pathname\": \"/file\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\server\\file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "server") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/file") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 117 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\\\\server/file\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file://server/file\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"server\",\n    \"hostname\": \"server\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/file\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/\\server/file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "server") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/file") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 118 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///foo/bar.txt\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///foo/bar.txt\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo/bar.txt\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:///foo/bar.txt", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 119 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///home/me\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///home/me\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/home/me\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///home/me", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/home/me") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 120 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": \"file:///\",\n  "
      "  \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n   "
      " \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 121 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": \"file:///\",\n "
      "   \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n  "
      "  \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 122 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///test\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/test\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 123 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://test\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file://test/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 124 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 125 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost/\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("file://localhost/", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 126 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost/test\",\n    \"base\": \"file:///tmp/mock/path\",\n    "
      "\"href\": \"file:///test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("file://localhost/test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 127 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///tmp/mock/test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/tmp/mock/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/tmp/mock/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 128 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:test\",\n    \"base\": \"file:///tmp/mock/path\",\n    \"href\": "
      "\"file:///tmp/mock/test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/tmp/mock/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/tmp/mock/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 129 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/././foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/././foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 130 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/./.foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/.foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/.foo\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/./.foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/.foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 131 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/.\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/.");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 132 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/./\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/./");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 133 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar/..\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 134 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar/../\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 135 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/..bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/..bar\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/..bar\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/..bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/..bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 136 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar/../ton\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/ton\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/ton\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../ton");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/ton") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 137 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar/../ton/../../a\",\n    \"base\": null,\n    "
      "\"href\": \"http://example.com/a\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/a\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../ton/../../a");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/a") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 138 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/../../..\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/../../..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 139 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/../../../ton\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/ton\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/ton\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/../../../ton");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/ton") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 140 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/%2e\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/%2e");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 141 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/%2e%2\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/%2e%2\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/%2e%2\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/%2e%2");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo/%2e%2") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 142 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar\",\n    \"base\": null,\n    "
      "\"href\": \"http://example.com/%2e.bar\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/%2e.bar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%2e.bar") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/..bar") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 143 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com////../..\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com//\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com////../..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 144 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar//../..\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar//../..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 145 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo/bar//..\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo/bar/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar//..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 146 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 147 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/%20foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%20foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/%20foo\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/%20foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%20foo") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/ foo") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 148 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (20)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 149 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (21)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%2\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%2\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%2\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%2") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 150 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (22)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%2zbar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%2zbar\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%2zbar\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2zbar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%2zbar") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 151 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (23)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%2Â©zbar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%2%C3%82%C2%A9zbar\",\n    \"origin\": \"http://example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo%2%C3%82%C2%A9zbar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2Â©zbar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%2%C3%82%C2%A9zbar") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 152 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (24)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%41%7a\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%41%7a\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%41%7a\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%41%7a");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%41%7a") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/fooAz") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 153 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (25)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo\\t%91\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%C2%91%91\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%C2%91%91\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo\t%91");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%C2%91%91") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 154 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (26)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo%00%51\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foo%00%51\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo%00%51\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%00%51");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%00%51") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/foo\0Q") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 155 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (27)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/(%28:%3A%29)\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/(%28:%3A%29)\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/(%28:%3A%29)\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/(%28:%3A%29)");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/(%28:%3A%29)") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/((::))") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 156 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (28)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/%3A%3a%3C%3c\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%3A%3a%3C%3c\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/%3A%3a%3C%3c\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/%3A%3a%3C%3c");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%3A%3a%3C%3c") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/::<<") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 157 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (29)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs29) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/foo\\tbar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/foobar\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foobar\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo\tbar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foobar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 158 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (30)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs30) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com\\\\\\\\foo\\\\\\\\bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com//foo//bar\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"//foo//bar\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com\\\\foo\\\\bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//foo//bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 159 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (31)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs31) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/%7Ffp3%3Eju%3Dduvgw%3Dd\",\n    \"base\": null,\n    "
      "\"href\": \"http://example.com/%7Ffp3%3Eju%3Dduvgw%3Dd\",\n    \"origin\": \"http://example.com\",\n  "
      "  \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/%7Ffp3%3Eju%3Dduvgw%3Dd\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example.com/%7Ffp3%3Eju%3Dduvgw%3Dd");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%7Ffp3%3Eju%3Dduvgw%3Dd") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/fp3>ju=duvgw=d") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 160 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (32)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs32) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/@asdf%40\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/@asdf%40\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/@asdf%40\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/@asdf%40");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/@asdf%40") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/@asdf@") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 161 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (33)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/你好你好\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%E4%BD%A0%E5%A5%BD%E4%BD%A0%E5%A5%BD\",\n    \"origin\": "
      "\"http://example.com\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/%E4%BD%A0%E5%A5%BD%E4%BD%A0%E5%A5%BD\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/你好你好");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%E4%BD%A0%E5%A5%BD%E4%BD%A0%E5%A5%BD") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/你好你好") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 162 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (34)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/‥/foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%E2%80%A5/foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/%E2%80%A5/foo\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/‥/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%E2%80%A5/foo") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/‥/foo") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 163 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (35)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/﻿/foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%EF%BB%BF/foo\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    "
      "\"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/%EF%BB%BF/foo\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/﻿/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%EF%BB%BF/foo") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/﻿/foo") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 164 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (36)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.com/\u202E/foo/\u202D/bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/%E2%80%AE/foo/%E2%80%AD/bar\",\n    \"origin\": \"http://example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/%E2%80%AE/foo/%E2%80%AD/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/\u202E/foo/\u202D/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%E2%80%AE/foo/%E2%80%AD/bar") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/\u202E/foo/\u202D/bar") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 165 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.google.com/foo?bar=baz#\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.google.com/foo?bar=baz#\",\n    \"origin\": \"http://www.google.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.google.com\",\n    \"hostname\": \"www.google.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo\",\n    \"search\": \"?bar=baz\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com/foo?bar=baz#");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "bar=baz") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 166 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.google.com/foo?bar=baz# »\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.google.com/foo?bar=baz#%20%C2%BB\",\n    \"origin\": \"http://www.google.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.google.com\",\n    \"hostname\": \"www.google.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/foo\",\n    \"search\": \"?bar=baz\",\n    \"hash\": \"#%20%C2%BB\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com/foo?bar=baz# »");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "bar=baz") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%20%C2%BB") << details;
}

// 167 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:test# »\",\n    \"base\": null,\n    \"href\": \"data:test#%20%C2%BB\",\n  "
      "  \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"test\",\n    \"search\": \"\",\n    \"hash\": \"#%20%C2%BB\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data:test# »");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%20%C2%BB") << details;
}

// 168 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.google.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.google.com/\",\n    \"origin\": \"http://www.google.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.google.com\",\n    "
      "\"hostname\": \"www.google.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 169 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.0x00A80001\",\n    \"base\": null,\n    \"href\": "
      "\"http://192.168.0.1/\",\n    \"origin\": \"http://192.168.0.1\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"192.168.0.1\",\n    \"hostname\": "
      "\"192.168.0.1\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.0x00A80001");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 170 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www/foo%2Ehtml\",\n    \"base\": null,\n    \"href\": "
      "\"http://www/foo%2Ehtml\",\n    \"origin\": \"http://www\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www\",\n    \"hostname\": \"www\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/foo%2Ehtml\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www/foo%2Ehtml");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/foo%2Ehtml") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/foo.html") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 171 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www/foo/%2E/html\",\n    \"base\": null,\n    \"href\": "
      "\"http://www/foo/html\",\n    \"origin\": \"http://www\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www\",\n    \"hostname\": \"www\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/foo/html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www/foo/%2E/html");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 172 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://user:pass@/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://user:pass@/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 173 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%25DOMAIN:foobar@foodomain.com/\",\n    \"base\": null,\n    \"href\": "
      "\"http://%25DOMAIN:foobar@foodomain.com/\",\n    \"origin\": \"http://foodomain.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"%25DOMAIN\",\n    \"password\": \"foobar\",\n    "
      "\"host\": \"foodomain.com\",\n    \"hostname\": \"foodomain.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://%25DOMAIN:foobar@foodomain.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "%25DOMAIN") << details;
    EXPECT_EQ(ctx.out.get_password(), "foobar") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foodomain.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 174 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:\\\\\\\\www.google.com\\\\foo\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.google.com/foo\",\n    \"origin\": \"http://www.google.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.google.com\",\n    "
      "\"hostname\": \"www.google.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:\\\\www.google.com\\foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 175 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo:80/\",\n    \"base\": null,\n    \"href\": \"http://foo/\",\n    "
      "\"origin\": \"http://foo\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 176 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo:81/\",\n    \"base\": null,\n    \"href\": \"http://foo:81/\",\n    "
      "\"origin\": \"http://foo:81\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:81\",\n    \"hostname\": \"foo\",\n    \"port\": \"81\",\n   "
      " \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "81") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 177 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"httpa://foo:80/\",\n    \"base\": null,\n    \"href\": \"httpa://foo:80/\",\n   "
      " \"origin\": \"null\",\n    \"protocol\": \"httpa:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo:80\",\n    \"hostname\": \"foo\",\n    \"port\": \"80\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("httpa://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "httpa") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "80") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 178 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo:-80/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:-80/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 179 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://foo:443/\",\n    \"base\": null,\n    \"href\": \"https://foo/\",\n    "
      "\"origin\": \"https://foo\",\n    \"protocol\": \"https:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 180 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://foo:80/\",\n    \"base\": null,\n    \"href\": \"https://foo:80/\",\n   "
      " \"origin\": \"https://foo:80\",\n    \"protocol\": \"https:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:80\",\n    \"hostname\": \"foo\",\n    \"port\": \"80\",\n   "
      " \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "80") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 181 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp://foo:21/\",\n    \"base\": null,\n    \"href\": \"ftp://foo/\",\n    "
      "\"origin\": \"ftp://foo\",\n    \"protocol\": \"ftp:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://foo:21/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 182 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp://foo:80/\",\n    \"base\": null,\n    \"href\": \"ftp://foo:80/\",\n    "
      "\"origin\": \"ftp://foo:80\",\n    \"protocol\": \"ftp:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:80\",\n    \"hostname\": \"foo\",\n    \"port\": \"80\",\n   "
      " \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "80") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 183 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher://foo:70/\",\n    \"base\": null,\n    \"href\": \"gopher://foo:70/\",\n "
      "   \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo:70\",\n    \"hostname\": \"foo\",\n    \"port\": \"70\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("gopher://foo:70/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "70") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 184 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (20)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher://foo:443/\",\n    \"base\": null,\n    \"href\": "
      "\"gopher://foo:443/\",\n    \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"foo:443\",\n    \"hostname\": \"foo\",\n    \"port\": "
      "\"443\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("gopher://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "443") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 185 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (21)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws://foo:80/\",\n    \"base\": null,\n    \"href\": \"ws://foo/\",\n    "
      "\"origin\": \"ws://foo\",\n    \"protocol\": \"ws:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 186 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (22)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws://foo:81/\",\n    \"base\": null,\n    \"href\": \"ws://foo:81/\",\n    "
      "\"origin\": \"ws://foo:81\",\n    \"protocol\": \"ws:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo:81\",\n    \"hostname\": \"foo\",\n    \"port\": \"81\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "81") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 187 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (23)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws://foo:443/\",\n    \"base\": null,\n    \"href\": \"ws://foo:443/\",\n    "
      "\"origin\": \"ws://foo:443\",\n    \"protocol\": \"ws:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo:443\",\n    \"hostname\": \"foo\",\n    \"port\": \"443\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "443") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 188 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (24)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws://foo:815/\",\n    \"base\": null,\n    \"href\": \"ws://foo:815/\",\n    "
      "\"origin\": \"ws://foo:815\",\n    \"protocol\": \"ws:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo:815\",\n    \"hostname\": \"foo\",\n    \"port\": \"815\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:815/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "815") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 189 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (25)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://foo:80/\",\n    \"base\": null,\n    \"href\": \"wss://foo:80/\",\n    "
      "\"origin\": \"wss://foo:80\",\n    \"protocol\": \"wss:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:80\",\n    \"hostname\": \"foo\",\n    \"port\": \"80\",\n   "
      " \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "80") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 190 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (26)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://foo:81/\",\n    \"base\": null,\n    \"href\": \"wss://foo:81/\",\n    "
      "\"origin\": \"wss://foo:81\",\n    \"protocol\": \"wss:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:81\",\n    \"hostname\": \"foo\",\n    \"port\": \"81\",\n   "
      " \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "81") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 191 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (27)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://foo:443/\",\n    \"base\": null,\n    \"href\": \"wss://foo/\",\n    "
      "\"origin\": \"wss://foo\",\n    \"protocol\": \"wss:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 192 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (28)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://foo:815/\",\n    \"base\": null,\n    \"href\": \"wss://foo:815/\",\n    "
      "\"origin\": \"wss://foo:815\",\n    \"protocol\": \"wss:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"foo:815\",\n    \"hostname\": \"foo\",\n    \"port\": \"815\",\n "
      "   \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:815/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "815") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 193 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (29)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs29) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 194 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (30)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs30) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"ftp://example.com/\",\n    \"origin\": \"ftp://example.com\",\n    \"protocol\": \"ftp:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 195 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (31)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs31) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"https://example.com/\",\n    \"origin\": \"https://example.com\",\n    \"protocol\": \"https:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 196 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (32)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs32) {
    static constexpr auto details =
      "\n{\n    \"input\": \"madeupscheme:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"madeupscheme:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"madeupscheme:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("madeupscheme:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 197 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (33)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"file:///example.com/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 198 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (34)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftps:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"ftps:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"ftps:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftps:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftps") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 199 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (35)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"gopher:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("gopher:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 200 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (36)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"ws://example.com/\",\n    \"origin\": \"ws://example.com\",\n    \"protocol\": \"ws:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 201 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (37)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs37) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"wss://example.com/\",\n    \"origin\": \"wss://example.com\",\n    \"protocol\": \"wss:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 202 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (38)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs38) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"data:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 203 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (39)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs39) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"javascript:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"javascript:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 204 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (40)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs40) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:/example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"mailto:/example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 205 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (41)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs41) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.com/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 206 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (42)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs42) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"ftp://example.com/\",\n    \"origin\": \"ftp://example.com\",\n    \"protocol\": \"ftp:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 207 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (43)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs43) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"https://example.com/\",\n    \"origin\": \"https://example.com\",\n    \"protocol\": \"https:\",\n  "
      "  \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 208 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (44)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs44) {
    static constexpr auto details =
      "\n{\n    \"input\": \"madeupscheme:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"madeupscheme:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"madeupscheme:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("madeupscheme:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 209 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (45)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs45) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftps:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"ftps:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"ftps:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftps:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftps") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 210 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (46)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs46) {
    static constexpr auto details =
      "\n{\n    \"input\": \"gopher:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"gopher:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"gopher:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("gopher:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "gopher") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 211 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (47)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs47) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ws:example.com/\",\n    \"base\": null,\n    \"href\": \"ws://example.com/\",\n "
      "   \"origin\": \"ws://example.com\",\n    \"protocol\": \"ws:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ws:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ws") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 212 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (48)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs48) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"wss://example.com/\",\n    \"origin\": \"wss://example.com\",\n    \"protocol\": \"wss:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 213 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (49)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs49) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"data:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 214 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (50)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs50) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"javascript:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"javascript:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 215 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (51)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs51) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:example.com/\",\n    \"base\": null,\n    \"href\": "
      "\"mailto:example.com/\",\n    \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"example.com/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "example.com/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 216 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 217 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 218 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 219 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:a:b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n  "
      "  \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 220 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/a:b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n  "
      "  \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 221 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a:b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n  "
      "  \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 222 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://@pple.com\",\n    \"base\": null,\n    \"href\": \"http://pple.com/\",\n "
      "   \"origin\": \"http://pple.com\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"pple.com\",\n    \"hostname\": \"pple.com\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://@pple.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "pple.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 223 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http::b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http::b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 224 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/:b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 225 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (10)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://:b@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://:b@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"b\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "b") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 226 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (11)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/:@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 227 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (12)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://user@/www.example.com\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://user@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 228 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (13)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 229 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (14)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 230 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (15)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://@/www.example.com\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 231 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (16)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https:@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 232 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (17)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:a:b@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 233 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (18)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/a:b@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 234 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (19)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a:b@/www.example.com\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 235 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (20)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http::@/www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http::@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 236 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (21)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:a:@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 237 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (22)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/a:@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 238 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (23)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a:@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://a@www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"a\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n   "
      " \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "a") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 239 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (24)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.@pple.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.@pple.com/\",\n    \"origin\": \"http://pple.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"www.\",\n    \"password\": \"\",\n    \"host\": \"pple.com\",\n    \"hostname\": "
      "\"pple.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.@pple.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "www.") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "pple.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 240 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (25)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:@:www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 241 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (26)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:/@:www.example.com\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 242 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (27)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://@:www.example.com\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 243 - # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html
// (28)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://:@www.example.com\",\n    \"base\": null,\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 244 - # Others (1)
TYPED_TEST(URIWhatwgTest, Others1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 245 - # Others (2)
TYPED_TEST(URIWhatwgTest, Others2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/test.txt\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 246 - # Others (3)
TYPED_TEST(URIWhatwgTest, Others3) {
    static constexpr auto details =
      "\n{\n    \"input\": \".\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(".", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 247 - # Others (4)
TYPED_TEST(URIWhatwgTest, Others4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 248 - # Others (5)
TYPED_TEST(URIWhatwgTest, Others5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/test.txt\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 249 - # Others (6)
TYPED_TEST(URIWhatwgTest, Others6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"./test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/test.txt\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("./test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 250 - # Others (7)
TYPED_TEST(URIWhatwgTest, Others7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/test.txt\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("../test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 251 - # Others (8)
TYPED_TEST(URIWhatwgTest, Others8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../aaa/test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    "
      "\"href\": \"http://www.example.com/aaa/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.example.com\",\n    \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/aaa/test.txt\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("../aaa/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/aaa/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 252 - # Others (9)
TYPED_TEST(URIWhatwgTest, Others9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../../test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    "
      "\"href\": \"http://www.example.com/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.example.com\",\n    \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test.txt\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("../../test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test.txt") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 253 - # Others (10)
TYPED_TEST(URIWhatwgTest, Others10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"中/test.txt\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"http://www.example.com/%E4%B8%AD/test.txt\",\n    \"origin\": \"http://www.example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.example.com\",\n    \"hostname\": \"www.example.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/%E4%B8%AD/test.txt\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("中/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%E4%B8%AD/test.txt") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/中/test.txt") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 254 - # Others (11)
TYPED_TEST(URIWhatwgTest, Others11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.example2.com\",\n    \"base\": \"http://www.example.com/test\",\n    "
      "\"href\": \"http://www.example2.com/\",\n    \"origin\": \"http://www.example2.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.example2.com\",\n    \"hostname\": \"www.example2.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://www.example2.com", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example2.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 255 - # Others (12)
TYPED_TEST(URIWhatwgTest, Others12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//www.example2.com\",\n    \"base\": \"http://www.example.com/test\",\n    "
      "\"href\": \"http://www.example2.com/\",\n    \"origin\": \"http://www.example2.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"www.example2.com\",\n    \"hostname\": \"www.example2.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("//www.example2.com", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example2.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 256 - # Others (13)
TYPED_TEST(URIWhatwgTest, Others13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:...\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"file:///...\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/...\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:...", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/...") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 257 - # Others (14)
TYPED_TEST(URIWhatwgTest, Others14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:..\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"file:///\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:..", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 258 - # Others (15)
TYPED_TEST(URIWhatwgTest, Others15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:a\",\n    \"base\": \"http://www.example.com/test\",\n    \"href\": "
      "\"file:///a\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/a\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:a", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/a") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 259 - Basic canonicalization, uppercase should be converted to lowercase (1)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ExAmPlE.CoM\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://example.com/\",\n    \"origin\": \"http://example.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.com\",\n    \"hostname\": "
      "\"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ExAmPlE.CoM", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 260 - Basic canonicalization, uppercase should be converted to lowercase (2)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example example.com\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example example.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 261 - Basic canonicalization, uppercase should be converted to lowercase (3)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://Goo%20 goo%7C|.com\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://Goo%20 goo%7C|.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 262 - Basic canonicalization, uppercase should be converted to lowercase (4)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 263 - Basic canonicalization, uppercase should be converted to lowercase (5)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[:]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[:]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 264 - U+3000 is mapped to U+0020 (space) which is disallowed (1)
TYPED_TEST(URIWhatwgTest, U3000IsMappedToU0020SpaceWhichIsDisallowed1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://GOO 　goo.com\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://GOO 　goo.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 265 - Other types of space (no-break, zero-width, zero-width-no-break) are name-prepped away to nothing.
// U+200B, U+2060, and U+FEFF, are ignored (1)
TYPED_TEST(
  URIWhatwgTest,
  OtherTypesOfSpaceNoBreakZeroWidthZeroWidthNoBreakAreNamePreppedAwayToNothingU200bU2060AndUFeffAreIgnored1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://GOO​⁠﻿goo.com\",\n    \"base\": \"http://other.com/\",\n    "
      "\"href\": \"http://googoo.com/\",\n    \"origin\": \"http://googoo.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"googoo.com\",\n    "
      "\"hostname\": \"googoo.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n "
      "   \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://GOO​⁠﻿goo.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "googoo.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 266 - Leading and trailing C0 control or space (1)
TYPED_TEST(URIWhatwgTest, LeadingAndTrailingC0ControlOrSpace1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\u0000\\u001b\\u0004\\u0012 http://example.com/\\u001f \\r \",\n    \"base\": "
      "null,\n    \"href\": \"http://example.com/\",\n    \"origin\": \"http://example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n "
      "   \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\0 http://example.com/ \r ");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 267 - Ideographic full stop (full-width period for Chinese, etc.) should be treated as a dot. U+3002 is
// mapped to U+002E (dot) (1)
TYPED_TEST(URIWhatwgTest,
           IdeographicFullStopFullWidthPeriodForChineseEtcShouldBeTreatedAsADotU3002IsMappedToU002eDot1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://www.foo。bar.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://www.foo.bar.com/\",\n    \"origin\": \"http://www.foo.bar.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"www.foo.bar.com\",\n    "
      "\"hostname\": \"www.foo.bar.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://www.foo。bar.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.foo.bar.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 268 - Invalid unicode characters should fail... U+FDD0 is disallowed; %ef%b7%90 is U+FDD0 (1)
TYPED_TEST(URIWhatwgTest, InvalidUnicodeCharactersShouldFailUFdd0IsDisallowedEfB790IsUFdd01) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://﷐zyx.com\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://﷐zyx.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 269 - This is the same as previous but escaped (1)
TYPED_TEST(URIWhatwgTest, ThisIsTheSameAsPreviousButEscaped1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%ef%b7%90zyx.com\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://%ef%b7%90zyx.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 270 - U+FFFD (1)
TYPED_TEST(URIWhatwgTest, UFffd1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://�\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://�");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 271 - U+FFFD (2)
TYPED_TEST(URIWhatwgTest, UFffd2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://%EF%BF%BD\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://%EF%BF%BD");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 272 - U+FFFD (3)
TYPED_TEST(URIWhatwgTest, UFffd3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/�?�#�\",\n    \"base\": null,\n    \"href\": "
      "\"https://x/%EF%BF%BD?%EF%BF%BD#%EF%BF%BD\",\n    \"origin\": \"https://x\",\n    \"protocol\": "
      "\"https:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"x\",\n    "
      "\"hostname\": \"x\",\n    \"port\": \"\",\n    \"pathname\": \"/%EF%BF%BD\",\n    \"search\": "
      "\"?%EF%BF%BD\",\n    \"hash\": \"#%EF%BF%BD\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/�?�#�");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%EF%BF%BD") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/�") << details;
    }
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BD") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "�") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BD") << details;
}

// 273 - Domain is ASCII, but a label is invalid IDNA (1)
TYPED_TEST(URIWhatwgTest, DomainIsAsciiButALabelIsInvalidIdna1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a.b.c.xn--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 274 - Domain is ASCII, but a label is invalid IDNA (2)
TYPED_TEST(URIWhatwgTest, DomainIsAsciiButALabelIsInvalidIdna2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://10.0.0.xn--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 275 - IDNA labels should be matched case-insensitively (1)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a.b.c.XN--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.XN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 276 - IDNA labels should be matched case-insensitively (2)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a.b.c.Xn--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.Xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 277 - IDNA labels should be matched case-insensitively (3)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://10.0.0.XN--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.XN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 278 - IDNA labels should be matched case-insensitively (4)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://10.0.0.xN--pokxncvks\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.xN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 279 - Test name prepping, fullwidth input should be converted to ASCII and NOT IDN-ized. This is 'Go' in
// fullwidth UTF-8/UTF-16. (1)
TYPED_TEST(URIWhatwgTest,
           TestNamePreppingFullwidthInputShouldBeConvertedToAsciiAndNotIdnIzedThisIsGoInFullwidthUtf8Utf161) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://Ｇｏ.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://go.com/\",\n    \"origin\": \"http://go.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"go.com\",\n    \"hostname\": "
      "\"go.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://Ｇｏ.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "go.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 280 - URL spec forbids the following. https://www.w3.org/Bugs/Public/show_bug.cgi?id=24257 (1)
TYPED_TEST(URIWhatwgTest, UrlSpecForbidsTheFollowingHttpsWwwW3OrgBugsPublicShowBugCgiId242571) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://％４１.com\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://％４１.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 281 - URL spec forbids the following. https://www.w3.org/Bugs/Public/show_bug.cgi?id=24257 (2)
TYPED_TEST(URIWhatwgTest, UrlSpecForbidsTheFollowingHttpsWwwW3OrgBugsPublicShowBugCgiId242572) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%ef%bc%85%ef%bc%94%ef%bc%91.com\",\n    \"base\": "
      "\"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%ef%bc%85%ef%bc%94%ef%bc%91.com",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 282 - ...%00 in fullwidth should fail (also as escaped UTF-8 input) (1)
TYPED_TEST(URIWhatwgTest, 00InFullwidthShouldFailAlsoAsEscapedUtf8Input1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://％００.com\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://％００.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 283 - ...%00 in fullwidth should fail (also as escaped UTF-8 input) (2)
TYPED_TEST(URIWhatwgTest, 00InFullwidthShouldFailAlsoAsEscapedUtf8Input2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%ef%bc%85%ef%bc%90%ef%bc%90.com\",\n    \"base\": "
      "\"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%ef%bc%85%ef%bc%90%ef%bc%90.com",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 284 - Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (1)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://你好你好\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://xn--6qqa088eba/\",\n    \"origin\": \"http://xn--6qqa088eba\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"xn--6qqa088eba\",\n    "
      "\"hostname\": \"xn--6qqa088eba\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://你好你好", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "xn--6qqa088eba") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 285 - Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (2)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://faß.ExAmPlE/\",\n    \"base\": null,\n    \"href\": "
      "\"https://xn--fa-hia.example/\",\n    \"origin\": \"https://xn--fa-hia.example\",\n    \"protocol\": "
      "\"https:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"xn--fa-hia.example\",\n    \"hostname\": \"xn--fa-hia.example\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://faß.ExAmPlE/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "xn--fa-hia.example") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 286 - Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (3)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://faß.ExAmPlE/\",\n    \"base\": null,\n    \"href\": "
      "\"sc://fa%C3%9F.ExAmPlE/\",\n    \"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"fa%C3%9F.ExAmPlE\",\n    \"hostname\": "
      "\"fa%C3%9F.ExAmPlE\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://faß.ExAmPlE/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "fa%C3%9F.ExAmPlE") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 287 - Invalid escaped characters should fail and the percents should be escaped.
// https://www.w3.org/Bugs/Public/show_bug.cgi?id=24191 (1)
TYPED_TEST(
  URIWhatwgTest,
  InvalidEscapedCharactersShouldFailAndThePercentsShouldBeEscapedHttpsWwwW3OrgBugsPublicShowBugCgiId241911) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%zz%66%a.com\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://%zz%66%a.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 288 - If we get an invalid character that has been escaped. (1)
TYPED_TEST(URIWhatwgTest, IfWeGetAnInvalidCharacterThatHasBeenEscaped1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%25\",\n    \"base\": \"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://%25", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 289 - If we get an invalid character that has been escaped. (2)
TYPED_TEST(URIWhatwgTest, IfWeGetAnInvalidCharacterThatHasBeenEscaped2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://hello%00\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://hello%00", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 290 - Escaped numbers should be treated like IP addresses if they are. (1)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%30%78%63%30%2e%30%32%35%30.01\",\n    \"base\": "
      "\"http://other.com/\",\n    \"href\": \"http://192.168.0.1/\",\n    \"origin\": "
      "\"http://192.168.0.1\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"192.168.0.1\",\n    \"hostname\": \"192.168.0.1\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%30%78%63%30%2e%30%32%35%30.01",
      "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 291 - Escaped numbers should be treated like IP addresses if they are. (2)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%30%78%63%30%2e%30%32%35%30.01%2e\",\n    \"base\": "
      "\"http://other.com/\",\n    \"href\": \"http://192.168.0.1/\",\n    \"origin\": "
      "\"http://192.168.0.1\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"192.168.0.1\",\n    \"hostname\": \"192.168.0.1\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%30%78%63%30%2e%30%32%35%30.01%2e",
      "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 292 - Escaped numbers should be treated like IP addresses if they are. (3)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.168.0.257\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.0.257", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 293 - Invalid escaping in hosts causes failure (1)
TYPED_TEST(URIWhatwgTest, InvalidEscapingInHostsCausesFailure1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%3g%78%63%30%2e%30%32%35%30%2E.01\",\n    \"base\": "
      "\"http://other.com/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%3g%78%63%30%2e%30%32%35%30%2E.01",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 294 - A space in a host causes failure (1)
TYPED_TEST(URIWhatwgTest, ASpaceInAHostCausesFailure1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.168.0.1 hello\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://192.168.0.1 hello", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 295 - A space in a host causes failure (2)
TYPED_TEST(URIWhatwgTest, ASpaceInAHostCausesFailure2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x x:12\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x x:12");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 296 - Fullwidth and escaped UTF-8 fullwidth should still be treated as IP (1)
TYPED_TEST(URIWhatwgTest, FullwidthAndEscapedUtf8FullwidthShouldStillBeTreatedAsIp1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://０Ｘｃ０．０２５０．０１\",\n    \"base\": \"http://other.com/\",\n    "
      "\"href\": \"http://192.168.0.1/\",\n    \"origin\": \"http://192.168.0.1\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"192.168.0.1\",\n    "
      "\"hostname\": \"192.168.0.1\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://０Ｘｃ０．０２５０．０１", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 297 - Domains with empty labels (1)
TYPED_TEST(URIWhatwgTest, DomainsWithEmptyLabels1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://./\",\n    \"base\": null,\n    \"href\": \"http://./\",\n    "
      "\"origin\": \"http://.\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \".\",\n    \"hostname\": \".\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://./");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), ".") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 298 - Domains with empty labels (2)
TYPED_TEST(URIWhatwgTest, DomainsWithEmptyLabels2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://../\",\n    \"base\": null,\n    \"href\": \"http://../\",\n    "
      "\"origin\": \"http://..\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"..\",\n    \"hostname\": \"..\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "..") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 299 - Non-special domains with empty labels (1)
TYPED_TEST(URIWhatwgTest, NonSpecialDomainsWithEmptyLabels1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"h://.\",\n    \"base\": null,\n    \"href\": \"h://.\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"h:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\".\",\n    \"hostname\": \".\",\n    \"port\": \"\",\n    \"pathname\": \"\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("h://.");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "h") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), ".") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 300 - Broken IPv6 (1)
TYPED_TEST(URIWhatwgTest, BrokenIpv61) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[www.google.com]/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[www.google.com]/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 301 - Broken IPv6 (2)
TYPED_TEST(URIWhatwgTest, BrokenIpv62) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[google.com]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[google.com]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 302 - Broken IPv6 (3)
TYPED_TEST(URIWhatwgTest, BrokenIpv63) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::1.2.3.4x]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.3.4x]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 303 - Broken IPv6 (4)
TYPED_TEST(URIWhatwgTest, BrokenIpv64) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::1.2.3.]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.3.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 304 - Broken IPv6 (5)
TYPED_TEST(URIWhatwgTest, BrokenIpv65) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::1.2.]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 305 - Broken IPv6 (6)
TYPED_TEST(URIWhatwgTest, BrokenIpv66) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::.1.2]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::.1.2]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 306 - Broken IPv6 (7)
TYPED_TEST(URIWhatwgTest, BrokenIpv67) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::1.]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 307 - Broken IPv6 (8)
TYPED_TEST(URIWhatwgTest, BrokenIpv68) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::.1]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::.1]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 308 - Broken IPv6 (9)
TYPED_TEST(URIWhatwgTest, BrokenIpv69) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::%31]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::%31]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 309 - Broken IPv6 (10)
TYPED_TEST(URIWhatwgTest, BrokenIpv610) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://%5B::1]\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://%5B::1]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 310 - Misc Unicode (1)
TYPED_TEST(URIWhatwgTest, MiscUnicode1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo:💩@example.com/bar\",\n    \"base\": \"http://other.com/\",\n    "
      "\"href\": \"http://foo:%F0%9F%92%A9@example.com/bar\",\n    \"origin\": \"http://example.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"foo\",\n    \"password\": \"%F0%9F%92%A9\",\n    "
      "\"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo:💩@example.com/bar", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "foo") << details;
    EXPECT_EQ(ctx.out.get_password(), "%F0%9F%92%A9") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 311 - # resolving a fragment against any scheme succeeds (1)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#\",\n    \"base\": \"test:test\",\n    \"href\": \"test:test#\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"test:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#", "test:test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "test") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 312 - # resolving a fragment against any scheme succeeds (2)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x\",\n    \"base\": \"mailto:x@x.com\",\n    \"href\": \"mailto:x@x.com#x\",\n "
      "   \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"x@x.com\",\n    \"search\": \"\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "mailto:x@x.com");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x@x.com") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 313 - # resolving a fragment against any scheme succeeds (3)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x\",\n    \"base\": \"data:,\",\n    \"href\": \"data:,#x\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \",\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "data:,");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), ",") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 314 - # resolving a fragment against any scheme succeeds (4)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x\",\n    \"base\": \"about:blank\",\n    \"href\": \"about:blank#x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"about:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"blank\",\n    \"search\": \"\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "about") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "blank") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 315 - # resolving a fragment against any scheme succeeds (5)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x:y\",\n    \"base\": \"about:blank\",\n    \"href\": \"about:blank#x:y\",\n   "
      " \"origin\": \"null\",\n    \"protocol\": \"about:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"blank\",\n    \"search\": \"\",\n    \"hash\": \"#x:y\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x:y", "about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "about") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "blank") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x:y") << details;
}

// 316 - # resolving a fragment against any scheme succeeds (6)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#\",\n    \"base\": \"test:test?test\",\n    \"href\": \"test:test?test#\",\n   "
      " \"origin\": \"null\",\n    \"protocol\": \"test:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"test\",\n    \"search\": \"?test\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#", "test:test?test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "test") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "test") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 317 - # multiple @ in authority state (1)
TYPED_TEST(URIWhatwgTest, MultipleInAuthorityState1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://@test@test@example:800/\",\n    \"base\": \"http://doesnotmatter/\",\n  "
      "  \"href\": \"https://%40test%40test@example:800/\",\n    \"origin\": \"https://example:800\",\n    "
      "\"protocol\": \"https:\",\n    \"username\": \"%40test%40test\",\n    \"password\": \"\",\n    "
      "\"host\": \"example:800\",\n    \"hostname\": \"example\",\n    \"port\": \"800\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://@test@test@example:800/", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "%40test%40test") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example") << details;
    EXPECT_EQ(ctx.out.get_port(), "800") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 318 - # multiple @ in authority state (2)
TYPED_TEST(URIWhatwgTest, MultipleInAuthorityState2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://@@@example\",\n    \"base\": \"http://doesnotmatter/\",\n    \"href\": "
      "\"https://%40%40@example/\",\n    \"origin\": \"https://example\",\n    \"protocol\": \"https:\",\n   "
      " \"username\": \"%40%40\",\n    \"password\": \"\",\n    \"host\": \"example\",\n    \"hostname\": "
      "\"example\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://@@@example", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "%40%40") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 319 - non-az-09 characters (1)
TYPED_TEST(URIWhatwgTest, NonAz09Characters1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://`{}:`{}@h/`{}?`{}\",\n    \"base\": \"http://doesnotmatter/\",\n    "
      "\"href\": \"http://%60%7B%7D:%60%7B%7D@h/%60%7B%7D?`{}\",\n    \"origin\": \"http://h\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"%60%7B%7D\",\n    \"password\": \"%60%7B%7D\",\n    "
      "\"host\": \"h\",\n    \"hostname\": \"h\",\n    \"port\": \"\",\n    \"pathname\": \"/%60%7B%7D\",\n  "
      "  \"search\": \"?`{}\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://`{}:`{}@h/`{}?`{}", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "%60%7B%7D") << details;
    EXPECT_EQ(ctx.out.get_password(), "%60%7B%7D") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "h") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%60%7B%7D") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/`{}") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "`{}") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 320 - byte is ' and url is special (1)
TYPED_TEST(URIWhatwgTest, ByteIsAndUrlIsSpecial1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://host/?'\",\n    \"base\": null,\n    \"href\": \"http://host/?%27\",\n   "
      " \"origin\": \"http://host\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"?%27\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://host/?'");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%27") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "'") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 321 - byte is ' and url is special (2)
TYPED_TEST(URIWhatwgTest, ByteIsAndUrlIsSpecial2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"notspecial://host/?'\",\n    \"base\": null,\n    \"href\": "
      "\"notspecial://host/?'\",\n    \"origin\": \"null\",\n    \"protocol\": \"notspecial:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n  "
      "  \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"?'\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("notspecial://host/?'");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "notspecial") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "'") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 322 - # Credentials in base (1)
TYPED_TEST(URIWhatwgTest, CredentialsInBase1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/some/path\",\n    \"base\": \"http://user@example.org/smth\",\n    \"href\": "
      "\"http://user@example.org/some/path\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"user\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/some/path\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("/some/path", "http://user@example.org/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/some/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 323 - # Credentials in base (2)
TYPED_TEST(URIWhatwgTest, CredentialsInBase2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\",\n    \"base\": \"http://user:pass@example.org:21/smth\",\n    \"href\": "
      "\"http://user:pass@example.org:21/smth\",\n    \"origin\": \"http://example.org:21\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"user\",\n    \"password\": \"pass\",\n    \"host\": "
      "\"example.org:21\",\n    \"hostname\": \"example.org\",\n    \"port\": \"21\",\n    \"pathname\": "
      "\"/smth\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("", "http://user:pass@example.org:21/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "pass") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "21") << details;
    EXPECT_EQ(ctx.out.get_path(), "/smth") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 324 - # Credentials in base (3)
TYPED_TEST(URIWhatwgTest, CredentialsInBase3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/some/path\",\n    \"base\": \"http://user:pass@example.org:21/smth\",\n    "
      "\"href\": \"http://user:pass@example.org:21/some/path\",\n    \"origin\": "
      "\"http://example.org:21\",\n    \"protocol\": \"http:\",\n    \"username\": \"user\",\n    "
      "\"password\": \"pass\",\n    \"host\": \"example.org:21\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"21\",\n    \"pathname\": \"/some/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("/some/path", "http://user:pass@example.org:21/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "pass") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "21") << details;
    EXPECT_EQ(ctx.out.get_path(), "/some/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 325 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (1)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"i\",\n    \"base\": \"sc:sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 326 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (2)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"i\",\n    \"base\": \"sc:sd/sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 327 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (3)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"i\",\n    \"base\": \"sc:/pa/pa\",\n    \"href\": \"sc:/pa/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 328 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (4)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"i\",\n    \"base\": \"sc://ho/pa\",\n    \"href\": \"sc://ho/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"ho\",\n    \"hostname\": \"ho\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ho") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 329 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (5)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"i\",\n    \"base\": \"sc:///pa/pa\",\n    \"href\": \"sc:///pa/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 330 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (6)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../i\",\n    \"base\": \"sc:sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 331 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (7)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../i\",\n    \"base\": \"sc:sd/sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 332 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (8)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../i\",\n    \"base\": \"sc:/pa/pa\",\n    \"href\": \"sc:/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 333 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (9)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../i\",\n    \"base\": \"sc://ho/pa\",\n    \"href\": \"sc://ho/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"ho\",\n    \"hostname\": \"ho\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ho") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 334 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (10)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../i\",\n    \"base\": \"sc:///pa/pa\",\n    \"href\": \"sc:///i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 335 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (11)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/i\",\n    \"base\": \"sc:sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 336 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (12)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/i\",\n    \"base\": \"sc:sd/sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 337 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (13)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/i\",\n    \"base\": \"sc:/pa/pa\",\n    \"href\": \"sc:/i\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 338 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (14)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/i\",\n    \"base\": \"sc://ho/pa\",\n    \"href\": \"sc://ho/i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"ho\",\n    \"hostname\": \"ho\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ho") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 339 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (15)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/i\",\n    \"base\": \"sc:///pa/pa\",\n    \"href\": \"sc:///i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/i\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/i") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 340 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (16)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?i\",\n    \"base\": \"sc:sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 341 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (17)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?i\",\n    \"base\": \"sc:sd/sd\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 342 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (18)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?i\",\n    \"base\": \"sc:/pa/pa\",\n    \"href\": \"sc:/pa/pa?i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/pa\",\n    "
      "\"search\": \"?i\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "i") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 343 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (19)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?i\",\n    \"base\": \"sc://ho/pa\",\n    \"href\": \"sc://ho/pa?i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"ho\",\n    \"hostname\": \"ho\",\n    \"port\": \"\",\n    \"pathname\": \"/pa\",\n    "
      "\"search\": \"?i\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ho") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "i") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 344 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (20)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?i\",\n    \"base\": \"sc:///pa/pa\",\n    \"href\": \"sc:///pa/pa?i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/pa\",\n    "
      "\"search\": \"?i\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "i") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 345 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (21)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#i\",\n    \"base\": \"sc:sd\",\n    \"href\": \"sc:sd#i\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"sd\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#i\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:sd");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "sd") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "i") << details;
}

// 346 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (22)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#i\",\n    \"base\": \"sc:sd/sd\",\n    \"href\": \"sc:sd/sd#i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"sd/sd\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#i\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:sd/sd");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "sd/sd") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "i") << details;
}

// 347 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (23)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#i\",\n    \"base\": \"sc:/pa/pa\",\n    \"href\": \"sc:/pa/pa#i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/pa\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#i\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "i") << details;
}

// 348 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (24)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#i\",\n    \"base\": \"sc://ho/pa\",\n    \"href\": \"sc://ho/pa#i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"ho\",\n    \"hostname\": \"ho\",\n    \"port\": \"\",\n    \"pathname\": \"/pa\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#i\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ho") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "i") << details;
}

// 349 - # a set of tests designed by zcorpan for relative URLs with unknown schemes (25)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#i\",\n    \"base\": \"sc:///pa/pa\",\n    \"href\": \"sc:///pa/pa#i\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pa/pa\",\n    "
      "\"search\": \"\",\n    \"hash\": \"#i\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pa/pa") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "i") << details;
}

// 350 - # make sure that relative URL logic works on known typically non-relative schemes too (1)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"about:/../\",\n    \"base\": null,\n    \"href\": \"about:/\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"about:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("about:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "about") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 351 - # make sure that relative URL logic works on known typically non-relative schemes too (2)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:/../\",\n    \"base\": null,\n    \"href\": \"data:/\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 352 - # make sure that relative URL logic works on known typically non-relative schemes too (3)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:/../\",\n    \"base\": null,\n    \"href\": \"javascript:/\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"javascript:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n  "
      "  \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 353 - # make sure that relative URL logic works on known typically non-relative schemes too (4)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:/../\",\n    \"base\": null,\n    \"href\": \"mailto:/\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n  "
      "  \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 354 - # unknown schemes and their hosts (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://ñ.test/\",\n    \"base\": null,\n    \"href\": \"sc://%C3%B1.test/\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1.test\",\n    \"hostname\": \"%C3%B1.test\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://ñ.test/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1.test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 355 - # unknown schemes and their hosts (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://%/\",\n    \"base\": null,\n    \"href\": \"sc://%/\",\n    \"protocol\": "
      "\"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"%\",\n    \"hostname\": "
      "\"%\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://%/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 356 - # unknown schemes and their hosts (3)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://@/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://@/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 357 - # unknown schemes and their hosts (4)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://te@s:t@/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://te@s:t@/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 358 - # unknown schemes and their hosts (5)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://:/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://:/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 359 - # unknown schemes and their hosts (6)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://:12/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://:12/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 360 - # unknown schemes and their hosts (7)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"x\",\n    \"base\": \"sc://ñ\",\n    \"href\": \"sc://%C3%B1/x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/x\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("x", "sc://ñ");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/x") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 361 - # unknown schemes and backslashes (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndBackslashes1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc:\\\\../\",\n    \"base\": null,\n    \"href\": \"sc:\\\\../\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"\\\\../\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc:\\../");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "\\../") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 362 - # unknown scheme with path looking like a password (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithPathLookingLikeAPassword1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc::a@example.net\",\n    \"base\": null,\n    \"href\": "
      "\"sc::a@example.net\",\n    \"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \":a@example.net\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc::a@example.net");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), ":a@example.net") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 363 - # unknown scheme with bogus percent-encoding (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithBogusPercentEncoding1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wow:%NBD\",\n    \"base\": null,\n    \"href\": \"wow:%NBD\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"wow:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"%NBD\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wow:%NBD");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wow") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "%NBD") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 364 - # unknown scheme with bogus percent-encoding (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithBogusPercentEncoding2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wow:%1G\",\n    \"base\": null,\n    \"href\": \"wow:%1G\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"wow:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"%1G\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wow:%1G");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wow") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "%1G") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 365 - # unknown scheme with non-URL characters (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithNonUrlCharacters1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wow:￿\",\n    \"base\": null,\n    \"href\": \"wow:%EF%BF%BF\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"wow:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"%EF%BF%BF\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wow:￿");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wow") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "%EF%BF%BF") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "￿") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 366 - # unknown scheme with non-URL characters (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithNonUrlCharacters2) {
    static constexpr auto details =
      "\n{\n    \"input\": "
      "\"http://example.com/\\ud800𐟾\\udfff﷐﷏﷯ﷰ￾￿?\\ud800𐟾\\udfff﷐﷏﷯ﷰ￾￿\",\n   "
      " "
      "\"base\": null,\n    \"href\": "
      "\"http://example.com/"
      "%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF?%EF%BF%BD%F0%90%"
      "9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF\",\n    \"origin\": "
      "\"http://example.com\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": \"\",\n    "
      "\"pathname\": "
      "\"/%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF\",\n    "
      "\"search\": "
      "\"?%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://example.com/�𐟾�﷐﷏﷯ﷰ￾￿?�𐟾�﷐﷏﷯ﷰ￾￿");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(),
                  "/%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF")
          << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/�𐟾�﷐﷏﷯ﷰ￾￿") << details;
    }
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(),
                  "%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF")
          << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "�𐟾�﷐﷏﷯ﷰ￾￿") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 367 - Forbidden host code points (1)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a\\u0000b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a\0b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 368 - Forbidden host code points (2)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 369 - Forbidden host code points (3)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a<b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a<b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 370 - Forbidden host code points (4)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a>b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a>b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 371 - Forbidden host code points (5)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a[b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a[b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 372 - Forbidden host code points (6)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a\\\\b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a\\b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 373 - Forbidden host code points (7)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a]b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a]b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 374 - Forbidden host code points (8)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a^b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a^b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 375 - Forbidden host code points (9)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://a|b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a|b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 376 - Forbidden host codepoints: tabs and newlines are removed during preprocessing (1)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://ho\\tst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"foo://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\tst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 377 - Forbidden host codepoints: tabs and newlines are removed during preprocessing (2)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://ho\\nst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"foo://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\nst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 378 - Forbidden host codepoints: tabs and newlines are removed during preprocessing (3)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://ho\\rst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"foo://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\rst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 379 - Forbidden domain code-points (1)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0000b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\0b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 380 - Forbidden domain code-points (2)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0001b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 381 - Forbidden domain code-points (3)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0002b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 382 - Forbidden domain code-points (4)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0003b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 383 - Forbidden domain code-points (5)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0004b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 384 - Forbidden domain code-points (6)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0005b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 385 - Forbidden domain code-points (7)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0006b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 386 - Forbidden domain code-points (8)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0007b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 387 - Forbidden domain code-points (9)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\bb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 388 - Forbidden domain code-points (10)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u000bb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 389 - Forbidden domain code-points (11)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\fb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 390 - Forbidden domain code-points (12)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u000eb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 391 - Forbidden domain code-points (13)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u000fb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 392 - Forbidden domain code-points (14)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0010b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 393 - Forbidden domain code-points (15)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0011b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 394 - Forbidden domain code-points (16)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0012b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 395 - Forbidden domain code-points (17)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0013b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 396 - Forbidden domain code-points (18)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0014b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 397 - Forbidden domain code-points (19)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0015b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 398 - Forbidden domain code-points (20)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0016b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 399 - Forbidden domain code-points (21)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0017b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 400 - Forbidden domain code-points (22)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0018b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 401 - Forbidden domain code-points (23)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u0019b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 402 - Forbidden domain code-points (24)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001ab/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 403 - Forbidden domain code-points (25)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001bb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 404 - Forbidden domain code-points (26)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001cb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 405 - Forbidden domain code-points (27)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001db/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 406 - Forbidden domain code-points (28)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001eb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 407 - Forbidden domain code-points (29)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints29) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a\\u001fb/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 408 - Forbidden domain code-points (30)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints30) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 409 - Forbidden domain code-points (31)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints31) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a%b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a%b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 410 - Forbidden domain code-points (32)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints32) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a<b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a<b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 411 - Forbidden domain code-points (33)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a>b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a>b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 412 - Forbidden domain code-points (34)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a[b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a[b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 413 - Forbidden domain code-points (35)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a]b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a]b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 414 - Forbidden domain code-points (36)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a^b\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a^b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 415 - Forbidden domain code-points (37)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints37) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://a|b/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://a|b/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 416 - Forbidden domain code-points (38)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints38) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ab/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 417 - Forbidden domain codepoints: tabs and newlines are removed during preprocessing (1)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho\\tst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"http://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"http:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\tst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 418 - Forbidden domain codepoints: tabs and newlines are removed during preprocessing (2)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho\\nst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"http://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"http:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\nst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 419 - Forbidden domain codepoints: tabs and newlines are removed during preprocessing (3)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho\\rst/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"href\": \"http://host/\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"http:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\rst/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 420 - Encoded forbidden domain codepoints in special URLs (1)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%00st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%00st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 421 - Encoded forbidden domain codepoints in special URLs (2)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%01st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%01st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 422 - Encoded forbidden domain codepoints in special URLs (3)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%02st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%02st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 423 - Encoded forbidden domain codepoints in special URLs (4)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%03st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%03st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 424 - Encoded forbidden domain codepoints in special URLs (5)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%04st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%04st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 425 - Encoded forbidden domain codepoints in special URLs (6)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%05st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%05st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 426 - Encoded forbidden domain codepoints in special URLs (7)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%06st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%06st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 427 - Encoded forbidden domain codepoints in special URLs (8)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%07st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%07st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 428 - Encoded forbidden domain codepoints in special URLs (9)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%08st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%08st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 429 - Encoded forbidden domain codepoints in special URLs (10)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%09st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%09st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 430 - Encoded forbidden domain codepoints in special URLs (11)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Ast/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 431 - Encoded forbidden domain codepoints in special URLs (12)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Bst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 432 - Encoded forbidden domain codepoints in special URLs (13)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Cst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 433 - Encoded forbidden domain codepoints in special URLs (14)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Dst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 434 - Encoded forbidden domain codepoints in special URLs (15)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Est/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 435 - Encoded forbidden domain codepoints in special URLs (16)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%0Fst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 436 - Encoded forbidden domain codepoints in special URLs (17)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%10st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%10st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 437 - Encoded forbidden domain codepoints in special URLs (18)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%11st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%11st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 438 - Encoded forbidden domain codepoints in special URLs (19)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%12st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%12st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 439 - Encoded forbidden domain codepoints in special URLs (20)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%13st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%13st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 440 - Encoded forbidden domain codepoints in special URLs (21)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%14st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%14st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 441 - Encoded forbidden domain codepoints in special URLs (22)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%15st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%15st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 442 - Encoded forbidden domain codepoints in special URLs (23)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%16st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%16st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 443 - Encoded forbidden domain codepoints in special URLs (24)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%17st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%17st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 444 - Encoded forbidden domain codepoints in special URLs (25)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%18st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%18st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 445 - Encoded forbidden domain codepoints in special URLs (26)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%19st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%19st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 446 - Encoded forbidden domain codepoints in special URLs (27)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Ast/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 447 - Encoded forbidden domain codepoints in special URLs (28)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Bst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 448 - Encoded forbidden domain codepoints in special URLs (29)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls29) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Cst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 449 - Encoded forbidden domain codepoints in special URLs (30)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls30) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Dst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 450 - Encoded forbidden domain codepoints in special URLs (31)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls31) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Est/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 451 - Encoded forbidden domain codepoints in special URLs (32)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls32) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%1Fst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 452 - Encoded forbidden domain codepoints in special URLs (33)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%20st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%20st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 453 - Encoded forbidden domain codepoints in special URLs (34)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%23st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%23st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 454 - Encoded forbidden domain codepoints in special URLs (35)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%25st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%25st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 455 - Encoded forbidden domain codepoints in special URLs (36)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%2Fst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%2Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 456 - Encoded forbidden domain codepoints in special URLs (37)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls37) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%3Ast/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 457 - Encoded forbidden domain codepoints in special URLs (38)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls38) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%3Cst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 458 - Encoded forbidden domain codepoints in special URLs (39)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls39) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%3Est/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 459 - Encoded forbidden domain codepoints in special URLs (40)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls40) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%3Fst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 460 - Encoded forbidden domain codepoints in special URLs (41)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls41) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%40st/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%40st/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 461 - Encoded forbidden domain codepoints in special URLs (42)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls42) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%5Bst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 462 - Encoded forbidden domain codepoints in special URLs (43)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls43) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%5Cst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 463 - Encoded forbidden domain codepoints in special URLs (44)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls44) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%5Dst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 464 - Encoded forbidden domain codepoints in special URLs (45)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls45) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%7Cst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%7Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 465 - Encoded forbidden domain codepoints in special URLs (46)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls46) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://ho%7Fst/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%7Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 466 - Allowed host/domain code points (1)
TYPED_TEST(URIWhatwgTest, AllowedHostDomainCodePoints1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://!\\\"$&'()*+,-.;=_`{}~/\",\n    \"base\": null,\n    \"href\": "
      "\"http://!\\\"$&'()*+,-.;=_`{}~/\",\n    \"origin\": \"http://!\\\"$&'()*+,-.;=_`{}~\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"!\\\"$&'()*+,-.;=_`{}~\",\n    \"hostname\": \"!\\\"$&'()*+,-.;=_`{}~\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://!\"$&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$&'()*+,-.;=_`{}~") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 467 - Allowed host/domain code points (2)
TYPED_TEST(URIWhatwgTest, AllowedHostDomainCodePoints2) {
    static constexpr auto details =
      "\n{\n    \"input\": "
      "\"sc://"
      "\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\u000b\\f\\u000e\\u000f\\u0010\\u0011\\u0012\\u00"
      "13\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f!\\\"$%&'()*+,-"
      ".;=_`{}~/\",\n    \"base\": null,\n    \"href\": "
      "\"sc://"
      "%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\\\"$%&'()*+,-"
      ".;=_`{}~/\",\n    \"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": "
      "\"%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\\\"$%&'()*+"
      ",-.;=_`{}~\",\n    \"hostname\": "
      "\"%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\\\"$%&'()*+"
      ",-.;=_`{}~\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("sc://!\"$%&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(),
              "%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\"$%&'"
              "()*+,-.;=_`{}~")
      << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 468 - # Hosts and percent-encoding (1)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp://example.com%80/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://example.com%80/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 469 - # Hosts and percent-encoding (2)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp://example.com%A0/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://example.com%A0/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 470 - # Hosts and percent-encoding (3)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://example.com%80/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com%80/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 471 - # Hosts and percent-encoding (4)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://example.com%A0/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com%A0/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 472 - # Hosts and percent-encoding (5)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ftp://%e2%98%83\",\n    \"base\": null,\n    \"href\": \"ftp://xn--n3h/\",\n    "
      "\"origin\": \"ftp://xn--n3h\",\n    \"protocol\": \"ftp:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"xn--n3h\",\n    \"hostname\": \"xn--n3h\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://%e2%98%83");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "xn--n3h") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 473 - # Hosts and percent-encoding (6)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://%e2%98%83\",\n    \"base\": null,\n    \"href\": "
      "\"https://xn--n3h/\",\n    \"origin\": \"https://xn--n3h\",\n    \"protocol\": \"https:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"xn--n3h\",\n    \"hostname\": "
      "\"xn--n3h\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://%e2%98%83");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "xn--n3h") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 474 - # tests from jsdom/whatwg-url designed for code coverage (1)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://127.0.0.1:10100/relative_import.html\",\n    \"base\": null,\n    "
      "\"href\": \"http://127.0.0.1:10100/relative_import.html\",\n    \"origin\": "
      "\"http://127.0.0.1:10100\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"127.0.0.1:10100\",\n    \"hostname\": \"127.0.0.1\",\n    \"port\": "
      "\"10100\",\n    \"pathname\": \"/relative_import.html\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://127.0.0.1:10100/relative_import.html");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "127.0.0.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "10100") << details;
    EXPECT_EQ(ctx.out.get_path(), "/relative_import.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 475 - # tests from jsdom/whatwg-url designed for code coverage (2)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://facebook.com/?foo=%7B%22abc%22\",\n    \"base\": null,\n    \"href\": "
      "\"http://facebook.com/?foo=%7B%22abc%22\",\n    \"origin\": \"http://facebook.com\",\n    "
      "\"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"facebook.com\",\n    \"hostname\": \"facebook.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"?foo=%7B%22abc%22\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://facebook.com/?foo=%7B%22abc%22");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "facebook.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "foo=%7B%22abc%22") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "foo={\"abc\"") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 476 - # tests from jsdom/whatwg-url designed for code coverage (3)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://localhost:3000/jqueryui@1.2.3\",\n    \"base\": null,\n    \"href\": "
      "\"https://localhost:3000/jqueryui@1.2.3\",\n    \"origin\": \"https://localhost:3000\",\n    "
      "\"protocol\": \"https:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"localhost:3000\",\n    \"hostname\": \"localhost\",\n    \"port\": \"3000\",\n    \"pathname\": "
      "\"/jqueryui@1.2.3\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://localhost:3000/jqueryui@1.2.3");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "localhost") << details;
    EXPECT_EQ(ctx.out.get_port(), "3000") << details;
    EXPECT_EQ(ctx.out.get_path(), "/jqueryui@1.2.3") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 477 - # tab/LF/CR (1)
TYPED_TEST(URIWhatwgTest, TabLfCr1) {
    static constexpr auto details =
      "\n{\n    \"input\": "
      "\"h\\tt\\nt\\rp://h\\to\\ns\\rt:9\\t0\\n0\\r0/p\\ta\\nt\\rh?q\\tu\\ne\\rry#f\\tr\\na\\rg\",\n    "
      "\"base\": null,\n    \"href\": \"http://host:9000/path?query#frag\",\n    \"origin\": "
      "\"http://host:9000\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host:9000\",\n    \"hostname\": \"host\",\n    \"port\": \"9000\",\n    "
      "\"pathname\": \"/path\",\n    \"search\": \"?query\",\n    \"hash\": \"#frag\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "h\tt\nt\rp://h\to\ns\rt:9\t0\n0\r0/p\ta\nt\rh?q\tu\ne\rry#f\tr\na\rg");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "9000") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "query") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "frag") << details;
}

// 478 - # Stringification of URL.searchParams (1)
TYPED_TEST(URIWhatwgTest, StringificationOfUrlSearchparams1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?a=b&c=d\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar?a=b&c=d\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"?a=b&c=d\",\n    \"searchParams\": \"a=b&c=d\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?a=b&c=d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a=b&c=d") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 479 - # Stringification of URL.searchParams (2)
TYPED_TEST(URIWhatwgTest, StringificationOfUrlSearchparams2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"??a=b&c=d\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar??a=b&c=d\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"??a=b&c=d\",\n    \"searchParams\": \"%3Fa=b&c=d\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("??a=b&c=d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "?a=b&c=d") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 480 - # Scheme only (1)
TYPED_TEST(URIWhatwgTest, SchemeOnly1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:\",\n    \"base\": \"http://example.org/foo/bar\",\n    \"href\": "
      "\"http://example.org/foo/bar\",\n    \"origin\": \"http://example.org\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"example.org\",\n    "
      "\"hostname\": \"example.org\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": "
      "\"\",\n    \"searchParams\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 481 - # Scheme only (2)
TYPED_TEST(URIWhatwgTest, SchemeOnly2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http:\",\n    \"base\": \"https://example.org/foo/bar\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http:", "https://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 482 - # Scheme only (3)
TYPED_TEST(URIWhatwgTest, SchemeOnly3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc:\",\n    \"base\": \"https://example.org/foo/bar\",\n    \"href\": "
      "\"sc:\",\n    \"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"\",\n    \"search\": \"\",\n    \"searchParams\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc:", "https://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 483 - # Percent encoding of fragments (1)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.bar/baz?qux#foo\\bbar\",\n    \"base\": null,\n    \"href\": "
      "\"http://foo.bar/baz?qux#foo%08bar\",\n    \"origin\": \"http://foo.bar\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.bar\",\n    "
      "\"hostname\": \"foo.bar\",\n    \"port\": \"\",\n    \"pathname\": \"/baz\",\n    \"search\": "
      "\"?qux\",\n    \"searchParams\": \"qux=\",\n    \"hash\": \"#foo%08bar\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foobar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/baz") << details;
    EXPECT_EQ(ctx.out.get_queries(), "qux") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo%08bar") << details;
}

// 484 - # Percent encoding of fragments (2)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.bar/baz?qux#foo\\\"bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://foo.bar/baz?qux#foo%22bar\",\n    \"origin\": \"http://foo.bar\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.bar\",\n    "
      "\"hostname\": \"foo.bar\",\n    \"port\": \"\",\n    \"pathname\": \"/baz\",\n    \"search\": "
      "\"?qux\",\n    \"searchParams\": \"qux=\",\n    \"hash\": \"#foo%22bar\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo\"bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/baz") << details;
    EXPECT_EQ(ctx.out.get_queries(), "qux") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo%22bar") << details;
}

// 485 - # Percent encoding of fragments (3)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.bar/baz?qux#foo<bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://foo.bar/baz?qux#foo%3Cbar\",\n    \"origin\": \"http://foo.bar\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.bar\",\n    "
      "\"hostname\": \"foo.bar\",\n    \"port\": \"\",\n    \"pathname\": \"/baz\",\n    \"search\": "
      "\"?qux\",\n    \"searchParams\": \"qux=\",\n    \"hash\": \"#foo%3Cbar\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo<bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/baz") << details;
    EXPECT_EQ(ctx.out.get_queries(), "qux") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo%3Cbar") << details;
}

// 486 - # Percent encoding of fragments (4)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.bar/baz?qux#foo>bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://foo.bar/baz?qux#foo%3Ebar\",\n    \"origin\": \"http://foo.bar\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.bar\",\n    "
      "\"hostname\": \"foo.bar\",\n    \"port\": \"\",\n    \"pathname\": \"/baz\",\n    \"search\": "
      "\"?qux\",\n    \"searchParams\": \"qux=\",\n    \"hash\": \"#foo%3Ebar\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo>bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/baz") << details;
    EXPECT_EQ(ctx.out.get_queries(), "qux") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo%3Ebar") << details;
}

// 487 - # Percent encoding of fragments (5)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.bar/baz?qux#foo`bar\",\n    \"base\": null,\n    \"href\": "
      "\"http://foo.bar/baz?qux#foo%60bar\",\n    \"origin\": \"http://foo.bar\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"foo.bar\",\n    "
      "\"hostname\": \"foo.bar\",\n    \"port\": \"\",\n    \"pathname\": \"/baz\",\n    \"search\": "
      "\"?qux\",\n    \"searchParams\": \"qux=\",\n    \"hash\": \"#foo%60bar\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo`bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/baz") << details;
    EXPECT_EQ(ctx.out.get_queries(), "qux") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "foo%60bar") << details;
}

// 488 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (1)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103171) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.4/\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://1.2.3.4/\",\n    \"origin\": \"http://1.2.3.4\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"1.2.3.4\",\n    \"hostname\": "
      "\"1.2.3.4\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4/", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 489 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (2)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103172) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.4./\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://1.2.3.4/\",\n    \"origin\": \"http://1.2.3.4\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"1.2.3.4\",\n    \"hostname\": "
      "\"1.2.3.4\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4./", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 490 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (3)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103173) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.168.257\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://192.168.1.1/\",\n    \"origin\": \"http://192.168.1.1\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"192.168.1.1\",\n    \"hostname\": "
      "\"192.168.1.1\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.257", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.1.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 491 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (4)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103174) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.168.257.\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://192.168.1.1/\",\n    \"origin\": \"http://192.168.1.1\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"192.168.1.1\",\n    \"hostname\": "
      "\"192.168.1.1\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.257.", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.1.1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 492 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (5)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103175) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://192.168.257.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://192.168.257.com/\",\n    \"origin\": \"http://192.168.257.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"192.168.257.com\",\n    "
      "\"hostname\": \"192.168.257.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://192.168.257.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.257.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 493 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (6)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103176) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://256\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://0.0.1.0/\",\n    \"origin\": \"http://0.0.1.0\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"0.0.1.0\",\n    \"hostname\": "
      "\"0.0.1.0\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://256", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "0.0.1.0") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 494 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (7)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103177) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://256.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://256.com/\",\n    \"origin\": \"http://256.com\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"256.com\",\n    \"hostname\": "
      "\"256.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://256.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "256.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 495 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (8)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103178) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://999999999\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://59.154.201.255/\",\n    \"origin\": \"http://59.154.201.255\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"59.154.201.255\",\n    "
      "\"hostname\": \"59.154.201.255\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "59.154.201.255") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 496 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (9)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103179) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://999999999.\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://59.154.201.255/\",\n    \"origin\": \"http://59.154.201.255\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"59.154.201.255\",\n    "
      "\"hostname\": \"59.154.201.255\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999.", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "59.154.201.255") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 497 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (10)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031710) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://999999999.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://999999999.com/\",\n    \"origin\": \"http://999999999.com\",\n    \"protocol\": \"http:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"999999999.com\",\n    \"hostname\": "
      "\"999999999.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "999999999.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 498 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (11)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031711) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://10000000000\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://10000000000", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 499 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (12)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031712) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://10000000000.com\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://10000000000.com/\",\n    \"origin\": \"http://10000000000.com\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"10000000000.com\",\n    "
      "\"hostname\": \"10000000000.com\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://10000000000.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "10000000000.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 500 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (13)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031713) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://4294967295\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://255.255.255.255/\",\n    \"origin\": \"http://255.255.255.255\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"255.255.255.255\",\n    "
      "\"hostname\": \"255.255.255.255\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://4294967295", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "255.255.255.255") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 501 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (14)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031714) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://4294967296\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://4294967296", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 502 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (15)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031715) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0xffffffff\",\n    \"base\": \"http://other.com/\",\n    \"href\": "
      "\"http://255.255.255.255/\",\n    \"origin\": \"http://255.255.255.255\",\n    \"protocol\": "
      "\"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"255.255.255.255\",\n    "
      "\"hostname\": \"255.255.255.255\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0xffffffff", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "255.255.255.255") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 503 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (16)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031716) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0xffffffff1\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0xffffffff1", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 504 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (17)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031717) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://256.256.256.256\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 505 - # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (18)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031718) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://0x.0x.0\",\n    \"base\": null,\n    \"href\": \"https://0.0.0.0/\",\n  "
      "  \"origin\": \"https://0.0.0.0\",\n    \"protocol\": \"https:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"0.0.0.0\",\n    \"hostname\": \"0.0.0.0\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://0x.0x.0");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "0.0.0.0") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 506 - More IPv4 parsing (via https://github.com/jsdom/whatwg-url/issues/92) (1)
TYPED_TEST(URIWhatwgTest, MoreIpv4ParsingViaHttpsGithubComJsdomWhatwgUrlIssues921) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://0x100000000/test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://0x100000000/test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 507 - More IPv4 parsing (via https://github.com/jsdom/whatwg-url/issues/92) (2)
TYPED_TEST(URIWhatwgTest, MoreIpv4ParsingViaHttpsGithubComJsdomWhatwgUrlIssues922) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://256.0.0.1/test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://256.0.0.1/test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 508 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (1)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///C%3A/\",\n    \"base\": null,\n    \"href\": \"file:///C%3A/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C%3A/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C%3A/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/C%3A/") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 509 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (2)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///C%7C/\",\n    \"base\": null,\n    \"href\": \"file:///C%7C/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C%7C/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C%7C/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/C%7C/") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/C|/") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 510 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (3)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://%43%3A\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%3A");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 511 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (4)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://%43%7C\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%7C");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 512 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (5)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://%43|\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43|");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 513 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (6)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://C%7C\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://C%7C");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 514 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (7)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://%43%7C/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%7C/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 515 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (8)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://%43%7C/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://%43%7C/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 516 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (9)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"asdf://%43|/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("asdf://%43|/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 517 - # file URLs containing percent-encoded Windows drive letters (shouldn't work) (10)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"asdf://%43%7C/\",\n    \"base\": null,\n    \"href\": \"asdf://%43%7C/\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"asdf:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"%43%7C\",\n    \"hostname\": \"%43%7C\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("asdf://%43%7C/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "asdf") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%43%7C") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 518 - # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (1)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull601) {
    static constexpr auto details =
      "\n{\n    \"input\": \"pix/submit.gif\",\n    \"base\": "
      "\"file:///C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/anchor.html\",\n    "
      "\"href\": "
      "\"file:///C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/pix/submit.gif\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/pix/submit.gif\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "pix/submit.gif",
      "file:///C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/anchor.html");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(),
              "/C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/pix/submit.gif")
      << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 519 - # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (2)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull602) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..\",\n    \"base\": \"file:///C:/\",\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 520 - # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (3)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull603) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..\",\n    \"base\": \"file:///\",\n    \"href\": \"file:///\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 521 - # More file URL tests by zcorpan and annevk (1)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\",\n    \"base\": \"file:///C:/a/b\",\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 522 - # More file URL tests by zcorpan and annevk (2)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\",\n    \"base\": \"file://h/C:/a/b\",\n    \"href\": \"file://h/C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"h\",\n    "
      "\"hostname\": \"h\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file://h/C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "h") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 523 - # More file URL tests by zcorpan and annevk (3)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\",\n    \"base\": \"file://h/a/b\",\n    \"href\": \"file://h/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"h\",\n    "
      "\"hostname\": \"h\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file://h/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "h") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 524 - # More file URL tests by zcorpan and annevk (4)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//d:\",\n    \"base\": \"file:///C:/a/b\",\n    \"href\": \"file:///d:\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/d:\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//d:", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/d:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 525 - # More file URL tests by zcorpan and annevk (5)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//d:/..\",\n    \"base\": \"file:///C:/a/b\",\n    \"href\": \"file:///d:/\",\n "
      "   \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n  "
      "  \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/d:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//d:/..", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/d:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 526 - # More file URL tests by zcorpan and annevk (6)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..\",\n    \"base\": \"file:///ab:/\",\n    \"href\": \"file:///\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///ab:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 527 - # More file URL tests by zcorpan and annevk (7)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..\",\n    \"base\": \"file:///1:/\",\n    \"href\": \"file:///\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///1:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 528 - # More file URL tests by zcorpan and annevk (8)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"?test\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "test") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 529 - # More file URL tests by zcorpan and annevk (9)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?test\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"?test\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "test") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 530 - # More file URL tests by zcorpan and annevk (10)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?x\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?x\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/test\",\n    "
      "\"search\": \"?x\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "x") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 531 - # More file URL tests by zcorpan and annevk (11)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:?x\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?x\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/test\",\n    "
      "\"search\": \"?x\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:?x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "x") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 532 - # More file URL tests by zcorpan and annevk (12)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?test#x\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"?test\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "test") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 533 - # More file URL tests by zcorpan and annevk (13)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:#x\",\n    \"base\": \"file:///test?test#test\",\n    \"href\": "
      "\"file:///test?test#x\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"?test\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:#x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "test") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 534 - # File URLs and many (back)slashes (1)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\\\\\//\",\n    \"base\": null,\n    \"href\": \"file:////\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 535 - # File URLs and many (back)slashes (2)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\\\\\\\\\\\\\\",\n    \"base\": null,\n    \"href\": \"file:////\",\n   "
      " \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 536 - # File URLs and many (back)slashes (3)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\\\\\\\\\\\\\?fox\",\n    \"base\": null,\n    \"href\": "
      "\"file:////?fox\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n  "
      "  \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    "
      "\"search\": \"?fox\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\?fox");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "fox") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 537 - # File URLs and many (back)slashes (4)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\\\\\\\\\\\\\#guppy\",\n    \"base\": null,\n    \"href\": "
      "\"file:////#guppy\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n "
      "   \"search\": \"\",\n    \"hash\": \"#guppy\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\#guppy");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "guppy") << details;
}

// 538 - # File URLs and many (back)slashes (5)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://spider///\",\n    \"base\": null,\n    \"href\": \"file://spider///\",\n "
      "   \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"spider\",\n    \"hostname\": \"spider\",\n    \"port\": \"\",\n    \"pathname\": \"///\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://spider///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "spider") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 539 - # File URLs and many (back)slashes (6)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\\\\\localhost//\",\n    \"base\": null,\n    \"href\": "
      "\"file:////\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\localhost//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 540 - # File URLs and many (back)slashes (7)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///localhost//cat\",\n    \"base\": null,\n    \"href\": "
      "\"file:///localhost//cat\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/localhost//cat\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///localhost//cat");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/localhost//cat") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 541 - # File URLs and many (back)slashes (8)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://\\\\/localhost//cat\",\n    \"base\": null,\n    \"href\": "
      "\"file:////localhost//cat\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"//localhost//cat\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://\\/localhost//cat");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//localhost//cat") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 542 - # File URLs and many (back)slashes (9)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost//a//../..//\",\n    \"base\": null,\n    \"href\": "
      "\"file://///\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"///\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost//a//../..//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 543 - # File URLs and many (back)slashes (10)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/////mouse\",\n    \"base\": \"file:///elephant\",\n    \"href\": "
      "\"file://///mouse\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"///mouse\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/////mouse", "file:///elephant");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///mouse") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 544 - # File URLs and many (back)slashes (11)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\//pig\",\n    \"base\": \"file://lion/\",\n    \"href\": \"file:///pig\",\n "
      "   \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n  "
      "  \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/pig\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pig") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 545 - # File URLs and many (back)slashes (12)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\/localhost//pig\",\n    \"base\": \"file://lion/\",\n    \"href\": "
      "\"file:////pig\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//pig\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\/localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//pig") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 546 - # File URLs and many (back)slashes (13)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//localhost//pig\",\n    \"base\": \"file://lion/\",\n    \"href\": "
      "\"file:////pig\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//pig\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//pig") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 547 - # File URLs and many (back)slashes (14)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/..//localhost//pig\",\n    \"base\": \"file://lion/\",\n    \"href\": "
      "\"file://lion//localhost//pig\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"lion\",\n    \"hostname\": \"lion\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"//localhost//pig\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/..//localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "lion") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//localhost//pig") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 548 - # File URLs and many (back)slashes (15)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://\",\n    \"base\": \"file://ape/\",\n    \"href\": \"file:///\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://", "file://ape/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 549 - # File URLs with non-empty hosts (1)
TYPED_TEST(URIWhatwgTest, FileUrlsWithNonEmptyHosts1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/rooibos\",\n    \"base\": \"file://tea/\",\n    \"href\": "
      "\"file://tea/rooibos\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"tea\",\n    \"hostname\": \"tea\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/rooibos\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/rooibos", "file://tea/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "tea") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/rooibos") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 550 - # File URLs with non-empty hosts (2)
TYPED_TEST(URIWhatwgTest, FileUrlsWithNonEmptyHosts2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/?chai\",\n    \"base\": \"file://tea/\",\n    \"href\": "
      "\"file://tea/?chai\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"tea\",\n    \"hostname\": \"tea\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/\",\n    \"search\": \"?chai\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/?chai", "file://tea/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "tea") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "chai") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 551 - # Windows drive letter handling with the 'file:' base URL (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 552 - # Windows drive letter handling with the 'file:' base URL (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|\",\n    \"base\": \"file://host/D:/dir1/dir2/file\",\n    \"href\": "
      "\"file://host/C:\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|", "file://host/D:/dir1/dir2/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 553 - # Windows drive letter handling with the 'file:' base URL (3)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|#\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:#\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|#", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 554 - # Windows drive letter handling with the 'file:' base URL (4)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|?\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:?\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|?", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 555 - # Windows drive letter handling with the 'file:' base URL (5)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|/\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|/", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 556 - # Windows drive letter handling with the 'file:' base URL (6)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|\\n/\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|\n/", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 557 - # Windows drive letter handling with the 'file:' base URL (7)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|\\\\\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|\\", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 558 - # Windows drive letter handling with the 'file:' base URL (8)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/dir/C\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/dir/C\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/C") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 559 - # Windows drive letter handling with the 'file:' base URL (9)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|a\",\n    \"base\": \"file://host/dir/file\",\n    \"href\": "
      "\"file://host/dir/C|a\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/dir/C|a\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|a", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/C|a") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 560 - # Windows drive letter quirk in the file slash state (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/c:/foo/bar\",\n    \"base\": \"file:///c:/baz/qux\",\n    \"href\": "
      "\"file:///c:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/c:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/c:/foo/bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 561 - # Windows drive letter quirk in the file slash state (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/c|/foo/bar\",\n    \"base\": \"file:///c:/baz/qux\",\n    \"href\": "
      "\"file:///c:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/c:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/c|/foo/bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 562 - # Windows drive letter quirk in the file slash state (3)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\\\\c:\\\\foo\\\\bar\",\n    \"base\": \"file:///c:/baz/qux\",\n    "
      "\"href\": \"file:///c:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/c:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\c:\\foo\\bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 563 - # Windows drive letter quirk in the file slash state (4)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/c:/foo/bar\",\n    \"base\": \"file://host/path\",\n    \"href\": "
      "\"file://host/c:/foo/bar\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/c:/foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/c:/foo/bar", "file://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/c:/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 564 - # Do not drop the host in the presence of a drive letter (1)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://example.net/C:/\",\n    \"base\": null,\n    \"href\": "
      "\"file://example.net/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"example.net\",\n    \"hostname\": \"example.net\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://example.net/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.net") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 565 - # Do not drop the host in the presence of a drive letter (2)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://1.2.3.4/C:/\",\n    \"base\": null,\n    \"href\": "
      "\"file://1.2.3.4/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"1.2.3.4\",\n    \"hostname\": \"1.2.3.4\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://1.2.3.4/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 566 - # Do not drop the host in the presence of a drive letter (3)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://[1::8]/C:/\",\n    \"base\": null,\n    \"href\": "
      "\"file://[1::8]/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"[1::8]\",\n    \"hostname\": \"[1::8]\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://[1::8]/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1::8]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 567 - # Copy the host from the base URL in the following cases (1)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"C|/\",\n    \"base\": \"file://host/\",\n    \"href\": \"file://host/C:/\",\n   "
      " \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("C|/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 568 - # Copy the host from the base URL in the following cases (2)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/C:/\",\n    \"base\": \"file://host/\",\n    \"href\": \"file://host/C:/\",\n  "
      "  \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 569 - # Copy the host from the base URL in the following cases (3)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:C:/\",\n    \"base\": \"file://host/\",\n    \"href\": "
      "\"file://host/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 570 - # Copy the host from the base URL in the following cases (4)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:/C:/\",\n    \"base\": \"file://host/\",\n    \"href\": "
      "\"file://host/C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/C:/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:/C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 571 - # Copy the empty host from the input in the following cases (1)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//C:/\",\n    \"base\": \"file://host/\",\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 572 - # Copy the empty host from the input in the following cases (2)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://C:/\",\n    \"base\": \"file://host/\",\n    \"href\": "
      "\"file:///C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 573 - # Copy the empty host from the input in the following cases (3)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///C:/\",\n    \"base\": \"file://host/\",\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 574 - # Copy the empty host from the input in the following cases (4)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///C:/\",\n    \"base\": \"file://host/\",\n    \"href\": "
      "\"file:///C:/\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 575 - # Windows drive letter quirk (no host) (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkNoHost1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:/C|/\",\n    \"base\": null,\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:/C|/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 576 - # Windows drive letter quirk (no host) (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkNoHost2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://C|/\",\n    \"base\": null,\n    \"href\": \"file:///C:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/C:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://C|/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/C:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 577 - # file URLs without base URL by Rimas Misevičius (1)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:\",\n    \"base\": null,\n    \"href\": \"file:///\",\n    \"protocol\": "
      "\"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": "
      "\"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 578 - # file URLs without base URL by Rimas Misevičius (2)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:?q=v\",\n    \"base\": null,\n    \"href\": \"file:///?q=v\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"?q=v\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:?q=v");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "q=v") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 579 - # file URLs without base URL by Rimas Misevičius (3)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:#frag\",\n    \"base\": null,\n    \"href\": \"file:///#frag\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"#frag\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:#frag");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "frag") << details;
}

// 580 - # file: drive letter cases from https://crbug.com/1078698 (1)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786981) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///Y:\",\n    \"base\": null,\n    \"href\": \"file:///Y:\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/Y:\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///Y:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/Y:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 581 - # file: drive letter cases from https://crbug.com/1078698 (2)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786982) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///Y:/\",\n    \"base\": null,\n    \"href\": \"file:///Y:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/Y:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///Y:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/Y:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 582 - # file: drive letter cases from https://crbug.com/1078698 (3)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786983) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///./Y\",\n    \"base\": null,\n    \"href\": \"file:///Y\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/Y\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./Y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/Y") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 583 - # file: drive letter cases from https://crbug.com/1078698 (4)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786984) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///./Y:\",\n    \"base\": null,\n    \"href\": \"file:///Y:\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/Y:\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./Y:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/Y:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 584 - # file: drive letter cases from https://crbug.com/1078698 (5)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786985) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\\\\\\\\\.\\\\Y:\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\\\.\\Y:");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 585 - # file: drive letter cases from https://crbug.com/1078698 but lowercased (1)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///y:\",\n    \"base\": null,\n    \"href\": \"file:///y:\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/y:\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///y:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/y:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 586 - # file: drive letter cases from https://crbug.com/1078698 but lowercased (2)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///y:/\",\n    \"base\": null,\n    \"href\": \"file:///y:/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/y:/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///y:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/y:/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 587 - # file: drive letter cases from https://crbug.com/1078698 but lowercased (3)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///./y\",\n    \"base\": null,\n    \"href\": \"file:///y\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/y\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/y") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 588 - # file: drive letter cases from https://crbug.com/1078698 but lowercased (4)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///./y:\",\n    \"base\": null,\n    \"href\": \"file:///y:\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/y:\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./y:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/y:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 589 - # file: drive letter cases from https://crbug.com/1078698 but lowercased (5)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\\\\\\\\\\\\.\\\\y:\",\n    \"base\": null,\n    \"failure\": true,\n    "
      "\"relativeTo\": \"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\\\.\\y:");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 590 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (1)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4051) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost//a//../..//foo\",\n    \"base\": null,\n    \"href\": "
      "\"file://///foo\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n  "
      "  \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"///foo\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost//a//../..//foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "///foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 591 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (2)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4052) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://localhost////foo\",\n    \"base\": null,\n    \"href\": "
      "\"file://////foo\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"////foo\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost////foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "////foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 592 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (3)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4053) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:////foo\",\n    \"base\": null,\n    \"href\": \"file:////foo\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//foo\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:////foo");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//foo") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 593 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (4)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4054) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///one/two\",\n    \"base\": \"file:///\",\n    \"href\": "
      "\"file:///one/two\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/one/two\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/one/two") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 594 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (5)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4055) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:////one/two\",\n    \"base\": \"file:///\",\n    \"href\": "
      "\"file:////one/two\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//one/two\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:////one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//one/two") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 595 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (6)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4056) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//one/two\",\n    \"base\": \"file:///\",\n    \"href\": \"file://one/two\",\n  "
      "  \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"one\",\n    \"hostname\": \"one\",\n    \"port\": \"\",\n    \"pathname\": \"/two\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "one") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/two") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 596 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (7)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4057) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///one/two\",\n    \"base\": \"file:///\",\n    \"href\": "
      "\"file:///one/two\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/one/two\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/one/two") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 597 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (8)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4058) {
    static constexpr auto details =
      "\n{\n    \"input\": \"////one/two\",\n    \"base\": \"file:///\",\n    \"href\": "
      "\"file:////one/two\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//one/two\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("////one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//one/two") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 598 - # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (9)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4059) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:///.//\",\n    \"base\": \"file:////\",\n    \"href\": \"file:////\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:///.//", "file:////");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 599 - File URL tests for https://github.com/whatwg/url/issues/549 (1)
TYPED_TEST(URIWhatwgTest, FileUrlTestsForHttpsGithubComWhatwgUrlIssues5491) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:.//p\",\n    \"base\": null,\n    \"href\": \"file:////p\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//p\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//p") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 600 - File URL tests for https://github.com/whatwg/url/issues/549 (2)
TYPED_TEST(URIWhatwgTest, FileUrlTestsForHttpsGithubComWhatwgUrlIssues5492) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file:/.//p\",\n    \"base\": null,\n    \"href\": \"file:////p\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//p\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file:/.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//p") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 601 - # IPv6 tests (1)
TYPED_TEST(URIWhatwgTest, Ipv6Tests1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[1:0::]\",\n    \"base\": \"http://example.net/\",\n    \"href\": "
      "\"http://[1::]/\",\n    \"origin\": \"http://[1::]\",\n    \"protocol\": \"http:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"[1::]\",\n    \"hostname\": "
      "\"[1::]\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[1:0::]", "http://example.net/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1::]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 602 - # IPv6 tests (2)
TYPED_TEST(URIWhatwgTest, Ipv6Tests2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[0:1:2:3:4:5:6:7:8]\",\n    \"base\": \"http://example.net/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[0:1:2:3:4:5:6:7:8]", "http://example.net/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 603 - # IPv6 tests (3)
TYPED_TEST(URIWhatwgTest, Ipv6Tests3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0::0::0]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0::0::0]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 604 - # IPv6 tests (4)
TYPED_TEST(URIWhatwgTest, Ipv6Tests4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:.0]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 605 - # IPv6 tests (5)
TYPED_TEST(URIWhatwgTest, Ipv6Tests5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:0:]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:0:]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 606 - # IPv6 tests (6)
TYPED_TEST(URIWhatwgTest, Ipv6Tests6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:1:2:3:4:5:6:7.0.0.0.1]\",\n    \"base\": null,\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1:2:3:4:5:6:7.0.0.0.1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 607 - # IPv6 tests (7)
TYPED_TEST(URIWhatwgTest, Ipv6Tests7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:1.00.0.0.0]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.00.0.0.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 608 - # IPv6 tests (8)
TYPED_TEST(URIWhatwgTest, Ipv6Tests8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:1.290.0.0.0]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.290.0.0.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 609 - # IPv6 tests (9)
TYPED_TEST(URIWhatwgTest, Ipv6Tests9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://[0:1.23.23]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.23.23]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 610 - # Empty host (1)
TYPED_TEST(URIWhatwgTest, EmptyHost1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://?\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://?");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 611 - # Empty host (2)
TYPED_TEST(URIWhatwgTest, EmptyHost2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://#\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://#");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 612 - Port overflow (2^32 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow232811) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:4294967377/c\",\n    \"base\": \"http://example.org/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:4294967377/c", "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 613 - Port overflow (2^64 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow264811) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:18446744073709551697/c\",\n    \"base\": \"http://example.org/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:18446744073709551697/c", "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 614 - Port overflow (2^128 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow2128811) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://f:340282366920938463463374607431768211537/c\",\n    \"base\": "
      "\"http://example.org/\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://f:340282366920938463463374607431768211537/c",
      "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 615 - # Non-special-URL path tests (1)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://ñ\",\n    \"base\": null,\n    \"href\": \"sc://%C3%B1\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": \"\",\n  "
      "  \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://ñ");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 616 - # Non-special-URL path tests (2)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://ñ?x\",\n    \"base\": null,\n    \"href\": \"sc://%C3%B1?x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"\",\n    \"search\": \"?x\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://ñ?x");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "x") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 617 - # Non-special-URL path tests (3)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://ñ#x\",\n    \"base\": null,\n    \"href\": \"sc://%C3%B1#x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"\",\n    \"search\": \"\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://ñ#x");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 618 - # Non-special-URL path tests (4)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#x\",\n    \"base\": \"sc://ñ\",\n    \"href\": \"sc://%C3%B1#x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"\",\n    \"search\": \"\",\n    \"hash\": \"#x\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "sc://ñ");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "x") << details;
}

// 619 - # Non-special-URL path tests (5)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?x\",\n    \"base\": \"sc://ñ\",\n    \"href\": \"sc://%C3%B1?x\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n "
      "   \"host\": \"%C3%B1\",\n    \"hostname\": \"%C3%B1\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"\",\n    \"search\": \"?x\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?x", "sc://ñ");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "x") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 620 - # Non-special-URL path tests (6)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://?\",\n    \"base\": null,\n    \"href\": \"sc://?\",\n    \"protocol\": "
      "\"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": "
      "\"\",\n    \"port\": \"\",\n    \"pathname\": \"\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://?");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 621 - # Non-special-URL path tests (7)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"sc://#\",\n    \"base\": null,\n    \"href\": \"sc://#\",\n    \"protocol\": "
      "\"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": "
      "\"\",\n    \"port\": \"\",\n    \"pathname\": \"\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("sc://#");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 622 - # Non-special-URL path tests (8)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///\",\n    \"base\": \"sc://x/\",\n    \"href\": \"sc:///\",\n    "
      "\"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 623 - # Non-special-URL path tests (9)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"////\",\n    \"base\": \"sc://x/\",\n    \"href\": \"sc:////\",\n    "
      "\"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("////", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 624 - # Non-special-URL path tests (10)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"////x/\",\n    \"base\": \"sc://x/\",\n    \"href\": \"sc:////x/\",\n    "
      "\"protocol\": \"sc:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//x/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("////x/", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "sc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//x/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 625 - # Non-special-URL path tests (11)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"tftp://foobar.com/someconfig;mode=netascii\",\n    \"base\": null,\n    "
      "\"href\": \"tftp://foobar.com/someconfig;mode=netascii\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"tftp:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"foobar.com\",\n    \"hostname\": \"foobar.com\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/someconfig;mode=netascii\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("tftp://foobar.com/someconfig;mode=netascii");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "tftp") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foobar.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/someconfig;mode=netascii") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 626 - # Non-special-URL path tests (12)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"telnet://user:pass@foobar.com:23/\",\n    \"base\": null,\n    \"href\": "
      "\"telnet://user:pass@foobar.com:23/\",\n    \"origin\": \"null\",\n    \"protocol\": \"telnet:\",\n   "
      " \"username\": \"user\",\n    \"password\": \"pass\",\n    \"host\": \"foobar.com:23\",\n    "
      "\"hostname\": \"foobar.com\",\n    \"port\": \"23\",\n    \"pathname\": \"/\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("telnet://user:pass@foobar.com:23/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "telnet") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "pass") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foobar.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "23") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 627 - # Non-special-URL path tests (13)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ut2004://10.10.10.10:7777/Index.ut2\",\n    \"base\": null,\n    \"href\": "
      "\"ut2004://10.10.10.10:7777/Index.ut2\",\n    \"origin\": \"null\",\n    \"protocol\": \"ut2004:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"10.10.10.10:7777\",\n    "
      "\"hostname\": \"10.10.10.10\",\n    \"port\": \"7777\",\n    \"pathname\": \"/Index.ut2\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("ut2004://10.10.10.10:7777/Index.ut2");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ut2004") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "10.10.10.10") << details;
    EXPECT_EQ(ctx.out.get_port(), "7777") << details;
    EXPECT_EQ(ctx.out.get_path(), "/Index.ut2") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 628 - # Non-special-URL path tests (14)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"redis://foo:bar@somehost:6379/0?baz=bam&qux=baz\",\n    \"base\": null,\n    "
      "\"href\": \"redis://foo:bar@somehost:6379/0?baz=bam&qux=baz\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"redis:\",\n    \"username\": \"foo\",\n    \"password\": \"bar\",\n    \"host\": "
      "\"somehost:6379\",\n    \"hostname\": \"somehost\",\n    \"port\": \"6379\",\n    \"pathname\": "
      "\"/0\",\n    \"search\": \"?baz=bam&qux=baz\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("redis://foo:bar@somehost:6379/0?baz=bam&qux=baz");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "redis") << details;
    EXPECT_EQ(ctx.out.get_username(), "foo") << details;
    EXPECT_EQ(ctx.out.get_password(), "bar") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "somehost") << details;
    EXPECT_EQ(ctx.out.get_port(), "6379") << details;
    EXPECT_EQ(ctx.out.get_path(), "/0") << details;
    EXPECT_EQ(ctx.out.get_queries(), "baz=bam&qux=baz") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 629 - # Non-special-URL path tests (15)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"rsync://foo@host:911/sup\",\n    \"base\": null,\n    \"href\": "
      "\"rsync://foo@host:911/sup\",\n    \"origin\": \"null\",\n    \"protocol\": \"rsync:\",\n    "
      "\"username\": \"foo\",\n    \"password\": \"\",\n    \"host\": \"host:911\",\n    \"hostname\": "
      "\"host\",\n    \"port\": \"911\",\n    \"pathname\": \"/sup\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("rsync://foo@host:911/sup");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "rsync") << details;
    EXPECT_EQ(ctx.out.get_username(), "foo") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "911") << details;
    EXPECT_EQ(ctx.out.get_path(), "/sup") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 630 - # Non-special-URL path tests (16)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"git://github.com/foo/bar.git\",\n    \"base\": null,\n    \"href\": "
      "\"git://github.com/foo/bar.git\",\n    \"origin\": \"null\",\n    \"protocol\": \"git:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"github.com\",\n    \"hostname\": "
      "\"github.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar.git\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("git://github.com/foo/bar.git");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "git") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "github.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar.git") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 631 - # Non-special-URL path tests (17)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"irc://myserver.com:6999/channel?passwd\",\n    \"base\": null,\n    \"href\": "
      "\"irc://myserver.com:6999/channel?passwd\",\n    \"origin\": \"null\",\n    \"protocol\": \"irc:\",\n "
      "   \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"myserver.com:6999\",\n    "
      "\"hostname\": \"myserver.com\",\n    \"port\": \"6999\",\n    \"pathname\": \"/channel\",\n    "
      "\"search\": \"?passwd\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("irc://myserver.com:6999/channel?passwd");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "irc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "myserver.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "6999") << details;
    EXPECT_EQ(ctx.out.get_path(), "/channel") << details;
    EXPECT_EQ(ctx.out.get_queries(), "passwd") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 632 - # Non-special-URL path tests (18)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"dns://fw.example.org:9999/foo.bar.org?type=TXT\",\n    \"base\": null,\n    "
      "\"href\": \"dns://fw.example.org:9999/foo.bar.org?type=TXT\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"dns:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"fw.example.org:9999\",\n    \"hostname\": \"fw.example.org\",\n    \"port\": \"9999\",\n    "
      "\"pathname\": \"/foo.bar.org\",\n    \"search\": \"?type=TXT\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("dns://fw.example.org:9999/foo.bar.org?type=TXT");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "dns") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "fw.example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "9999") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo.bar.org") << details;
    EXPECT_EQ(ctx.out.get_queries(), "type=TXT") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 633 - # Non-special-URL path tests (19)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"ldap://localhost:389/ou=People,o=JNDITutorial\",\n    \"base\": null,\n    "
      "\"href\": \"ldap://localhost:389/ou=People,o=JNDITutorial\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"ldap:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"localhost:389\",\n    \"hostname\": \"localhost\",\n    \"port\": \"389\",\n    \"pathname\": "
      "\"/ou=People,o=JNDITutorial\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("ldap://localhost:389/ou=People,o=JNDITutorial");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "ldap") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "localhost") << details;
    EXPECT_EQ(ctx.out.get_port(), "389") << details;
    EXPECT_EQ(ctx.out.get_path(), "/ou=People,o=JNDITutorial") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 634 - # Non-special-URL path tests (20)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"git+https://github.com/foo/bar\",\n    \"base\": null,\n    \"href\": "
      "\"git+https://github.com/foo/bar\",\n    \"origin\": \"null\",\n    \"protocol\": \"git+https:\",\n   "
      " \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"github.com\",\n    \"hostname\": "
      "\"github.com\",\n    \"port\": \"\",\n    \"pathname\": \"/foo/bar\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("git+https://github.com/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "git+https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "github.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 635 - # Non-special-URL path tests (21)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn:ietf:rfc:2648\",\n    \"base\": null,\n    \"href\": "
      "\"urn:ietf:rfc:2648\",\n    \"origin\": \"null\",\n    \"protocol\": \"urn:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"ietf:rfc:2648\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn:ietf:rfc:2648");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "urn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "ietf:rfc:2648") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 636 - # Non-special-URL path tests (22)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"tag:joe@example.org,2001:foo/bar\",\n    \"base\": null,\n    \"href\": "
      "\"tag:joe@example.org,2001:foo/bar\",\n    \"origin\": \"null\",\n    \"protocol\": \"tag:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"joe@example.org,2001:foo/bar\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("tag:joe@example.org,2001:foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "tag") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "joe@example.org,2001:foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 637 - Serialize /. in path (1)
TYPED_TEST(URIWhatwgTest, SerializeInPath1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/.//\",\n    \"base\": null,\n    \"href\": \"non-spec:/.//\",\n    "
      "\"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n "
      "   \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/.//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 638 - Serialize /. in path (2)
TYPED_TEST(URIWhatwgTest, SerializeInPath2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/..//\",\n    \"base\": null,\n    \"href\": \"non-spec:/.//\",\n    "
      "\"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n "
      "   \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/..//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 639 - Serialize /. in path (3)
TYPED_TEST(URIWhatwgTest, SerializeInPath3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/a/..//\",\n    \"base\": null,\n    \"href\": \"non-spec:/.//\",\n    "
      "\"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n "
      "   \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/a/..//");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 640 - Serialize /. in path (4)
TYPED_TEST(URIWhatwgTest, SerializeInPath4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/.//path\",\n    \"base\": null,\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/.//path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 641 - Serialize /. in path (5)
TYPED_TEST(URIWhatwgTest, SerializeInPath5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/..//path\",\n    \"base\": null,\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/..//path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 642 - Serialize /. in path (6)
TYPED_TEST(URIWhatwgTest, SerializeInPath6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/a/..//path\",\n    \"base\": null,\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/a/..//path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 643 - Serialize /. in path (7)
TYPED_TEST(URIWhatwgTest, SerializeInPath7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/.//path\",\n    \"base\": \"non-spec:/p\",\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/.//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 644 - Serialize /. in path (8)
TYPED_TEST(URIWhatwgTest, SerializeInPath8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/..//path\",\n    \"base\": \"non-spec:/p\",\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 645 - Serialize /. in path (9)
TYPED_TEST(URIWhatwgTest, SerializeInPath9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"..//path\",\n    \"base\": \"non-spec:/p\",\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 646 - Serialize /. in path (10)
TYPED_TEST(URIWhatwgTest, SerializeInPath10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a/..//path\",\n    \"base\": \"non-spec:/p\",\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("a/..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 647 - Serialize /. in path (11)
TYPED_TEST(URIWhatwgTest, SerializeInPath11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\",\n    \"base\": \"non-spec:/..//p\",\n    \"href\": \"non-spec:/.//p\",\n    "
      "\"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n "
      "   \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"//p\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("", "non-spec:/..//p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//p") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 648 - Serialize /. in path (12)
TYPED_TEST(URIWhatwgTest, SerializeInPath12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"path\",\n    \"base\": \"non-spec:/..//p\",\n    \"href\": "
      "\"non-spec:/.//path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"//path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("path", "non-spec:/..//p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "//path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 649 - Do not serialize /. in path (1)
TYPED_TEST(URIWhatwgTest, DoNotSerializeInPath1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"../path\",\n    \"base\": \"non-spec:/.//p\",\n    \"href\": "
      "\"non-spec:/path\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("../path", "non-spec:/.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 650 - # percent encoded hosts in non-special-URLs (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedHostsInNonSpecialUrls1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://%E2%80%A0/\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://%E2%80%A0/\",\n    \"protocol\": \"non-special:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"%E2%80%A0\",\n    \"hostname\": \"%E2%80%A0\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://%E2%80%A0/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "%E2%80%A0") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 651 - # percent encoded hosts in non-special-URLs (2)
TYPED_TEST(URIWhatwgTest, PercentEncodedHostsInNonSpecialUrls2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://H%4fSt/path\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://H%4fSt/path\",\n    \"protocol\": \"non-special:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"H%4fSt\",\n    \"hostname\": \"H%4fSt\",\n    \"port\": \"\",\n  "
      "  \"pathname\": \"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://H%4fSt/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "H%4fSt") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 652 - # IPv6 in non-special-URLs (1)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://[1:2:0:0:5:0:0:0]/\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://[1:2:0:0:5::]/\",\n    \"protocol\": \"non-special:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"[1:2:0:0:5::]\",\n    \"hostname\": \"[1:2:0:0:5::]\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2:0:0:5:0:0:0]/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2:0:0:5::]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 653 - # IPv6 in non-special-URLs (2)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://[1:2:0:0:0:0:0:3]/\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://[1:2::3]/\",\n    \"protocol\": \"non-special:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"[1:2::3]\",\n    \"hostname\": \"[1:2::3]\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2:0:0:0:0:0:3]/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2::3]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 654 - # IPv6 in non-special-URLs (3)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://[1:2::3]:80/\",\n    \"base\": null,\n    \"href\": "
      "\"non-special://[1:2::3]:80/\",\n    \"protocol\": \"non-special:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"[1:2::3]:80\",\n    \"hostname\": \"[1:2::3]\",\n    \"port\": "
      "\"80\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2::3]:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2::3]") << details;
    EXPECT_EQ(ctx.out.get_port(), "80") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 655 - # IPv6 in non-special-URLs (4)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special://[:80/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[:80/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 656 - # IPv6 in non-special-URLs (5)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:https://example.com:443/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:https://example.com:443/\",\n    \"origin\": \"https://example.com\",\n    \"protocol\": "
      "\"blob:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": "
      "\"\",\n    \"port\": \"\",\n    \"pathname\": \"https://example.com:443/\",\n    \"search\": \"\",\n  "
      "  \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:https://example.com:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "https://example.com:443/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 657 - # IPv6 in non-special-URLs (6)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:http://example.org:88/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:http://example.org:88/\",\n    \"origin\": \"http://example.org:88\",\n    \"protocol\": "
      "\"blob:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": "
      "\"\",\n    \"port\": \"\",\n    \"pathname\": \"http://example.org:88/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:http://example.org:88/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "http://example.org:88/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 658 - # IPv6 in non-special-URLs (7)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:d3958f5c-0777-0845-9dcf-2cb28783acaf\",\n    \"base\": null,\n    "
      "\"href\": \"blob:d3958f5c-0777-0845-9dcf-2cb28783acaf\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"blob:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"d3958f5c-0777-0845-9dcf-2cb28783acaf\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:d3958f5c-0777-0845-9dcf-2cb28783acaf");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "d3958f5c-0777-0845-9dcf-2cb28783acaf") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 659 - # IPv6 in non-special-URLs (8)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:\",\n    \"base\": null,\n    \"href\": \"blob:\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"blob:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 660 - blob: in blob: (1)
TYPED_TEST(URIWhatwgTest, BlobInBlob1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:blob:\",\n    \"base\": null,\n    \"href\": \"blob:blob:\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"blob:\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:blob:");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "blob:") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 661 - blob: in blob: (2)
TYPED_TEST(URIWhatwgTest, BlobInBlob2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:blob:https://example.org/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:blob:https://example.org/\",\n    \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"blob:https://example.org/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:blob:https://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "blob:https://example.org/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 662 - Non-http(s): in blob: (1)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:about:blank\",\n    \"base\": null,\n    \"href\": \"blob:about:blank\",\n "
      "   \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"about:blank\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "about:blank") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 663 - Non-http(s): in blob: (2)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:file://host/path\",\n    \"base\": null,\n    \"href\": "
      "\"blob:file://host/path\",\n    \"protocol\": \"blob:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"file://host/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:file://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "file://host/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 664 - Non-http(s): in blob: (3)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:ftp://host/path\",\n    \"base\": null,\n    \"href\": "
      "\"blob:ftp://host/path\",\n    \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"ftp://host/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:ftp://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "ftp://host/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 665 - Non-http(s): in blob: (4)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:ws://example.org/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:ws://example.org/\",\n    \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"ws://example.org/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:ws://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "ws://example.org/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 666 - Non-http(s): in blob: (5)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:wss://example.org/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:wss://example.org/\",\n    \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"wss://example.org/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:wss://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "wss://example.org/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 667 - Percent-encoded http: in blob: (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedHttpInBlob1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"blob:http%3a//example.org/\",\n    \"base\": null,\n    \"href\": "
      "\"blob:http%3a//example.org/\",\n    \"origin\": \"null\",\n    \"protocol\": \"blob:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"http%3a//example.org/\",\n    \"search\": \"\",\n    \"hash\": "
      "\"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("blob:http%3a//example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "blob") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "http%3a//example.org/") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "http://example.org/") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 668 - Invalid IPv4 radix digits (1)
TYPED_TEST(URIWhatwgTest, InvalidIpv4RadixDigits1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0x7f.0.0.0x7g\",\n    \"base\": null,\n    \"href\": "
      "\"http://0x7f.0.0.0x7g/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"0x7f.0.0.0x7g\",\n    \"hostname\": \"0x7f.0.0.0x7g\",\n    \"port\": \"\",\n  "
      "  \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x7f.0.0.0x7g");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "0x7f.0.0.0x7g") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 669 - Invalid IPv4 radix digits (2)
TYPED_TEST(URIWhatwgTest, InvalidIpv4RadixDigits2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0X7F.0.0.0X7G\",\n    \"base\": null,\n    \"href\": "
      "\"http://0x7f.0.0.0x7g/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"0x7f.0.0.0x7g\",\n    \"hostname\": \"0x7f.0.0.0x7g\",\n    \"port\": \"\",\n  "
      "  \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0X7F.0.0.0X7G");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "0x7f.0.0.0x7g") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 670 - Invalid IPv4 portion of IPv6 address (1)
TYPED_TEST(URIWhatwgTest, InvalidIpv4PortionOfIpv6Address1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[::127.0.0.0.1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::127.0.0.0.1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 671 - Uncompressed IPv6 addresses with 0 (1)
TYPED_TEST(URIWhatwgTest, UncompressedIpv6AddressesWith01) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[0:1:0:1:0:1:0:1]\",\n    \"base\": null,\n    \"href\": "
      "\"http://[0:1:0:1:0:1:0:1]/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"[0:1:0:1:0:1:0:1]\",\n    \"hostname\": \"[0:1:0:1:0:1:0:1]\",\n "
      "   \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[0:1:0:1:0:1:0:1]");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[0:1:0:1:0:1:0:1]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 672 - Uncompressed IPv6 addresses with 0 (2)
TYPED_TEST(URIWhatwgTest, UncompressedIpv6AddressesWith02) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://[1:0:1:0:1:0:1:0]\",\n    \"base\": null,\n    \"href\": "
      "\"http://[1:0:1:0:1:0:1:0]/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"[1:0:1:0:1:0:1:0]\",\n    \"hostname\": \"[1:0:1:0:1:0:1:0]\",\n "
      "   \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://[1:0:1:0:1:0:1:0]");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "[1:0:1:0:1:0:1:0]") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 673 - Percent-encoded query and fragment (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?\\\"\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%22\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%22\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?\"");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%22") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "\"") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 674 - Percent-encoded query and fragment (2)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?#\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?#\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?#");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 675 - Percent-encoded query and fragment (3)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?<\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%3C\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%3C\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?<");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%3C") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "<") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 676 - Percent-encoded query and fragment (4)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?>\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%3E\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%3E\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?>");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%3E") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), ">") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 677 - Percent-encoded query and fragment (5)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?⌣\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%E2%8C%A3\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%E2%8C%A3\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?⌣");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%E2%8C%A3") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "⌣") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 678 - Percent-encoded query and fragment (6)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?%23%23\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%23%23\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%23%23\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?%23%23");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%23%23") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "##") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 679 - Percent-encoded query and fragment (7)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?%GH\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?%GH\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?%GH\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?%GH");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%GH") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 680 - Percent-encoded query and fragment (8)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?a#%EF\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?a#%EF\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?a\",\n    \"hash\": \"#%EF\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#%EF");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%EF") << details;
}

// 681 - Percent-encoded query and fragment (9)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?a#%GH\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?a#%GH\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?a\",\n    \"hash\": \"#%GH\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#%GH");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%GH") << details;
}

// 682 - URLs that require a non-about:blank base. (Also serve as invalid base tests.) (1)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("a");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 683 - URLs that require a non-about:blank base. (Also serve as invalid base tests.) (2)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a/\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("a/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 684 - URLs that require a non-about:blank base. (Also serve as invalid base tests.) (3)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a//\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("a//");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 685 - Bases that don't fail to parse but fail to be bases (1)
TYPED_TEST(URIWhatwgTest, BasesThatDonTFailToParseButFailToBeBases1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon.html\",\n    \"base\": \"a:\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon.html", "a:");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 686 - Bases that don't fail to parse but fail to be bases (2)
TYPED_TEST(URIWhatwgTest, BasesThatDonTFailToParseButFailToBeBases2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon-b.html\",\n    \"base\": \"a:b\",\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-b.html", "a:b");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 687 - Other base URL tests, that must succeed (1)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon-slash.html\",\n    \"base\": \"a:/\",\n    \"href\": "
      "\"a:/test-a-colon-slash.html\",\n    \"protocol\": \"a:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/test-a-colon-slash.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash.html", "a:/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test-a-colon-slash.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 688 - Other base URL tests, that must succeed (2)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon-slash-slash.html\",\n    \"base\": \"a://\",\n    \"href\": "
      "\"a:///test-a-colon-slash-slash.html\",\n    \"protocol\": \"a:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/test-a-colon-slash-slash.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-slash.html", "a://");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test-a-colon-slash-slash.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 689 - Other base URL tests, that must succeed (3)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon-slash-b.html\",\n    \"base\": \"a:/b\",\n    \"href\": "
      "\"a:/test-a-colon-slash-b.html\",\n    \"protocol\": \"a:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/test-a-colon-slash-b.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-b.html", "a:/b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test-a-colon-slash-b.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 690 - Other base URL tests, that must succeed (4)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"test-a-colon-slash-slash-b.html\",\n    \"base\": \"a://b\",\n    \"href\": "
      "\"a://b/test-a-colon-slash-slash-b.html\",\n    \"protocol\": \"a:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"b\",\n    \"hostname\": \"b\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/test-a-colon-slash-slash-b.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-slash-b.html", "a://b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "b") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test-a-colon-slash-slash-b.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 691 - Null code point in fragment (1)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://example.org/test?a#b\\u0000c\",\n    \"base\": null,\n    \"href\": "
      "\"http://example.org/test?a#b%00c\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?a\",\n    \"hash\": \"#b%00c\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#b\0c");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c") << details;
}

// 692 - Null code point in fragment (2)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec://example.org/test?a#b\\u0000c\",\n    \"base\": null,\n    \"href\": "
      "\"non-spec://example.org/test?a#b%00c\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n "
      "   \"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"?a\",\n    \"hash\": \"#b%00c\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec://example.org/test?a#b\0c");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c") << details;
}

// 693 - Null code point in fragment (3)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-spec:/test?a#b\\u0000c\",\n    \"base\": null,\n    \"href\": "
      "\"non-spec:/test?a#b%00c\",\n    \"protocol\": \"non-spec:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/test\",\n    \"search\": \"?a\",\n    \"hash\": \"#b%00c\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/test?a#b\0c");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "a") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c") << details;
}

// 694 - First scheme char - not allowed: https://github.com/whatwg/url/issues/464 (1)
TYPED_TEST(URIWhatwgTest, FirstSchemeCharNotAllowedHttpsGithubComWhatwgUrlIssues4641) {
    static constexpr auto details =
      "\n{\n    \"input\": \"10.0.0.7:8080/foo.html\",\n    \"base\": \"file:///some/dir/bar.html\",\n    "
      "\"href\": \"file:///some/dir/10.0.0.7:8080/foo.html\",\n    \"protocol\": \"file:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/some/dir/10.0.0.7:8080/foo.html\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("10.0.0.7:8080/foo.html", "file:///some/dir/bar.html");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/some/dir/10.0.0.7:8080/foo.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 695 - Subsequent scheme chars - not allowed (1)
TYPED_TEST(URIWhatwgTest, SubsequentSchemeCharsNotAllowed1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a!@$*=/foo.html\",\n    \"base\": \"file:///some/dir/bar.html\",\n    \"href\": "
      "\"file:///some/dir/a!@$*=/foo.html\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/some/dir/a!@$*=/foo.html\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("a!@$*=/foo.html", "file:///some/dir/bar.html");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/some/dir/a!@$*=/foo.html") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 696 - First and subsequent scheme chars - allowed (1)
TYPED_TEST(URIWhatwgTest, FirstAndSubsequentSchemeCharsAllowed1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"a1234567890-+.:foo/bar\",\n    \"base\": \"http://example.com/dir/file\",\n    "
      "\"href\": \"a1234567890-+.:foo/bar\",\n    \"protocol\": \"a1234567890-+.:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n   "
      " \"pathname\": \"foo/bar\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("a1234567890-+.:foo/bar", "http://example.com/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "a1234567890-+.") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "foo/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 697 - IDNA ignored code points in file URLs hosts (1)
TYPED_TEST(URIWhatwgTest, IdnaIgnoredCodePointsInFileUrlsHosts1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://a­b/p\",\n    \"base\": null,\n    \"href\": \"file://ab/p\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"ab\",\n   "
      " \"hostname\": \"ab\",\n    \"port\": \"\",\n    \"pathname\": \"/p\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://a­b/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ab") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/p") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 698 - IDNA ignored code points in file URLs hosts (2)
TYPED_TEST(URIWhatwgTest, IdnaIgnoredCodePointsInFileUrlsHosts2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://a%C2%ADb/p\",\n    \"base\": null,\n    \"href\": \"file://ab/p\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"ab\",\n   "
      " \"hostname\": \"ab\",\n    \"port\": \"\",\n    \"pathname\": \"/p\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://a%C2%ADb/p");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ab") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/p") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 699 - IDNA hostnames which get mapped to 'localhost' (1)
TYPED_TEST(URIWhatwgTest, IdnaHostnamesWhichGetMappedToLocalhost1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin\",\n    \"base\": null,\n    \"href\": "
      "\"file:///usr/bin\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/usr/bin\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/usr/bin") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 700 - Empty host after the domain to ASCII (1)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://­/p\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://­/p");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 701 - Empty host after the domain to ASCII (2)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://%C2%AD/p\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://%C2%AD/p");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 702 - Empty host after the domain to ASCII (3)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"file://xn--/p\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("file://xn--/p");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 703 - https://bugzilla.mozilla.org/show_bug.cgi?id=1647058 (1)
TYPED_TEST(URIWhatwgTest, HttpsBugzillaMozillaOrgShowBugCgiId16470581) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#link\",\n    \"base\": \"https://example.org/##link\",\n    \"href\": "
      "\"https://example.org/#link\",\n    \"protocol\": \"https:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"#link\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#link", "https://example.org/##link");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "link") << details;
}

// 704 - UTF-8 percent-encode of C0 control percent-encode set and supersets (1)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:cannot-be-a-base-url-\\u0000\\u0001\\u001f\\u001e~\",\n    "
      "\"base\": null,\n    \"hash\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": "
      "\"non-special:cannot-be-a-base-url-%00%01%1F%1E~%7F%C2%80\",\n    \"origin\": \"null\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"cannot-be-a-base-url-%00%01%1F%1E~%7F%C2%80\",\n    "
      "\"port\": \"\",\n    \"protocol\": \"non-special:\",\n    \"search\": \"\",\n    \"username\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("non-special:cannot-be-a-base-url-\0~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "cannot-be-a-base-url-%00%01%1F%1E~%7F%C2%80") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "cannot-be-a-base-url-\0~") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 705 - UTF-8 percent-encode of C0 control percent-encode set and supersets (2)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://www.example.com/path{path.html?query'=query#fragment<fragment\",\n   "
      " \"base\": null,\n    \"hash\": \"#fragment%3C%7Ffragment\",\n    \"host\": \"www.example.com\",\n    "
      "\"hostname\": \"www.example.com\",\n    \"href\": "
      "\"https://www.example.com/path%7B%7Fpath.html?query%27%7F=query#fragment%3C%7Ffragment\",\n    "
      "\"origin\": \"https://www.example.com\",\n    \"password\": \"\",\n    \"pathname\": "
      "\"/path%7B%7Fpath.html\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": "
      "\"?query%27%7F=query\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>(
      "https://www.example.com/path{path.html?query'=query#fragment<fragment");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/path%7B%7Fpath.html") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/path{path.html") << details;
    }
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "query%27%7F=query") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "query'=query") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "fragment%3C%7Ffragment") << details;
}

// 706 - UTF-8 percent-encode of C0 control percent-encode set and supersets (3)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://user:pass[@foo/bar\",\n    \"base\": \"http://example.org\",\n    "
      "\"hash\": \"\",\n    \"host\": \"foo\",\n    \"hostname\": \"foo\",\n    \"href\": "
      "\"https://user:pass%5B%7F@foo/bar\",\n    \"origin\": \"https://foo\",\n    \"password\": "
      "\"pass%5B%7F\",\n    \"pathname\": \"/bar\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    "
      "\"search\": \"\",\n    \"username\": \"user\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://user:pass[@foo/bar", "http://example.org");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "user") << details;
    EXPECT_EQ(ctx.out.get_password(), "pass%5B%7F") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/bar") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 707 - Tests for the distinct percent-encode sets (1)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo:// !\\\"$%&'()*+,-.;<=>@[\\\\]^_`{|}~@host/\",\n    \"base\": null,\n    "
      "\"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"foo://%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~@host/\",\n    \"origin\": "
      "\"null\",\n    \"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": "
      "\"foo:\",\n    \"search\": \"\",\n    \"username\": "
      "\"%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:// !\"$%&'()*+,-.;<=>@[\\]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~")
      << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 708 - Tests for the distinct percent-encode sets (2)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss:// !\\\"$%&'()*+,-.;<=>@[]^_`{|}~@host/\",\n    \"base\": null,\n    "
      "\"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"wss://%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/\",\n    \"origin\": "
      "\"wss://host\",\n    \"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    "
      "\"protocol\": \"wss:\",\n    \"search\": \"\",\n    \"username\": "
      "\"%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss:// !\"$%&'()*+,-.;<=>@[]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 709 - Tests for the distinct percent-encode sets (3)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://joe: !\\\"$%&'()*+,-.:;<=>@[\\\\]^_`{|}~@host/\",\n    \"base\": null,\n  "
      "  \"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"foo://joe:%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~@host/\",\n    \"origin\": "
      "\"null\",\n    \"password\": \"%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    "
      "\"username\": \"joe\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://joe: !\"$%&'()*+,-.:;<=>@[\\]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "joe") << details;
    EXPECT_EQ(ctx.out.get_password(), "%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~")
      << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 710 - Tests for the distinct percent-encode sets (4)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://joe: !\\\"$%&'()*+,-.:;<=>@[]^_`{|}~@host/\",\n    \"base\": null,\n    "
      "\"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"wss://joe:%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/\",\n    \"origin\": "
      "\"wss://host\",\n    \"password\": \"%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~\",\n "
      "   \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"wss:\",\n    \"search\": \"\",\n    "
      "\"username\": \"joe\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://joe: !\"$%&'()*+,-.:;<=>@[]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "joe") << details;
    EXPECT_EQ(ctx.out.get_password(), "%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~")
      << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 711 - Tests for the distinct percent-encode sets (5)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://!\\\"$%&'()*+,-.;=_`{}~/\",\n    \"base\": null,\n    \"hash\": \"\",\n   "
      " \"host\": \"!\\\"$%&'()*+,-.;=_`{}~\",\n    \"hostname\": \"!\\\"$%&'()*+,-.;=_`{}~\",\n    "
      "\"href\": \"foo://!\\\"$%&'()*+,-.;=_`{}~/\",\n    \"origin\": \"null\",\n    \"password\": \"\",\n   "
      " \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    "
      "\"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("foo://!\"$%&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$%&'()*+,-.;=_`{}~") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 712 - Tests for the distinct percent-encode sets (6)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://!\\\"$&'()*+,-.;=_`{}~/\",\n    \"base\": null,\n    \"hash\": \"\",\n    "
      "\"host\": \"!\\\"$&'()*+,-.;=_`{}~\",\n    \"hostname\": \"!\\\"$&'()*+,-.;=_`{}~\",\n    \"href\": "
      "\"wss://!\\\"$&'()*+,-.;=_`{}~/\",\n    \"origin\": \"wss://!\\\"$&'()*+,-.;=_`{}~\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"wss:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("wss://!\"$&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$&'()*+,-.;=_`{}~") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 713 - Tests for the distinct percent-encode sets (7)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://host/ !\\\"$%&'()*+,-./:;<=>@[\\\\]^_`{|}~\",\n    \"base\": null,\n    "
      "\"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"foo://host/%20!%22$%&'()*+,-./:;%3C=%3E@[\\\\]^_%60%7B|%7D~\",\n    \"origin\": \"null\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/%20!%22$%&'()*+,-./:;%3C=%3E@[\\\\]^_%60%7B|%7D~\",\n    "
      "\"port\": \"\",\n    \"protocol\": \"foo:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/ !\"$%&'()*+,-./:;<=>@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%20!%22$%&'()*+,-./:;%3C=%3E@[\\]^_%60%7B|%7D~") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 714 - Tests for the distinct percent-encode sets (8)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://host/ !\\\"$%&'()*+,-./:;<=>@[\\\\]^_`{|}~\",\n    \"base\": null,\n    "
      "\"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"wss://host/%20!%22$%&'()*+,-./:;%3C=%3E@[/]^_%60%7B|%7D~\",\n    \"origin\": \"wss://host\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/%20!%22$%&'()*+,-./:;%3C=%3E@[/]^_%60%7B|%7D~\",\n    "
      "\"port\": \"\",\n    \"protocol\": \"wss:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/ !\"$%&'()*+,-./:;<=>@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%20!%22$%&'()*+,-./:;%3C=%3E@[/]^_%60%7B|%7D~") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 715 - Tests for the distinct percent-encode sets (9)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://host/dir/? !\\\"$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\",\n    \"base\": "
      "null,\n    \"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"foo://host/dir/?%20!%22$%&'()*+,-./:;%3C=%3E?@[\\\\]^_`{|}~\",\n    \"origin\": \"null\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/dir/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n "
      "   \"search\": \"?%20!%22$%&'()*+,-./:;%3C=%3E?@[\\\\]^_`{|}~\",\n    \"username\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/dir/? !\"$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%20!%22$%&'()*+,-./:;%3C=%3E?@[\\]^_`{|}~") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 716 - Tests for the distinct percent-encode sets (10)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://host/dir/? !\\\"$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\",\n    \"base\": "
      "null,\n    \"hash\": \"\",\n    \"host\": \"host\",\n    \"hostname\": \"host\",\n    \"href\": "
      "\"wss://host/dir/?%20!%22$%&%27()*+,-./:;%3C=%3E?@[\\\\]^_`{|}~\",\n    \"origin\": \"wss://host\",\n "
      "   \"password\": \"\",\n    \"pathname\": \"/dir/\",\n    \"port\": \"\",\n    \"protocol\": "
      "\"wss:\",\n    \"search\": \"?%20!%22$%&%27()*+,-./:;%3C=%3E?@[\\\\]^_`{|}~\",\n    \"username\": "
      "\"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/dir/? !\"$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%20!%22$%&%27()*+,-./:;%3C=%3E?@[\\]^_`{|}~") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 717 - Tests for the distinct percent-encode sets (11)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"foo://host/dir/# !\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\",\n    \"base\": "
      "null,\n    \"hash\": \"#%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\\\]^_%60{|}~\",\n    \"host\": \"host\",\n  "
      "  \"hostname\": \"host\",\n    \"href\": "
      "\"foo://host/dir/#%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\\\]^_%60{|}~\",\n    \"origin\": \"null\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/dir/\",\n    \"port\": \"\",\n    \"protocol\": \"foo:\",\n "
      "   \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/dir/# !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "foo") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\]^_%60{|}~") << details;
}

// 718 - Tests for the distinct percent-encode sets (12)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"wss://host/dir/# !\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\",\n    \"base\": "
      "null,\n    \"hash\": \"#%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\\\]^_%60{|}~\",\n    \"host\": \"host\",\n  "
      "  \"hostname\": \"host\",\n    \"href\": "
      "\"wss://host/dir/#%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\\\]^_%60{|}~\",\n    \"origin\": "
      "\"wss://host\",\n    \"password\": \"\",\n    \"pathname\": \"/dir/\",\n    \"port\": \"\",\n    "
      "\"protocol\": \"wss:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/dir/# !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "wss") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "host") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/dir/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\]^_%60{|}~") << details;
}

// 719 - Ensure that input schemes are not ignored when resolving non-special URLs (1)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"abc:rootless\",\n    \"base\": \"abc://host/path\",\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"abc:rootless\",\n    \"password\": \"\",\n  "
      "  \"pathname\": \"rootless\",\n    \"port\": \"\",\n    \"protocol\": \"abc:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "abc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "rootless") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 720 - Ensure that input schemes are not ignored when resolving non-special URLs (2)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"abc:rootless\",\n    \"base\": \"abc:/path\",\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"abc:rootless\",\n    \"password\": \"\",\n  "
      "  \"pathname\": \"rootless\",\n    \"port\": \"\",\n    \"protocol\": \"abc:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc:/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "abc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "rootless") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 721 - Ensure that input schemes are not ignored when resolving non-special URLs (3)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"abc:rootless\",\n    \"base\": \"abc:path\",\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"abc:rootless\",\n    \"password\": \"\",\n  "
      "  \"pathname\": \"rootless\",\n    \"port\": \"\",\n    \"protocol\": \"abc:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc:path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "abc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "rootless") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 722 - Ensure that input schemes are not ignored when resolving non-special URLs (4)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"abc:/rooted\",\n    \"base\": \"abc://host/path\",\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"abc:/rooted\",\n    \"password\": \"\",\n   "
      " \"pathname\": \"/rooted\",\n    \"port\": \"\",\n    \"protocol\": \"abc:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("abc:/rooted", "abc://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "abc") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/rooted") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 723 - Empty query and fragment with blank should throw an error (1)
TYPED_TEST(URIWhatwgTest, EmptyQueryAndFragmentWithBlankShouldThrowAnError1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"#\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"any-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("#");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 724 - Empty query and fragment with blank should throw an error (2)
TYPED_TEST(URIWhatwgTest, EmptyQueryAndFragmentWithBlankShouldThrowAnError2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"?\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("?");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 725 - Last component looks like a number, but not valid IPv4 (1)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv41) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.4.5\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4.5", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 726 - Last component looks like a number, but not valid IPv4 (2)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv42) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.4.5.\",\n    \"base\": \"http://other.com/\",\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4.5.", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 727 - Last component looks like a number, but not valid IPv4 (3)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv43) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0..0x300/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0..0x300/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 728 - Last component looks like a number, but not valid IPv4 (4)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv44) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0..0x300./\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0..0x300./");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 729 - Last component looks like a number, but not valid IPv4 (5)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv45) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://256.256.256.256.256\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256.256", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 730 - Last component looks like a number, but not valid IPv4 (6)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv46) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://256.256.256.256.256.\",\n    \"base\": \"http://other.com/\",\n    "
      "\"failure\": true\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256.256.", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 731 - Last component looks like a number, but not valid IPv4 (7)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv47) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.08\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.08");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 732 - Last component looks like a number, but not valid IPv4 (8)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv48) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.08.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.08.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 733 - Last component looks like a number, but not valid IPv4 (9)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv49) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://1.2.3.09\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.09");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 734 - Last component looks like a number, but not valid IPv4 (10)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv410) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://09.2.3.4\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://09.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 735 - Last component looks like a number, but not valid IPv4 (11)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv411) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://09.2.3.4.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://09.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 736 - Last component looks like a number, but not valid IPv4 (12)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv412) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://01.2.3.4.5\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://01.2.3.4.5");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 737 - Last component looks like a number, but not valid IPv4 (13)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv413) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://01.2.3.4.5.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://01.2.3.4.5.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 738 - Last component looks like a number, but not valid IPv4 (14)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv414) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0x100.2.3.4\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x100.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 739 - Last component looks like a number, but not valid IPv4 (15)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv415) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0x100.2.3.4.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x100.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 740 - Last component looks like a number, but not valid IPv4 (16)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv416) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0x1.2.3.4.5\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x1.2.3.4.5");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 741 - Last component looks like a number, but not valid IPv4 (17)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv417) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0x1.2.3.4.5.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x1.2.3.4.5.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 742 - Last component looks like a number, but not valid IPv4 (18)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv418) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.1.2.3.4\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.1.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 743 - Last component looks like a number, but not valid IPv4 (19)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv419) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.1.2.3.4.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.1.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 744 - Last component looks like a number, but not valid IPv4 (20)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv420) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.2.3.4\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 745 - Last component looks like a number, but not valid IPv4 (21)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv421) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.2.3.4.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 746 - Last component looks like a number, but not valid IPv4 (22)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv422) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.09\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 747 - Last component looks like a number, but not valid IPv4 (23)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv423) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.09.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 748 - Last component looks like a number, but not valid IPv4 (24)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv424) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.0x4\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x4");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 749 - Last component looks like a number, but not valid IPv4 (25)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv425) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.0x4.\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x4.");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 750 - Last component looks like a number, but not valid IPv4 (26)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv426) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.09..\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"foo.09..\",\n    \"hostname\": \"foo.09..\",\n    \"href\": \"http://foo.09../\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"http:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09..");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "foo.09..") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 751 - Last component looks like a number, but not valid IPv4 (27)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv427) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://0999999999999999999/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://0999999999999999999/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 752 - Last component looks like a number, but not valid IPv4 (28)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv428) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.0x\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 753 - Last component looks like a number, but not valid IPv4 (29)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv429) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://foo.0XFfFfFfFfFfFfFfFfFfAcE123\",\n    \"base\": null,\n    \"failure\": "
      "true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0XFfFfFfFfFfFfFfFfFfAcE123");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 754 - Last component looks like a number, but not valid IPv4 (30)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv430) {
    static constexpr auto details =
      "\n{\n    \"input\": \"http://💩.123/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("http://💩.123/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 755 - U+0000 and U+FFFF in various places (1)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://\\u0000y\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://\0y");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 756 - U+0000 and U+FFFF in various places (2)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/\\u0000y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/%00y\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/%00y\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": \"\",\n "
      "   \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%00y") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/\0y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 757 - U+0000 and U+FFFF in various places (3)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/?\\u0000y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/?%00y\",\n    \"password\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": "
      "\"?%00y\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%00y") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "\0y") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 758 - U+0000 and U+FFFF in various places (4)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/?#\\u0000y\",\n    \"base\": null,\n    \"hash\": \"#%00y\",\n    "
      "\"host\": \"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/?#%00y\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?#\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%00y") << details;
}

// 759 - U+0000 and U+FFFF in various places (5)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://￿y\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://￿y");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 760 - U+0000 and U+FFFF in various places (6)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/￿y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/%EF%BF%BFy\",\n    \"password\": \"\",\n  "
      "  \"pathname\": \"/%EF%BF%BFy\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": "
      "\"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%EF%BF%BFy") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/￿y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 761 - U+0000 and U+FFFF in various places (7)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/?￿y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/?%EF%BF%BFy\",\n    \"password\": \"\",\n "
      "   \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    \"search\": "
      "\"?%EF%BF%BFy\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BFy") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "￿y") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 762 - U+0000 and U+FFFF in various places (8)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://x/?#￿y\",\n    \"base\": null,\n    \"hash\": \"#%EF%BF%BFy\",\n    "
      "\"host\": \"x\",\n    \"hostname\": \"x\",\n    \"href\": \"https://x/?#%EF%BF%BFy\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n   "
      " \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?#￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BFy") << details;
}

// 763 - U+0000 and U+FFFF in various places (9)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:\\u0000y\",\n    \"base\": null,\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:%00y\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"%00y\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "%00y") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "\0y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 764 - U+0000 and U+FFFF in various places (10)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/\\u0000y\",\n    \"base\": null,\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/%00y\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"x/%00y\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "x/%00y") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "x/\0y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 765 - U+0000 and U+FFFF in various places (11)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/?\\u0000y\",\n    \"base\": null,\n    \"hash\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/?%00y\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"x/\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"?%00y\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%00y") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "\0y") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 766 - U+0000 and U+FFFF in various places (12)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/?#\\u0000y\",\n    \"base\": null,\n    \"hash\": \"#%00y\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/?#%00y\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"x/\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?#\0y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%00y") << details;
}

// 767 - U+0000 and U+FFFF in various places (13)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:￿y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:%EF%BF%BFy\",\n    \"password\": \"\",\n  "
      "  \"pathname\": \"%EF%BF%BFy\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "%EF%BF%BFy") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "￿y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 768 - U+0000 and U+FFFF in various places (14)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/￿y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/%EF%BF%BFy\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"x/%EF%BF%BFy\",\n    \"port\": \"\",\n    \"protocol\": "
      "\"non-special:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "x/%EF%BF%BFy") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "x/￿y") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 769 - U+0000 and U+FFFF in various places (15)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/?￿y\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/?%EF%BF%BFy\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"x/\",\n    \"port\": \"\",\n    \"protocol\": \"non-special:\",\n    "
      "\"search\": \"?%EF%BF%BFy\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x/") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BFy") << details;
    } else {
        EXPECT_EQ(ctx.out.get_queries(), "￿y") << details;
    }
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 770 - U+0000 and U+FFFF in various places (16)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"non-special:x/?#￿y\",\n    \"base\": null,\n    \"hash\": \"#%EF%BF%BFy\",\n  "
      "  \"host\": \"\",\n    \"hostname\": \"\",\n    \"href\": \"non-special:x/?#%EF%BF%BFy\",\n    "
      "\"password\": \"\",\n    \"pathname\": \"x/\",\n    \"port\": \"\",\n    \"protocol\": "
      "\"non-special:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?#￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "non-special") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "x/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BFy") << details;
}

// 771 - U+0000 and U+FFFF in various places (17)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"\",\n    \"base\": null,\n    \"failure\": true,\n    \"relativeTo\": "
      "\"non-opaque-path-base\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 772 - U+0000 and U+FFFF in various places (18)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://example.com/\\\"quoted\\\"\",\n    \"base\": null,\n    \"hash\": "
      "\"\",\n    \"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    \"href\": "
      "\"https://example.com/%22quoted%22\",\n    \"origin\": \"https://example.com\",\n    \"password\": "
      "\"\",\n    \"pathname\": \"/%22quoted%22\",\n    \"port\": \"\",\n    \"protocol\": \"https:\",\n    "
      "\"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com/\"quoted\"");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    if constexpr (TypeParam::is_modifiable) {
        EXPECT_EQ(ctx.out.get_path(), "/%22quoted%22") << details;
    } else {
        EXPECT_EQ(ctx.out.get_path(), "/\"quoted\"") << details;
    }
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 773 - U+0000 and U+FFFF in various places (19)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://a%C2%ADb/\",\n    \"base\": null,\n    \"hash\": \"\",\n    \"host\": "
      "\"ab\",\n    \"hostname\": \"ab\",\n    \"href\": \"https://ab/\",\n    \"origin\": \"https://ab\",\n "
      "   \"password\": \"\",\n    \"pathname\": \"/\",\n    \"port\": \"\",\n    \"protocol\": "
      "\"https:\",\n    \"search\": \"\",\n    \"username\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://a%C2%ADb/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "https") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "ab") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 774 - U+0000 and U+FFFF in various places (20)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces20) {
    static constexpr auto details =
      "\n{\n    \"comment\": \"Empty host after domain to ASCII\",\n    \"input\": \"https://­/\",\n    "
      "\"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://­/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 775 - U+0000 and U+FFFF in various places (21)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://%C2%AD/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://%C2%AD/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 776 - U+0000 and U+FFFF in various places (22)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"https://xn--/\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("https://xn--/");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 777 - Non-special schemes that some implementations might incorrectly treat as special (1)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"data://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("data://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 778 - Non-special schemes that some implementations might incorrectly treat as special (2)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data:///test\",\n    \"base\": null,\n    \"href\": \"data:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 779 - Non-special schemes that some implementations might incorrectly treat as special (3)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data://test/a/../b\",\n    \"base\": null,\n    \"href\": \"data://test/b\",\n  "
      "  \"origin\": \"null\",\n    \"protocol\": \"data:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "data") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 780 - Non-special schemes that some implementations might incorrectly treat as special (4)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 781 - Non-special schemes that some implementations might incorrectly treat as special (5)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 782 - Non-special schemes that some implementations might incorrectly treat as special (6)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"data://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("data://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 783 - Non-special schemes that some implementations might incorrectly treat as special (7)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"javascript://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"javascript:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 784 - Non-special schemes that some implementations might incorrectly treat as special (8)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript:///test\",\n    \"base\": null,\n    \"href\": "
      "\"javascript:///test\",\n    \"origin\": \"null\",\n    \"protocol\": \"javascript:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 785 - Non-special schemes that some implementations might incorrectly treat as special (9)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript://test/a/../b\",\n    \"base\": null,\n    \"href\": "
      "\"javascript://test/b\",\n    \"origin\": \"null\",\n    \"protocol\": \"javascript:\",\n    "
      "\"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n  "
      "  \"port\": \"\",\n    \"pathname\": \"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "javascript") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 786 - Non-special schemes that some implementations might incorrectly treat as special (10)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 787 - Non-special schemes that some implementations might incorrectly treat as special (11)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 788 - Non-special schemes that some implementations might incorrectly treat as special (12)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial12) {
    static constexpr auto details =
      "\n{\n    \"input\": \"javascript://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 789 - Non-special schemes that some implementations might incorrectly treat as special (13)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial13) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"mailto://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"mailto:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 790 - Non-special schemes that some implementations might incorrectly treat as special (14)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial14) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto:///test\",\n    \"base\": null,\n    \"href\": \"mailto:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 791 - Non-special schemes that some implementations might incorrectly treat as special (15)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial15) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto://test/a/../b\",\n    \"base\": null,\n    \"href\": "
      "\"mailto://test/b\",\n    \"origin\": \"null\",\n    \"protocol\": \"mailto:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "mailto") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 792 - Non-special schemes that some implementations might incorrectly treat as special (16)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial16) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 793 - Non-special schemes that some implementations might incorrectly treat as special (17)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial17) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 794 - Non-special schemes that some implementations might incorrectly treat as special (18)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial18) {
    static constexpr auto details =
      "\n{\n    \"input\": \"mailto://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 795 - Non-special schemes that some implementations might incorrectly treat as special (19)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial19) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"intent://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"intent:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("intent://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "intent") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 796 - Non-special schemes that some implementations might incorrectly treat as special (20)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial20) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent:///test\",\n    \"base\": null,\n    \"href\": \"intent:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"intent:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("intent:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "intent") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 797 - Non-special schemes that some implementations might incorrectly treat as special (21)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial21) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent://test/a/../b\",\n    \"base\": null,\n    \"href\": "
      "\"intent://test/b\",\n    \"origin\": \"null\",\n    \"protocol\": \"intent:\",\n    \"username\": "
      "\"\",\n    \"password\": \"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": "
      "\"\",\n    \"pathname\": \"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("intent://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "intent") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 798 - Non-special schemes that some implementations might incorrectly treat as special (22)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial22) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("intent://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 799 - Non-special schemes that some implementations might incorrectly treat as special (23)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial23) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("intent://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 800 - Non-special schemes that some implementations might incorrectly treat as special (24)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial24) {
    static constexpr auto details =
      "\n{\n    \"input\": \"intent://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("intent://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 801 - Non-special schemes that some implementations might incorrectly treat as special (25)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial25) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"urn://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"urn:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("urn://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "urn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 802 - Non-special schemes that some implementations might incorrectly treat as special (26)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial26) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn:///test\",\n    \"base\": null,\n    \"href\": \"urn:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"urn:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "urn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 803 - Non-special schemes that some implementations might incorrectly treat as special (27)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial27) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn://test/a/../b\",\n    \"base\": null,\n    \"href\": \"urn://test/b\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"urn:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "urn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 804 - Non-special schemes that some implementations might incorrectly treat as special (28)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial28) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 805 - Non-special schemes that some implementations might incorrectly treat as special (29)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial29) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 806 - Non-special schemes that some implementations might incorrectly treat as special (30)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial30) {
    static constexpr auto details =
      "\n{\n    \"input\": \"urn://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("urn://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 807 - Non-special schemes that some implementations might incorrectly treat as special (31)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial31) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"turn://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"turn:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("turn://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "turn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 808 - Non-special schemes that some implementations might incorrectly treat as special (32)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial32) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn:///test\",\n    \"base\": null,\n    \"href\": \"turn:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"turn:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("turn:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "turn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 809 - Non-special schemes that some implementations might incorrectly treat as special (33)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial33) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn://test/a/../b\",\n    \"base\": null,\n    \"href\": \"turn://test/b\",\n  "
      "  \"origin\": \"null\",\n    \"protocol\": \"turn:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("turn://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "turn") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 810 - Non-special schemes that some implementations might incorrectly treat as special (34)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial34) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("turn://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 811 - Non-special schemes that some implementations might incorrectly treat as special (35)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial35) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("turn://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 812 - Non-special schemes that some implementations might incorrectly treat as special (36)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial36) {
    static constexpr auto details =
      "\n{\n    \"input\": \"turn://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("turn://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 813 - Non-special schemes that some implementations might incorrectly treat as special (37)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial37) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun://example.com:8080/pathname?search#hash\",\n    \"base\": null,\n    "
      "\"href\": \"stun://example.com:8080/pathname?search#hash\",\n    \"origin\": \"null\",\n    "
      "\"protocol\": \"stun:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"example.com:8080\",\n    \"hostname\": \"example.com\",\n    \"port\": \"8080\",\n    \"pathname\": "
      "\"/pathname\",\n    \"search\": \"?search\",\n    \"hash\": \"#hash\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("stun://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "stun") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.com") << details;
    EXPECT_EQ(ctx.out.get_port(), "8080") << details;
    EXPECT_EQ(ctx.out.get_path(), "/pathname") << details;
    EXPECT_EQ(ctx.out.get_queries(), "search") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "hash") << details;
}

// 814 - Non-special schemes that some implementations might incorrectly treat as special (38)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial38) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun:///test\",\n    \"base\": null,\n    \"href\": \"stun:///test\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"stun:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/test\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("stun:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "stun") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/test") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 815 - Non-special schemes that some implementations might incorrectly treat as special (39)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial39) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun://test/a/../b\",\n    \"base\": null,\n    \"href\": \"stun://test/b\",\n  "
      "  \"origin\": \"null\",\n    \"protocol\": \"stun:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": "
      "\"/b\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("stun://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "stun") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/b") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 816 - Non-special schemes that some implementations might incorrectly treat as special (40)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial40) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun://:443\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("stun://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 817 - Non-special schemes that some implementations might incorrectly treat as special (41)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial41) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun://test:test\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("stun://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 818 - Non-special schemes that some implementations might incorrectly treat as special (42)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial42) {
    static constexpr auto details =
      "\n{\n    \"input\": \"stun://[:1]\",\n    \"base\": null,\n    \"failure\": true\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("stun://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
}

// 819 - Non-special schemes that some implementations might incorrectly treat as special (43)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial43) {
    static constexpr auto details =
      "\n{\n    \"input\": \"w://x:0\",\n    \"base\": null,\n    \"href\": \"w://x:0\",\n    \"origin\": "
      "\"null\",\n    \"protocol\": \"w:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": "
      "\"x:0\",\n    \"hostname\": \"x\",\n    \"port\": \"0\",\n    \"pathname\": \"\",\n    \"search\": "
      "\"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("w://x:0");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "w") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "0") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 820 - Non-special schemes that some implementations might incorrectly treat as special (44)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial44) {
    static constexpr auto details =
      "\n{\n    \"input\": \"west://x:0\",\n    \"base\": null,\n    \"href\": \"west://x:0\",\n    "
      "\"origin\": \"null\",\n    \"protocol\": \"west:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"x:0\",\n    \"hostname\": \"x\",\n    \"port\": \"0\",\n    \"pathname\": "
      "\"\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("west://x:0");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "west") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "x") << details;
    EXPECT_EQ(ctx.out.get_port(), "0") << details;
    EXPECT_EQ(ctx.out.get_path(), "") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 821 - Scheme relative path starting with multiple slashes (1)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes1) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///test\",\n    \"base\": \"http://example.org/\",\n    \"href\": "
      "\"http://test/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///test", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 822 - Scheme relative path starting with multiple slashes (2)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes2) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///\\\\//\\\\//test\",\n    \"base\": \"http://example.org/\",\n    \"href\": "
      "\"http://test/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": \"\",\n   "
      " \"host\": \"test\",\n    \"hostname\": \"test\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///\\//\\//test", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "test") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 823 - Scheme relative path starting with multiple slashes (3)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes3) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///example.org/path\",\n    \"base\": \"http://example.org/\",\n    \"href\": "
      "\"http://example.org/path\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 824 - Scheme relative path starting with multiple slashes (4)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes4) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///example.org/../path\",\n    \"base\": \"http://example.org/\",\n    "
      "\"href\": \"http://example.org/path\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 825 - Scheme relative path starting with multiple slashes (5)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes5) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///example.org/../../\",\n    \"base\": \"http://example.org/\",\n    \"href\": "
      "\"http://example.org/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    \"password\": "
      "\"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    \"port\": \"\",\n    "
      "\"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../../", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 826 - Scheme relative path starting with multiple slashes (6)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes6) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///example.org/../path/../../\",\n    \"base\": \"http://example.org/\",\n    "
      "\"href\": \"http://example.org/\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path/../../", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 827 - Scheme relative path starting with multiple slashes (7)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes7) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///example.org/../path/../../path\",\n    \"base\": \"http://example.org/\",\n  "
      "  \"href\": \"http://example.org/path\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path/../../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 828 - Scheme relative path starting with multiple slashes (8)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes8) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\\\\/\\\\//example.org/../path\",\n    \"base\": \"http://example.org/\",\n    "
      "\"href\": \"http://example.org/path\",\n    \"protocol\": \"http:\",\n    \"username\": \"\",\n    "
      "\"password\": \"\",\n    \"host\": \"example.org\",\n    \"hostname\": \"example.org\",\n    "
      "\"port\": \"\",\n    \"pathname\": \"/path\",\n    \"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx =
      this->template parse_from_string<TypeParam>("/\\/\\//example.org/../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "http") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "example.org") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/path") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 829 - Scheme relative path starting with multiple slashes (9)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes9) {
    static constexpr auto details =
      "\n{\n    \"input\": \"///abcdef/../\",\n    \"base\": \"file:///\",\n    \"href\": \"file:///\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"\",\n    "
      "\"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("///abcdef/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 830 - Scheme relative path starting with multiple slashes (10)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes10) {
    static constexpr auto details =
      "\n{\n    \"input\": \"/\\\\//\\\\/a/../\",\n    \"base\": \"file:///\",\n    \"href\": "
      "\"file://////\",\n    \"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    "
      "\"host\": \"\",\n    \"hostname\": \"\",\n    \"port\": \"\",\n    \"pathname\": \"////\",\n    "
      "\"search\": \"\",\n    \"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("/\\//\\/a/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "////") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}

// 831 - Scheme relative path starting with multiple slashes (11)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes11) {
    static constexpr auto details =
      "\n{\n    \"input\": \"//a/../\",\n    \"base\": \"file:///\",\n    \"href\": \"file://a/\",\n    "
      "\"protocol\": \"file:\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"host\": \"a\",\n    "
      "\"hostname\": \"a\",\n    \"port\": \"\",\n    \"pathname\": \"/\",\n    \"search\": \"\",\n    "
      "\"hash\": \"\"\n}";
    auto const ctx = this->template parse_from_string<TypeParam>("//a/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status)) << to_string(uri::get_value(ctx.status)) << details;
    EXPECT_EQ(ctx.out.get_scheme(), "file") << details;
    EXPECT_EQ(ctx.out.get_username(), "") << details;
    EXPECT_EQ(ctx.out.get_password(), "") << details;
    EXPECT_EQ(ctx.out.get_hostname(), "a") << details;
    EXPECT_EQ(ctx.out.get_port(), "") << details;
    EXPECT_EQ(ctx.out.get_path(), "/") << details;
    EXPECT_EQ(ctx.out.get_queries(), "") << details;
    EXPECT_EQ(ctx.out.get_fragment(), "") << details;
}
