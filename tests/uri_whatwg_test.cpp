// Automatically generated by convert-urltestdata-to-cpp.js on 2024-02-02T19:37:48.592Z
// Use convert-urltestdata-to-cpp.js to generate this file, DO NOT EDIT MANUALLY.
//
// If you ever update "urltestdata.json" and regenerated this file,
// make sure to update the link in the README.md file as well.

#include "../webpp/uri/uri.hpp"
#include "./common/tests_common_pch.hpp"

using namespace webpp;


using Types =
  testing::Types<uri::parsing_uri_context_string<stl::string>,
                 uri::parsing_uri_context_string<stl::string_view>,
                 // uri::parsing_uri_context_string<stl::basic_string_view<char8_t>>,
                 uri::parsing_uri_context_u32,
                 uri::parsing_uri_context_segregated<>,
                 uri::parsing_uri_context_segregated_view<>,
                 uri::parsing_uri_context<stl::string_view, char const*>>;

template <class T>
struct URIWhatwgTest : testing::Test {
  private:
    stl::string url_text;

  public:
    template <typename SpecifiedTypeParam, typename StrT = stl::string_view>
    [[nodiscard]] constexpr SpecifiedTypeParam get_context(StrT str) {
        using ctx_type    = SpecifiedTypeParam;
        using string_type = stl::remove_cvref_t<StrT>;
        using str_iter    = typename string_type::const_iterator;
        using iterator    = typename ctx_type::iterator;
        if constexpr (stl::convertible_to<str_iter, iterator>) {
            return SpecifiedTypeParam{.beg = str.begin(), .pos = str.begin(), .end = str.end()};
        } else if constexpr (stl::convertible_to<stl::string::iterator, iterator>) {
            url_text = str;
            return SpecifiedTypeParam{.beg = url_text.begin(),
                                      .pos = url_text.begin(),
                                      .end = url_text.end()};
        } else {
            return SpecifiedTypeParam{.beg = str.data(), .pos = str.data(), .end = str.data() + str.size()};
        }
    }

    template <typename SpecifiedTypeParam>
    [[nodiscard]] constexpr SpecifiedTypeParam parse_from_string(stl::string_view const str) {
        auto ctx = get_context<SpecifiedTypeParam, stl::string_view>(str);
        uri::parse_uri(ctx);
        return ctx;
    }

    template <typename SpecifiedTypeParam>
    [[nodiscard]] constexpr SpecifiedTypeParam parse_from_string(
      stl::string_view const str,
      stl::string_view const base_str) {
        auto ctx = get_context<SpecifiedTypeParam, stl::string_view>(str);
        uri::parse_uri(ctx);

        using iterator          = typename stl::string_view::const_iterator;
        using base_context_type = uri::parsing_uri_context<stl::uint32_t, iterator>;

        base_context_type origin_context{.beg = base_str.begin(),
                                         .pos = base_str.begin(),
                                         .end = base_str.end()};
        uri::parse_uri(origin_context);

        uri::parse_uri(str, origin_context.out);
        return ctx;
    }
};

TYPED_TEST_SUITE(URIWhatwgTest, Types);

// See ../README.md for a description of the format. (1)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example\t.\norg", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (2)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://user:pass@foo:21/bar;par?b#c",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "21");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "pass");
    EXPECT_EQ(ctx.out.get_queries(), "b");
    EXPECT_EQ(ctx.out.get_fragment(), "c");
}

// See ../README.md for a description of the format. (3)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://test:@test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "test");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (4)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat4) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://:@test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (5)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat5) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://test:@test/x");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "test");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (6)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat6) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://:@test/x");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (7)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat7) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:foo.com", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (8)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat8) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("\t   :foo.com   \n", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (9)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat9) {
    auto const ctx = this->template parse_from_string<TypeParam>(" foo.com  ", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (10)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat10) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("a:\t foo.com", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (11)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat11) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:21/ b ? d # e ", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "21");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%20d%20");
    EXPECT_EQ(ctx.out.get_fragment(), "%20e");
}

// See ../README.md for a description of the format. (12)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat12) {
    auto const ctx = this->template parse_from_string<TypeParam>("lolscheme:x x#x x");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "lolscheme");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x%20x");
}

// See ../README.md for a description of the format. (13)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat13) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://f:/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (14)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat14) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:0/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "0");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (15)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat15) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:00000000000000/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "0");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (16)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat16) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://f:00000000000000000000080/c",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (17)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat17) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:b/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (18)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat18) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f: /c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (19)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat19) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:\n/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "f");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (20)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat20) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:fifty-two/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (21)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat21) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:999999/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (22)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat22) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("non-special://f:999999/c", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (23)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat23) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f: 21 / b ? d # e ", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (24)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat24) {
    auto const ctx = this->template parse_from_string<TypeParam>("", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (25)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat25) {
    auto const ctx = this->template parse_from_string<TypeParam>("  \t", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (26)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat26) {
    auto const ctx = this->template parse_from_string<TypeParam>(":foo.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (27)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat27) {
    auto const ctx = this->template parse_from_string<TypeParam>(":foo.com\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (28)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat28) {
    auto const ctx = this->template parse_from_string<TypeParam>(":", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (29)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat29) {
    auto const ctx = this->template parse_from_string<TypeParam>(":a", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (30)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat30) {
    auto const ctx = this->template parse_from_string<TypeParam>(":/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (31)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat31) {
    auto const ctx = this->template parse_from_string<TypeParam>(":\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (32)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat32) {
    auto const ctx = this->template parse_from_string<TypeParam>(":#", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (33)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat33) {
    auto const ctx = this->template parse_from_string<TypeParam>("#", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (34)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat34) {
    auto const ctx = this->template parse_from_string<TypeParam>("#/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "/");
}

// See ../README.md for a description of the format. (35)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat35) {
    auto const ctx = this->template parse_from_string<TypeParam>("#\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "\\");
}

// See ../README.md for a description of the format. (36)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat36) {
    auto const ctx = this->template parse_from_string<TypeParam>("#;?", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), ";?");
}

// See ../README.md for a description of the format. (37)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat37) {
    auto const ctx = this->template parse_from_string<TypeParam>("?", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (38)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat38) {
    auto const ctx = this->template parse_from_string<TypeParam>("/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (39)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat39) {
    auto const ctx = this->template parse_from_string<TypeParam>(":23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (40)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat40) {
    auto const ctx = this->template parse_from_string<TypeParam>("/:23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (41)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat41) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\x", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (42)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat42) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("\\\\x\\hello", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (43)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat43) {
    auto const ctx = this->template parse_from_string<TypeParam>("::", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (44)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat44) {
    auto const ctx = this->template parse_from_string<TypeParam>("::23", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (45)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat45) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo://", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (46)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat46) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://a:b@c:29/d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "c");
    EXPECT_EQ(ctx.out.get_port(), "29");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (47)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat47) {
    auto const ctx = this->template parse_from_string<TypeParam>("http::@c:29", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (48)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat48) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://&a:foo(b]c@d:2/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "d");
    EXPECT_EQ(ctx.out.get_port(), "2");
    EXPECT_EQ(ctx.out.get_username(), "&a");
    EXPECT_EQ(ctx.out.get_password(), "foo(b%5Dc");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (49)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat49) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://::@c@d:2", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "d");
    EXPECT_EQ(ctx.out.get_port(), "2");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "%3A%40c");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (50)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat50) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo.com:b@d/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "d");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "foo.com");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (51)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat51) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo.com/\\@", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (52)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat52) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:\\\\foo.com\\", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (53)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat53) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http:\\\\a\\b:c\\d@foo.com\\",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "a");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (54)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat54) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo:/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (55)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat55) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:/bar.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (56)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat56) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://///////", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (57)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat57) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://///////bar.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (58)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat58) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:////://///", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (59)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat59) {
    auto const ctx = this->template parse_from_string<TypeParam>("c:/foo", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "c");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (60)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat60) {
    auto const ctx = this->template parse_from_string<TypeParam>("//foo/bar", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (61)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat61) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/path;a??e#f#g", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "?e");
    EXPECT_EQ(ctx.out.get_fragment(), "f#g");
}

// See ../README.md for a description of the format. (62)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat62) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/abcd?efgh?ijkl", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "efgh?ijkl");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (63)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat63) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo/abcd#foo?bar", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "foo?bar");
}

// See ../README.md for a description of the format. (64)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat64) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("[61:24:74]:98", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (65)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat65) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:[61:27]/:foo", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (66)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat66) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[1::2]:3:4", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (67)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat67) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (68)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat68) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1]", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (69)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat69) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://2001::1]:80", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (70)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat70) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[2001::1]", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[2001::1]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (71)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat71) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[::127.0.0.1]", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[::7f00:1]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (72)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat72) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[::127.0.0.1.]", "http://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (73)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat73) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://[0:0:0:0:0:0:13.1.68.3]",
      "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[::d01:4403]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (74)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat74) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[2001::1]:80", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[2001::1]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (75)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat75) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (76)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat76) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftp:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (77)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat77) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("https:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (78)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat78) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("madeupscheme:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (79)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat79) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (80)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat80) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://example:1/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (81)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat81) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://example:test/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (82)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat82) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://example%/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (83)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat83) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://[example]/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// See ../README.md for a description of the format. (84)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat84) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftps:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftps");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (85)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat85) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("gopher:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (86)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat86) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ws:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (87)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat87) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (88)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat88) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (89)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat89) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (90)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat90) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto:/example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (91)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat91) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (92)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat92) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftp:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (93)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat93) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("https:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (94)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat94) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("madeupscheme:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (95)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat95) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ftps:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftps");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (96)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat96) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("gopher:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (97)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat97) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ws:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (98)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat98) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (99)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat99) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (100)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat100) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (101)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat101) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto:example.com/", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (102)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat102) {
    auto const ctx = this->template parse_from_string<TypeParam>("/a/b/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (103)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat103) {
    auto const ctx = this->template parse_from_string<TypeParam>("/a/ /c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (104)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat104) {
    auto const ctx = this->template parse_from_string<TypeParam>("/a%2fc", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (105)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat105) {
    auto const ctx = this->template parse_from_string<TypeParam>("/a/%2f/c", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// See ../README.md for a description of the format. (106)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat106) {
    auto const ctx = this->template parse_from_string<TypeParam>("#β", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%CE%B2");
}

// See ../README.md for a description of the format. (107)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat107) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("data:text/html,test#test", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "test");
}

// See ../README.md for a description of the format. (108)
TYPED_TEST(URIWhatwgTest, SeeReadmeMdForADescriptionOfTheFormat108) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("tel:1234567890", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "tel");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on https://felixfbecker.github.io/whatwg-url-custom-host-repro/ (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpsFelixfbeckerGithubIoWhatwgUrlCustomHostRepro1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ssh://example.com/foo/bar.git", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ssh");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:c:\\foo\\bar.html", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml2) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("  File:c|////foo\\bar.html", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml3) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|/foo/bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml4) {
    auto const ctx = this->template parse_from_string<TypeParam>("/C|\\foo\\bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml5) {
    auto const ctx = this->template parse_from_string<TypeParam>("//C|/foo/bar", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml6) {
    auto const ctx = this->template parse_from_string<TypeParam>("//server/file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "server");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml7) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\server\\file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "server");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml8) {
    auto const ctx = this->template parse_from_string<TypeParam>("/\\server/file", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "server");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml9) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("file:///foo/bar.txt", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml10) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///home/me", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml11) {
    auto const ctx = this->template parse_from_string<TypeParam>("//", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml12) {
    auto const ctx = this->template parse_from_string<TypeParam>("///", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml13) {
    auto const ctx = this->template parse_from_string<TypeParam>("///test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml14) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml15) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml16) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("file://localhost/", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml17) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("file://localhost/test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml18) {
    auto const ctx = this->template parse_from_string<TypeParam>("test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/file.html (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlFileHtml19) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:test", "file:///tmp/mock/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/././foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/./.foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/.");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/./");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/..bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../ton");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar/../ton/../../a");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs10) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/../../..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs11) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/../../../ton");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs12) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/%2e");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs13) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/%2e%2");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs14) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs15) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com////../..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs16) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar//../..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs17) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo/bar//..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs18) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs19) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/%20foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (20)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs20) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (21)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs21) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (22)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs22) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2zbar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (23)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs23) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%2\u00c2\u00a9zbar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (24)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs24) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%41%7a");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (25)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs25) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo\t\u0091%91");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (26)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs26) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo%00%51");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (27)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs27) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/(%28:%3A%29)");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (28)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs28) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/%3A%3a%3C%3c");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (29)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs29) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/foo\tbar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (30)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs30) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com\\\\foo\\\\bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (31)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs31) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example.com/%7Ffp3%3Eju%3Dduvgw%3Dd");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (32)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs32) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/@asdf%40");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (33)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs33) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/你好你好");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (34)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs34) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/‥/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (35)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs35) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/﻿/foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/path.js (36)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsPathJs36) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.com/‮/foo/‭/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com/foo?bar=baz#");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "bar=baz");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com/foo?bar=baz# \u00bb");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "bar=baz");
    EXPECT_EQ(ctx.out.get_fragment(), "%20%C2%BB");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs3) {
    auto const ctx = this->template parse_from_string<TypeParam>("data:test# \u00bb");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%20%C2%BB");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.google.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.0x00A80001");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www/foo%2Ehtml");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www/foo/%2E/html");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://user:pass@/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://%25DOMAIN:foobar@foodomain.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foodomain.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "%25DOMAIN");
    EXPECT_EQ(ctx.out.get_password(), "foobar");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (10)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs10) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:\\\\www.google.com\\foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.google.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (11)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs11) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (12)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs12) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "81");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (13)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs13) {
    auto const ctx = this->template parse_from_string<TypeParam>("httpa://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "httpa");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "80");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (14)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs14) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo:-80/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (15)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs15) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (16)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs16) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "80");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (17)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs17) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://foo:21/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (18)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs18) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "80");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (19)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs19) {
    auto const ctx = this->template parse_from_string<TypeParam>("gopher://foo:70/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "70");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (20)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs20) {
    auto const ctx = this->template parse_from_string<TypeParam>("gopher://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "443");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (21)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs21) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (22)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs22) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "81");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (23)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs23) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "443");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (24)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs24) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws://foo:815/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "815");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (25)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs25) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "80");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (26)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs26) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:81/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "81");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (27)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs27) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (28)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs28) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss://foo:815/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "815");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (29)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs29) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (30)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs30) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (31)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs31) {
    auto const ctx = this->template parse_from_string<TypeParam>("https:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (32)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs32) {
    auto const ctx = this->template parse_from_string<TypeParam>("madeupscheme:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (33)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs33) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (34)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs34) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftps:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftps");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (35)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs35) {
    auto const ctx = this->template parse_from_string<TypeParam>("gopher:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (36)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs36) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (37)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs37) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (38)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs38) {
    auto const ctx = this->template parse_from_string<TypeParam>("data:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (39)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs39) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (40)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs40) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:/example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (41)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs41) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (42)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs42) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (43)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs43) {
    auto const ctx = this->template parse_from_string<TypeParam>("https:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (44)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs44) {
    auto const ctx = this->template parse_from_string<TypeParam>("madeupscheme:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "madeupscheme");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (45)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs45) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftps:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftps");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (46)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs46) {
    auto const ctx = this->template parse_from_string<TypeParam>("gopher:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "gopher");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (47)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs47) {
    auto const ctx = this->template parse_from_string<TypeParam>("ws:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ws");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (48)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs48) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (49)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs49) {
    auto const ctx = this->template parse_from_string<TypeParam>("data:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (50)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs50) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/script-tests/relative.js (51)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlScriptTestsRelativeJs51) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:example.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (1)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (2)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (3)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (4)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (5)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (6)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (7)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://@pple.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "pple.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (8)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http::b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (9)
TYPED_TEST(URIWhatwgTest, BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (10)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml10) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://:b@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "b");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (11)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml11) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (12)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml12) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://user@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (13)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml13) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (14)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml14) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (15)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml15) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (16)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml16) {
    auto const ctx = this->template parse_from_string<TypeParam>("https:@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (17)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml17) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (18)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml18) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (19)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml19) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:b@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (20)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml20) {
    auto const ctx = this->template parse_from_string<TypeParam>("http::@/www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (21)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml21) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (22)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml22) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (23)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml23) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "a");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (24)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml24) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://www.@pple.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "pple.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "www.");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (25)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml25) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (26)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml26) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:/@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (27)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml27) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://@:www.example.com");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Based on http://trac.webkit.org/browser/trunk/LayoutTests/fast/url/segments-userinfo-vs-host.html (28)
TYPED_TEST(URIWhatwgTest,
           BasedOnHttpTracWebkitOrgBrowserTrunkLayouttestsFastUrlSegmentsUserinfoVsHostHtml28) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://:@www.example.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (1)
TYPED_TEST(URIWhatwgTest, Others1) {
    auto const ctx = this->template parse_from_string<TypeParam>("/", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (2)
TYPED_TEST(URIWhatwgTest, Others2) {
    auto const ctx = this->template parse_from_string<TypeParam>("/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (3)
TYPED_TEST(URIWhatwgTest, Others3) {
    auto const ctx = this->template parse_from_string<TypeParam>(".", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (4)
TYPED_TEST(URIWhatwgTest, Others4) {
    auto const ctx = this->template parse_from_string<TypeParam>("..", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (5)
TYPED_TEST(URIWhatwgTest, Others5) {
    auto const ctx = this->template parse_from_string<TypeParam>("test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (6)
TYPED_TEST(URIWhatwgTest, Others6) {
    auto const ctx = this->template parse_from_string<TypeParam>("./test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (7)
TYPED_TEST(URIWhatwgTest, Others7) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("../test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (8)
TYPED_TEST(URIWhatwgTest, Others8) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("../aaa/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (9)
TYPED_TEST(URIWhatwgTest, Others9) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("../../test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (10)
TYPED_TEST(URIWhatwgTest, Others10) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("中/test.txt", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (11)
TYPED_TEST(URIWhatwgTest, Others11) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://www.example2.com", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example2.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (12)
TYPED_TEST(URIWhatwgTest, Others12) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("//www.example2.com", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example2.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (13)
TYPED_TEST(URIWhatwgTest, Others13) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:...", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (14)
TYPED_TEST(URIWhatwgTest, Others14) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:..", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Others (15)
TYPED_TEST(URIWhatwgTest, Others15) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:a", "http://www.example.com/test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Basic canonicalization, uppercase should be converted to lowercase (1)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ExAmPlE.CoM", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Basic canonicalization, uppercase should be converted to lowercase (2)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase2) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://example example.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Basic canonicalization, uppercase should be converted to lowercase (3)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase3) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://Goo%20 goo%7C|.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Basic canonicalization, uppercase should be converted to lowercase (4)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Basic canonicalization, uppercase should be converted to lowercase (5)
TYPED_TEST(URIWhatwgTest, BasicCanonicalizationUppercaseShouldBeConvertedToLowercase5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[:]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+3000 is mapped to U+0020 (space) which is disallowed (1)
TYPED_TEST(URIWhatwgTest, U3000IsMappedToU0020SpaceWhichIsDisallowed1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://GOO\u00a0　goo.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Other types of space (no-break, zero-width, zero-width-no-break) are name-prepped away to nothing. U+200B,
// U+2060, and U+FEFF, are ignored (1)
TYPED_TEST(
  URIWhatwgTest,
  OtherTypesOfSpaceNoBreakZeroWidthZeroWidthNoBreakAreNamePreppedAwayToNothingU200bU2060AndUFeffAreIgnored1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://GOO​⁠﻿goo.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "googoo.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Leading and trailing C0 control or space (1)
TYPED_TEST(URIWhatwgTest, LeadingAndTrailingC0ControlOrSpace1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("\u0000\u001b\u0004\u0012 http://example.com/\u001f \r ");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Ideographic full stop (full-width period for Chinese, etc.) should be treated as a dot. U+3002 is mapped to
// U+002E (dot) (1)
TYPED_TEST(URIWhatwgTest,
           IdeographicFullStopFullWidthPeriodForChineseEtcShouldBeTreatedAsADotU3002IsMappedToU002eDot1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://www.foo。bar.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "www.foo.bar.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Invalid unicode characters should fail... U+FDD0 is disallowed; %ef%b7%90 is U+FDD0 (1)
TYPED_TEST(URIWhatwgTest, InvalidUnicodeCharactersShouldFailUFdd0IsDisallowedEfB790IsUFdd01) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://﷐zyx.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// This is the same as previous but escaped (1)
TYPED_TEST(URIWhatwgTest, ThisIsTheSameAsPreviousButEscaped1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://%ef%b7%90zyx.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+FFFD (1)
TYPED_TEST(URIWhatwgTest, UFffd1) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://�");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+FFFD (2)
TYPED_TEST(URIWhatwgTest, UFffd2) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://%EF%BF%BD");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+FFFD (3)
TYPED_TEST(URIWhatwgTest, UFffd3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/�?�#�");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BD");
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BD");
}

// Domain is ASCII, but a label is invalid IDNA (1)
TYPED_TEST(URIWhatwgTest, DomainIsAsciiButALabelIsInvalidIdna1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Domain is ASCII, but a label is invalid IDNA (2)
TYPED_TEST(URIWhatwgTest, DomainIsAsciiButALabelIsInvalidIdna2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// IDNA labels should be matched case-insensitively (1)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.XN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// IDNA labels should be matched case-insensitively (2)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a.b.c.Xn--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// IDNA labels should be matched case-insensitively (3)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.XN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// IDNA labels should be matched case-insensitively (4)
TYPED_TEST(URIWhatwgTest, IdnaLabelsShouldBeMatchedCaseInsensitively4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://10.0.0.xN--pokxncvks");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Test name prepping, fullwidth input should be converted to ASCII and NOT IDN-ized. This is 'Go' in
// fullwidth UTF-8/UTF-16. (1)
TYPED_TEST(URIWhatwgTest,
           TestNamePreppingFullwidthInputShouldBeConvertedToAsciiAndNotIdnIzedThisIsGoInFullwidthUtf8Utf161) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://Ｇｏ.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "go.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// URL spec forbids the following. https://www.w3.org/Bugs/Public/show_bug.cgi?id=24257 (1)
TYPED_TEST(URIWhatwgTest, UrlSpecForbidsTheFollowingHttpsWwwW3OrgBugsPublicShowBugCgiId242571) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://％４１.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// URL spec forbids the following. https://www.w3.org/Bugs/Public/show_bug.cgi?id=24257 (2)
TYPED_TEST(URIWhatwgTest, UrlSpecForbidsTheFollowingHttpsWwwW3OrgBugsPublicShowBugCgiId242572) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%ef%bc%85%ef%bc%94%ef%bc%91.com",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// ...%00 in fullwidth should fail (also as escaped UTF-8 input) (1)
TYPED_TEST(URIWhatwgTest, 00InFullwidthShouldFailAlsoAsEscapedUtf8Input1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://％００.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// ...%00 in fullwidth should fail (also as escaped UTF-8 input) (2)
TYPED_TEST(URIWhatwgTest, 00InFullwidthShouldFailAlsoAsEscapedUtf8Input2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%ef%bc%85%ef%bc%90%ef%bc%90.com",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (1)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://你好你好", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "xn--6qqa088eba");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (2)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn2) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://fa\u00df.ExAmPlE/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "xn--fa-hia.example");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Basic IDN support, UTF-8 and UTF-16 input should be converted to IDN (3)
TYPED_TEST(URIWhatwgTest, BasicIdnSupportUtf8AndUtf16InputShouldBeConvertedToIdn3) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://fa\u00df.ExAmPlE/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "fa%C3%9F.ExAmPlE");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Invalid escaped characters should fail and the percents should be escaped.
// https://www.w3.org/Bugs/Public/show_bug.cgi?id=24191 (1)
TYPED_TEST(
  URIWhatwgTest,
  InvalidEscapedCharactersShouldFailAndThePercentsShouldBeEscapedHttpsWwwW3OrgBugsPublicShowBugCgiId241911) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://%zz%66%a.com", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// If we get an invalid character that has been escaped. (1)
TYPED_TEST(URIWhatwgTest, IfWeGetAnInvalidCharacterThatHasBeenEscaped1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://%25", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// If we get an invalid character that has been escaped. (2)
TYPED_TEST(URIWhatwgTest, IfWeGetAnInvalidCharacterThatHasBeenEscaped2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://hello%00", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Escaped numbers should be treated like IP addresses if they are. (1)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre1) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%30%78%63%30%2e%30%32%35%30.01",
      "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Escaped numbers should be treated like IP addresses if they are. (2)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%30%78%63%30%2e%30%32%35%30.01%2e",
      "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Escaped numbers should be treated like IP addresses if they are. (3)
TYPED_TEST(URIWhatwgTest, EscapedNumbersShouldBeTreatedLikeIpAddressesIfTheyAre3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.0.257", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Invalid escaping in hosts causes failure (1)
TYPED_TEST(URIWhatwgTest, InvalidEscapingInHostsCausesFailure1) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://%3g%78%63%30%2e%30%32%35%30%2E.01",
      "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// A space in a host causes failure (1)
TYPED_TEST(URIWhatwgTest, ASpaceInAHostCausesFailure1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://192.168.0.1 hello", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// A space in a host causes failure (2)
TYPED_TEST(URIWhatwgTest, ASpaceInAHostCausesFailure2) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x x:12");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Fullwidth and escaped UTF-8 fullwidth should still be treated as IP (1)
TYPED_TEST(URIWhatwgTest, FullwidthAndEscapedUtf8FullwidthShouldStillBeTreatedAsIp1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://０Ｘｃ０．０２５０．０１", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.0.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Domains with empty labels (1)
TYPED_TEST(URIWhatwgTest, DomainsWithEmptyLabels1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://./");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), ".");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Domains with empty labels (2)
TYPED_TEST(URIWhatwgTest, DomainsWithEmptyLabels2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "..");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special domains with empty labels (1)
TYPED_TEST(URIWhatwgTest, NonSpecialDomainsWithEmptyLabels1) {
    auto const ctx = this->template parse_from_string<TypeParam>("h://.");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "h");
    EXPECT_EQ(ctx.out.get_hostname(), ".");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Broken IPv6 (1)
TYPED_TEST(URIWhatwgTest, BrokenIpv61) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[www.google.com]/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (2)
TYPED_TEST(URIWhatwgTest, BrokenIpv62) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[google.com]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (3)
TYPED_TEST(URIWhatwgTest, BrokenIpv63) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.3.4x]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (4)
TYPED_TEST(URIWhatwgTest, BrokenIpv64) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.3.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (5)
TYPED_TEST(URIWhatwgTest, BrokenIpv65) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.2.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (6)
TYPED_TEST(URIWhatwgTest, BrokenIpv66) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::.1.2]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (7)
TYPED_TEST(URIWhatwgTest, BrokenIpv67) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::1.]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (8)
TYPED_TEST(URIWhatwgTest, BrokenIpv68) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::.1]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (9)
TYPED_TEST(URIWhatwgTest, BrokenIpv69) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::%31]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Broken IPv6 (10)
TYPED_TEST(URIWhatwgTest, BrokenIpv610) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://%5B::1]", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Misc Unicode (1)
TYPED_TEST(URIWhatwgTest, MiscUnicode1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://foo:💩@example.com/bar", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "foo");
    EXPECT_EQ(ctx.out.get_password(), "%F0%9F%92%A9");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # resolving a fragment against any scheme succeeds (1)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds1) {
    auto const ctx = this->template parse_from_string<TypeParam>("#", "test:test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "test");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # resolving a fragment against any scheme succeeds (2)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds2) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "mailto:x@x.com");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # resolving a fragment against any scheme succeeds (3)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds3) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "data:,");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # resolving a fragment against any scheme succeeds (4)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds4) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "about");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # resolving a fragment against any scheme succeeds (5)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds5) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x:y", "about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "about");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x:y");
}

// # resolving a fragment against any scheme succeeds (6)
TYPED_TEST(URIWhatwgTest, ResolvingAFragmentAgainstAnySchemeSucceeds6) {
    auto const ctx = this->template parse_from_string<TypeParam>("#", "test:test?test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "test");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "test");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # multiple @ in authority state (1)
TYPED_TEST(URIWhatwgTest, MultipleInAuthorityState1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://@test@test@example:800/", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example");
    EXPECT_EQ(ctx.out.get_port(), "800");
    EXPECT_EQ(ctx.out.get_username(), "%40test%40test");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # multiple @ in authority state (2)
TYPED_TEST(URIWhatwgTest, MultipleInAuthorityState2) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://@@@example", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "%40%40");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// non-az-09 characters (1)
TYPED_TEST(URIWhatwgTest, NonAz09Characters1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://`{}:`{}@h/`{}?`{}", "http://doesnotmatter/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "h");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "%60%7B%7D");
    EXPECT_EQ(ctx.out.get_password(), "%60%7B%7D");
    EXPECT_EQ(ctx.out.get_queries(), "`{}");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// byte is ' and url is special (1)
TYPED_TEST(URIWhatwgTest, ByteIsAndUrlIsSpecial1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://host/?'");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%27");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// byte is ' and url is special (2)
TYPED_TEST(URIWhatwgTest, ByteIsAndUrlIsSpecial2) {
    auto const ctx = this->template parse_from_string<TypeParam>("notspecial://host/?'");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "notspecial");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "'");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Credentials in base (1)
TYPED_TEST(URIWhatwgTest, CredentialsInBase1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("/some/path", "http://user@example.org/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Credentials in base (2)
TYPED_TEST(URIWhatwgTest, CredentialsInBase2) {
    auto const ctx = this->template parse_from_string<TypeParam>("", "http://user:pass@example.org:21/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "21");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "pass");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Credentials in base (3)
TYPED_TEST(URIWhatwgTest, CredentialsInBase3) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("/some/path", "http://user:pass@example.org:21/smth");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "21");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "pass");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (1)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes1) {
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (2)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes2) {
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (3)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes3) {
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (4)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes4) {
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "ho");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (5)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes5) {
    auto const ctx = this->template parse_from_string<TypeParam>("i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (6)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes6) {
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (7)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes7) {
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (8)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes8) {
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (9)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes9) {
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "ho");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (10)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes10) {
    auto const ctx = this->template parse_from_string<TypeParam>("../i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (11)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes11) {
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (12)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes12) {
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (13)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes13) {
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (14)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes14) {
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "ho");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (15)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes15) {
    auto const ctx = this->template parse_from_string<TypeParam>("/i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (16)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes16) {
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (17)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes17) {
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:sd/sd");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (18)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes18) {
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "i");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (19)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes19) {
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "ho");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "i");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (20)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes20) {
    auto const ctx = this->template parse_from_string<TypeParam>("?i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "i");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (21)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes21) {
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:sd");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "i");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (22)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes22) {
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:sd/sd");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "i");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (23)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes23) {
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:/pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "i");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (24)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes24) {
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc://ho/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "ho");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "i");
}

// # a set of tests designed by zcorpan for relative URLs with unknown schemes (25)
TYPED_TEST(URIWhatwgTest, ASetOfTestsDesignedByZcorpanForRelativeUrlsWithUnknownSchemes25) {
    auto const ctx = this->template parse_from_string<TypeParam>("#i", "sc:///pa/pa");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "i");
}

// # make sure that relative URL logic works on known typically non-relative schemes too (1)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo1) {
    auto const ctx = this->template parse_from_string<TypeParam>("about:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "about");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # make sure that relative URL logic works on known typically non-relative schemes too (2)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo2) {
    auto const ctx = this->template parse_from_string<TypeParam>("data:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # make sure that relative URL logic works on known typically non-relative schemes too (3)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo3) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # make sure that relative URL logic works on known typically non-relative schemes too (4)
TYPED_TEST(URIWhatwgTest, MakeSureThatRelativeUrlLogicWorksOnKnownTypicallyNonRelativeSchemesToo4) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:/../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown schemes and their hosts (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts1) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://\u00f1.test/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1.test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown schemes and their hosts (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts2) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://%/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown schemes and their hosts (3)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts3) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://@/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # unknown schemes and their hosts (4)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts4) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://te@s:t@/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # unknown schemes and their hosts (5)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts5) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://:/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # unknown schemes and their hosts (6)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts6) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://:12/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # unknown schemes and their hosts (7)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndTheirHosts7) {
    auto const ctx = this->template parse_from_string<TypeParam>("x", "sc://\u00f1");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown schemes and backslashes (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemesAndBackslashes1) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc:\\../");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown scheme with path looking like a password (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithPathLookingLikeAPassword1) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc::a@example.net");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown scheme with bogus percent-encoding (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithBogusPercentEncoding1) {
    auto const ctx = this->template parse_from_string<TypeParam>("wow:%NBD");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wow");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown scheme with bogus percent-encoding (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithBogusPercentEncoding2) {
    auto const ctx = this->template parse_from_string<TypeParam>("wow:%1G");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wow");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown scheme with non-URL characters (1)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithNonUrlCharacters1) {
    auto const ctx = this->template parse_from_string<TypeParam>("wow:￿");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wow");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # unknown scheme with non-URL characters (2)
TYPED_TEST(URIWhatwgTest, UnknownSchemeWithNonUrlCharacters2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://example.com/�𐟾�﷐﷏﷯ﷰ￾￿?�𐟾�﷐﷏﷯ﷰ￾￿");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(),
              "%EF%BF%BD%F0%90%9F%BE%EF%BF%BD%EF%B7%90%EF%B7%8F%EF%B7%AF%EF%B7%B0%EF%BF%BE%EF%BF%BF");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden host code points (1)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints1) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a\u0000b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (2)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints2) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (3)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints3) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a<b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (4)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints4) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a>b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (5)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints5) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a[b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (6)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints6) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a\\b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (7)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints7) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a]b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (8)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints8) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a^b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host code points (9)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodePoints9) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://a|b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden host codepoints: tabs and newlines are removed during preprocessing (1)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing1) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\tst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden host codepoints: tabs and newlines are removed during preprocessing (2)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing2) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\nst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden host codepoints: tabs and newlines are removed during preprocessing (3)
TYPED_TEST(URIWhatwgTest, ForbiddenHostCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing3) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo://ho\rst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden domain code-points (1)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0000b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (2)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0001b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (3)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0002b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (4)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0003b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (5)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0004b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (6)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0005b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (7)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0006b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (8)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0007b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (9)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0008b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (10)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints10) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u000bb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (11)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints11) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u000cb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (12)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints12) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u000eb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (13)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints13) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u000fb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (14)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints14) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0010b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (15)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints15) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0011b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (16)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints16) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0012b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (17)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints17) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0013b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (18)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints18) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0014b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (19)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints19) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0015b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (20)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints20) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0016b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (21)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints21) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0017b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (22)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints22) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0018b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (23)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints23) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u0019b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (24)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints24) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001ab/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (25)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints25) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001bb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (26)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints26) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001cb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (27)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints27) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001db/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (28)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints28) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001eb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (29)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints29) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u001fb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (30)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints30) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (31)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints31) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a%b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (32)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints32) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a<b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (33)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints33) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a>b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (34)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints34) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a[b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (35)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints35) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a]b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (36)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints36) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a^b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (37)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints37) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a|b/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain code-points (38)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodePoints38) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://a\u007fb/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Forbidden domain codepoints: tabs and newlines are removed during preprocessing (1)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\tst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden domain codepoints: tabs and newlines are removed during preprocessing (2)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\nst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Forbidden domain codepoints: tabs and newlines are removed during preprocessing (3)
TYPED_TEST(URIWhatwgTest, ForbiddenDomainCodepointsTabsAndNewlinesAreRemovedDuringPreprocessing3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho\rst/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Encoded forbidden domain codepoints in special URLs (1)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%00st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (2)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%01st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (3)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%02st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (4)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%03st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (5)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%04st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (6)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%05st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (7)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%06st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (8)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%07st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (9)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%08st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (10)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls10) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%09st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (11)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls11) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (12)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls12) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (13)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls13) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (14)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls14) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (15)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls15) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (16)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls16) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%0Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (17)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls17) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%10st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (18)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls18) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%11st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (19)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls19) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%12st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (20)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls20) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%13st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (21)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls21) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%14st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (22)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls22) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%15st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (23)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls23) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%16st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (24)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls24) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%17st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (25)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls25) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%18st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (26)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls26) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%19st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (27)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls27) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (28)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls28) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (29)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls29) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (30)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls30) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (31)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls31) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (32)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls32) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%1Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (33)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls33) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%20st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (34)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls34) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%23st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (35)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls35) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%25st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (36)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls36) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%2Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (37)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls37) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Ast/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (38)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls38) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (39)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls39) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Est/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (40)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls40) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%3Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (41)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls41) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%40st/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (42)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls42) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Bst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (43)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls43) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (44)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls44) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%5Dst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (45)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls45) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%7Cst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Encoded forbidden domain codepoints in special URLs (46)
TYPED_TEST(URIWhatwgTest, EncodedForbiddenDomainCodepointsInSpecialUrls46) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://ho%7Fst/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Allowed host/domain code points (1)
TYPED_TEST(URIWhatwgTest, AllowedHostDomainCodePoints1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://!\"$&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$&'()*+,-.;=_`{}~");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Allowed host/domain code points (2)
TYPED_TEST(URIWhatwgTest, AllowedHostDomainCodePoints2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "sc://"
      "\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u000b\u000c\u000e\u000f\u0010\u0011\u0012\u0013\u0014"
      "\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f\u007f!\"$%&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(),
              "%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\"$%&'"
              "()*+,-.;=_`{}~");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Hosts and percent-encoding (1)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding1) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://example.com%80/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Hosts and percent-encoding (2)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding2) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://example.com%A0/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Hosts and percent-encoding (3)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com%80/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Hosts and percent-encoding (4)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding4) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com%A0/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Hosts and percent-encoding (5)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding5) {
    auto const ctx = this->template parse_from_string<TypeParam>("ftp://%e2%98%83");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ftp");
    EXPECT_EQ(ctx.out.get_hostname(), "xn--n3h");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Hosts and percent-encoding (6)
TYPED_TEST(URIWhatwgTest, HostsAndPercentEncoding6) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://%e2%98%83");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "xn--n3h");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # tests from jsdom/whatwg-url designed for code coverage (1)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://127.0.0.1:10100/relative_import.html");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "127.0.0.1");
    EXPECT_EQ(ctx.out.get_port(), "10100");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # tests from jsdom/whatwg-url designed for code coverage (2)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://facebook.com/?foo=%7B%22abc%22");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "facebook.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "foo=%7B%22abc%22");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # tests from jsdom/whatwg-url designed for code coverage (3)
TYPED_TEST(URIWhatwgTest, TestsFromJsdomWhatwgUrlDesignedForCodeCoverage3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://localhost:3000/jqueryui@1.2.3");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "localhost");
    EXPECT_EQ(ctx.out.get_port(), "3000");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # tab/LF/CR (1)
TYPED_TEST(URIWhatwgTest, TabLfCr1) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "h\tt\nt\rp://h\to\ns\rt:9\t0\n0\r0/p\ta\nt\rh?q\tu\ne\rry#f\tr\na\rg");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "9000");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "query");
    EXPECT_EQ(ctx.out.get_fragment(), "frag");
}

// # Stringification of URL.searchParams (1)
TYPED_TEST(URIWhatwgTest, StringificationOfUrlSearchparams1) {
    auto const ctx = this->template parse_from_string<TypeParam>("?a=b&c=d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a=b&c=d");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Stringification of URL.searchParams (2)
TYPED_TEST(URIWhatwgTest, StringificationOfUrlSearchparams2) {
    auto const ctx = this->template parse_from_string<TypeParam>("??a=b&c=d", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "?a=b&c=d");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Scheme only (1)
TYPED_TEST(URIWhatwgTest, SchemeOnly1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:", "http://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Scheme only (2)
TYPED_TEST(URIWhatwgTest, SchemeOnly2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http:", "https://example.org/foo/bar");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Scheme only (3)
TYPED_TEST(URIWhatwgTest, SchemeOnly3) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc:", "https://example.org/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Percent encoding of fragments (1)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo\u0008bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "qux");
    EXPECT_EQ(ctx.out.get_fragment(), "foo%08bar");
}

// # Percent encoding of fragments (2)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo\"bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "qux");
    EXPECT_EQ(ctx.out.get_fragment(), "foo%22bar");
}

// # Percent encoding of fragments (3)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo<bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "qux");
    EXPECT_EQ(ctx.out.get_fragment(), "foo%3Cbar");
}

// # Percent encoding of fragments (4)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo>bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "qux");
    EXPECT_EQ(ctx.out.get_fragment(), "foo%3Ebar");
}

// # Percent encoding of fragments (5)
TYPED_TEST(URIWhatwgTest, PercentEncodingOfFragments5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.bar/baz?qux#foo`bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.bar");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "qux");
    EXPECT_EQ(ctx.out.get_fragment(), "foo%60bar");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (1)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103171) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4/", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (2)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103172) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4./", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (3)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103173) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.257", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.1.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (4)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103174) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://192.168.257.", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.1.1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (5)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103175) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://192.168.257.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "192.168.257.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (6)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103176) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://256", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "0.0.1.0");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (7)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103177) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://256.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "256.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (8)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103178) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "59.154.201.255");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (9)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull103179) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999.", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "59.154.201.255");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (10)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031710) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://999999999.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "999999999.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (11)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031711) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://10000000000", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (12)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031712) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://10000000000.com", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "10000000000.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (13)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031713) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://4294967295", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "255.255.255.255");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (14)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031714) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://4294967296", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (15)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031715) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0xffffffff", "http://other.com/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "255.255.255.255");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (16)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031716) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0xffffffff1", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (17)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031717) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv4 parsing (via https://github.com/nodejs/node/pull/10317) (18)
TYPED_TEST(URIWhatwgTest, Ipv4ParsingViaHttpsGithubComNodejsNodePull1031718) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://0x.0x.0");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "0.0.0.0");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// More IPv4 parsing (via https://github.com/jsdom/whatwg-url/issues/92) (1)
TYPED_TEST(URIWhatwgTest, MoreIpv4ParsingViaHttpsGithubComJsdomWhatwgUrlIssues921) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://0x100000000/test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// More IPv4 parsing (via https://github.com/jsdom/whatwg-url/issues/92) (2)
TYPED_TEST(URIWhatwgTest, MoreIpv4ParsingViaHttpsGithubComJsdomWhatwgUrlIssues922) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://256.0.0.1/test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (1)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C%3A/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (2)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C%7C/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (3)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%3A");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (4)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork4) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%7C");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (5)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork5) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43|");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (6)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork6) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://C%7C");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (7)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork7) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://%43%7C/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (8)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork8) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://%43%7C/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (9)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork9) {
    auto const ctx = this->template parse_from_string<TypeParam>("asdf://%43|/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file URLs containing percent-encoded Windows drive letters (shouldn't work) (10)
TYPED_TEST(URIWhatwgTest, FileUrlsContainingPercentEncodedWindowsDriveLettersShouldnTWork10) {
    auto const ctx = this->template parse_from_string<TypeParam>("asdf://%43%7C/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "asdf");
    EXPECT_EQ(ctx.out.get_hostname(), "%43%7C");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (1)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull601) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "pix/submit.gif",
      "file:///C:/Users/Domenic/Dropbox/GitHub/tmpvar/jsdom/test/level2/html/files/anchor.html");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (2)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull602) {
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs relative to other file URLs (via https://github.com/jsdom/whatwg-url/pull/60) (3)
TYPED_TEST(URIWhatwgTest, FileUrlsRelativeToOtherFileUrlsViaHttpsGithubComJsdomWhatwgUrlPull603) {
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (1)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk1) {
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (2)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk2) {
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file://h/C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "h");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (3)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk3) {
    auto const ctx = this->template parse_from_string<TypeParam>("/", "file://h/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "h");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (4)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk4) {
    auto const ctx = this->template parse_from_string<TypeParam>("//d:", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (5)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk5) {
    auto const ctx = this->template parse_from_string<TypeParam>("//d:/..", "file:///C:/a/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (6)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk6) {
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///ab:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (7)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk7) {
    auto const ctx = this->template parse_from_string<TypeParam>("..", "file:///1:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (8)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk8) {
    auto const ctx = this->template parse_from_string<TypeParam>("", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "test");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (9)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk9) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "test");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (10)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk10) {
    auto const ctx = this->template parse_from_string<TypeParam>("?x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "x");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (11)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk11) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:?x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "x");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # More file URL tests by zcorpan and annevk (12)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk12) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "test");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # More file URL tests by zcorpan and annevk (13)
TYPED_TEST(URIWhatwgTest, MoreFileUrlTestsByZcorpanAndAnnevk13) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:#x", "file:///test?test#test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "test");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # File URLs and many (back)slashes (1)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (2)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (3)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\?fox");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "fox");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (4)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes4) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\\\\\#guppy");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "guppy");
}

// # File URLs and many (back)slashes (5)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes5) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://spider///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "spider");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (6)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes6) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\\\localhost//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (7)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes7) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///localhost//cat");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (8)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes8) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://\\/localhost//cat");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (9)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes9) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost//a//../..//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (10)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes10) {
    auto const ctx = this->template parse_from_string<TypeParam>("/////mouse", "file:///elephant");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (11)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes11) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (12)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes12) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\/localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (13)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes13) {
    auto const ctx = this->template parse_from_string<TypeParam>("//localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (14)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes14) {
    auto const ctx = this->template parse_from_string<TypeParam>("/..//localhost//pig", "file://lion/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "lion");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs and many (back)slashes (15)
TYPED_TEST(URIWhatwgTest, FileUrlsAndManyBackSlashes15) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://", "file://ape/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs with non-empty hosts (1)
TYPED_TEST(URIWhatwgTest, FileUrlsWithNonEmptyHosts1) {
    auto const ctx = this->template parse_from_string<TypeParam>("/rooibos", "file://tea/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "tea");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # File URLs with non-empty hosts (2)
TYPED_TEST(URIWhatwgTest, FileUrlsWithNonEmptyHosts2) {
    auto const ctx = this->template parse_from_string<TypeParam>("/?chai", "file://tea/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "tea");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "chai");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl1) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl2) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|", "file://host/D:/dir1/dir2/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (3)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl3) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|#", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (4)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl4) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|?", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (5)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl5) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|/", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (6)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl6) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|\n/", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (7)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl7) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|\\", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (8)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl8) {
    auto const ctx = this->template parse_from_string<TypeParam>("C", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter handling with the 'file:' base URL (9)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterHandlingWithTheFileBaseUrl9) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|a", "file://host/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk in the file slash state (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState1) {
    auto const ctx = this->template parse_from_string<TypeParam>("/c:/foo/bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk in the file slash state (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState2) {
    auto const ctx = this->template parse_from_string<TypeParam>("/c|/foo/bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk in the file slash state (3)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:\\c:\\foo\\bar", "file:///c:/baz/qux");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk in the file slash state (4)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkInTheFileSlashState4) {
    auto const ctx = this->template parse_from_string<TypeParam>("/c:/foo/bar", "file://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Do not drop the host in the presence of a drive letter (1)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://example.net/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "example.net");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Do not drop the host in the presence of a drive letter (2)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://1.2.3.4/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "1.2.3.4");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Do not drop the host in the presence of a drive letter (3)
TYPED_TEST(URIWhatwgTest, DoNotDropTheHostInThePresenceOfADriveLetter3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://[1::8]/C:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "[1::8]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the host from the base URL in the following cases (1)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases1) {
    auto const ctx = this->template parse_from_string<TypeParam>("C|/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the host from the base URL in the following cases (2)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases2) {
    auto const ctx = this->template parse_from_string<TypeParam>("/C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the host from the base URL in the following cases (3)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the host from the base URL in the following cases (4)
TYPED_TEST(URIWhatwgTest, CopyTheHostFromTheBaseUrlInTheFollowingCases4) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:/C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the empty host from the input in the following cases (1)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases1) {
    auto const ctx = this->template parse_from_string<TypeParam>("//C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the empty host from the input in the following cases (2)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the empty host from the input in the following cases (3)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases3) {
    auto const ctx = this->template parse_from_string<TypeParam>("///C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Copy the empty host from the input in the following cases (4)
TYPED_TEST(URIWhatwgTest, CopyTheEmptyHostFromTheInputInTheFollowingCases4) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///C:/", "file://host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk (no host) (1)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkNoHost1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:/C|/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Windows drive letter quirk (no host) (2)
TYPED_TEST(URIWhatwgTest, WindowsDriveLetterQuirkNoHost2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://C|/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs without base URL by Rimas Misevičius (1)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs without base URL by Rimas Misevičius (2)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:?q=v");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "q=v");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file URLs without base URL by Rimas Misevičius (3)
TYPED_TEST(URIWhatwgTest, FileUrlsWithoutBaseUrlByRimasMiseviIus3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:#frag");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "frag");
}

// # file: drive letter cases from https://crbug.com/1078698 (1)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786981) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///Y:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 (2)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786982) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///Y:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 (3)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786983) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./Y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 (4)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786984) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./Y:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 (5)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom10786985) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\\\.\\Y:");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # file: drive letter cases from https://crbug.com/1078698 but lowercased (1)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///y:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 but lowercased (2)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///y:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 but lowercased (3)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 but lowercased (4)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased4) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///./y:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # file: drive letter cases from https://crbug.com/1078698 but lowercased (5)
TYPED_TEST(URIWhatwgTest, FileDriveLetterCasesFromHttpsCrbugCom1078698ButLowercased5) {
    auto const ctx = this->template parse_from_string<TypeParam>("\\\\\\.\\y:");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (1)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4051) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost//a//../..//foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (2)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4052) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://localhost////foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (3)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4053) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:////foo");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (4)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4054) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (5)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4055) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:////one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (6)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4056) {
    auto const ctx = this->template parse_from_string<TypeParam>("//one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "one");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (7)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4057) {
    auto const ctx = this->template parse_from_string<TypeParam>("///one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (8)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4058) {
    auto const ctx = this->template parse_from_string<TypeParam>("////one/two", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Additional file URL tests for (https://github.com/whatwg/url/issues/405) (9)
TYPED_TEST(URIWhatwgTest, AdditionalFileUrlTestsForHttpsGithubComWhatwgUrlIssues4059) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:///.//", "file:////");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// File URL tests for https://github.com/whatwg/url/issues/549 (1)
TYPED_TEST(URIWhatwgTest, FileUrlTestsForHttpsGithubComWhatwgUrlIssues5491) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// File URL tests for https://github.com/whatwg/url/issues/549 (2)
TYPED_TEST(URIWhatwgTest, FileUrlTestsForHttpsGithubComWhatwgUrlIssues5492) {
    auto const ctx = this->template parse_from_string<TypeParam>("file:/.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 tests (1)
TYPED_TEST(URIWhatwgTest, Ipv6Tests1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[1:0::]", "http://example.net/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[1::]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 tests (2)
TYPED_TEST(URIWhatwgTest, Ipv6Tests2) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://[0:1:2:3:4:5:6:7:8]", "http://example.net/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (3)
TYPED_TEST(URIWhatwgTest, Ipv6Tests3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0::0::0]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (4)
TYPED_TEST(URIWhatwgTest, Ipv6Tests4) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (5)
TYPED_TEST(URIWhatwgTest, Ipv6Tests5) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:0:]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (6)
TYPED_TEST(URIWhatwgTest, Ipv6Tests6) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1:2:3:4:5:6:7.0.0.0.1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (7)
TYPED_TEST(URIWhatwgTest, Ipv6Tests7) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.00.0.0.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (8)
TYPED_TEST(URIWhatwgTest, Ipv6Tests8) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.290.0.0.0]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 tests (9)
TYPED_TEST(URIWhatwgTest, Ipv6Tests9) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://[0:1.23.23]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Empty host (1)
TYPED_TEST(URIWhatwgTest, EmptyHost1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://?");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Empty host (2)
TYPED_TEST(URIWhatwgTest, EmptyHost2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://#");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Port overflow (2^32 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow232811) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:4294967377/c", "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Port overflow (2^64 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow264811) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://f:18446744073709551697/c", "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Port overflow (2^128 + 81) (1)
TYPED_TEST(URIWhatwgTest, PortOverflow2128811) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "http://f:340282366920938463463374607431768211537/c",
      "http://example.org/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # Non-special-URL path tests (1)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests1) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://\u00f1");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (2)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests2) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://\u00f1?x");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "x");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (3)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests3) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://\u00f1#x");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # Non-special-URL path tests (4)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests4) {
    auto const ctx = this->template parse_from_string<TypeParam>("#x", "sc://\u00f1");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "x");
}

// # Non-special-URL path tests (5)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests5) {
    auto const ctx = this->template parse_from_string<TypeParam>("?x", "sc://\u00f1");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "%C3%B1");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "x");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (6)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests6) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://?");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (7)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests7) {
    auto const ctx = this->template parse_from_string<TypeParam>("sc://#");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (8)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests8) {
    auto const ctx = this->template parse_from_string<TypeParam>("///", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (9)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests9) {
    auto const ctx = this->template parse_from_string<TypeParam>("////", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (10)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests10) {
    auto const ctx = this->template parse_from_string<TypeParam>("////x/", "sc://x/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "sc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (11)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests11) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("tftp://foobar.com/someconfig;mode=netascii");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "tftp");
    EXPECT_EQ(ctx.out.get_hostname(), "foobar.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (12)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests12) {
    auto const ctx = this->template parse_from_string<TypeParam>("telnet://user:pass@foobar.com:23/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "telnet");
    EXPECT_EQ(ctx.out.get_hostname(), "foobar.com");
    EXPECT_EQ(ctx.out.get_port(), "23");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "pass");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (13)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests13) {
    auto const ctx = this->template parse_from_string<TypeParam>("ut2004://10.10.10.10:7777/Index.ut2");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ut2004");
    EXPECT_EQ(ctx.out.get_hostname(), "10.10.10.10");
    EXPECT_EQ(ctx.out.get_port(), "7777");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (14)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests14) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("redis://foo:bar@somehost:6379/0?baz=bam&qux=baz");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "redis");
    EXPECT_EQ(ctx.out.get_hostname(), "somehost");
    EXPECT_EQ(ctx.out.get_port(), "6379");
    EXPECT_EQ(ctx.out.get_username(), "foo");
    EXPECT_EQ(ctx.out.get_password(), "bar");
    EXPECT_EQ(ctx.out.get_queries(), "baz=bam&qux=baz");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (15)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests15) {
    auto const ctx = this->template parse_from_string<TypeParam>("rsync://foo@host:911/sup");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "rsync");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "911");
    EXPECT_EQ(ctx.out.get_username(), "foo");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (16)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests16) {
    auto const ctx = this->template parse_from_string<TypeParam>("git://github.com/foo/bar.git");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "git");
    EXPECT_EQ(ctx.out.get_hostname(), "github.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (17)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests17) {
    auto const ctx = this->template parse_from_string<TypeParam>("irc://myserver.com:6999/channel?passwd");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "irc");
    EXPECT_EQ(ctx.out.get_hostname(), "myserver.com");
    EXPECT_EQ(ctx.out.get_port(), "6999");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "passwd");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (18)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests18) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("dns://fw.example.org:9999/foo.bar.org?type=TXT");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "dns");
    EXPECT_EQ(ctx.out.get_hostname(), "fw.example.org");
    EXPECT_EQ(ctx.out.get_port(), "9999");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "type=TXT");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (19)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests19) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("ldap://localhost:389/ou=People,o=JNDITutorial");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "ldap");
    EXPECT_EQ(ctx.out.get_hostname(), "localhost");
    EXPECT_EQ(ctx.out.get_port(), "389");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (20)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests20) {
    auto const ctx = this->template parse_from_string<TypeParam>("git+https://github.com/foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "git+https");
    EXPECT_EQ(ctx.out.get_hostname(), "github.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (21)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests21) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn:ietf:rfc:2648");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "urn");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # Non-special-URL path tests (22)
TYPED_TEST(URIWhatwgTest, NonSpecialUrlPathTests22) {
    auto const ctx = this->template parse_from_string<TypeParam>("tag:joe@example.org,2001:foo/bar");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "tag");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (1)
TYPED_TEST(URIWhatwgTest, SerializeInPath1) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/.//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (2)
TYPED_TEST(URIWhatwgTest, SerializeInPath2) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/..//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (3)
TYPED_TEST(URIWhatwgTest, SerializeInPath3) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/a/..//");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (4)
TYPED_TEST(URIWhatwgTest, SerializeInPath4) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/.//path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (5)
TYPED_TEST(URIWhatwgTest, SerializeInPath5) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/..//path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (6)
TYPED_TEST(URIWhatwgTest, SerializeInPath6) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/a/..//path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (7)
TYPED_TEST(URIWhatwgTest, SerializeInPath7) {
    auto const ctx = this->template parse_from_string<TypeParam>("/.//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (8)
TYPED_TEST(URIWhatwgTest, SerializeInPath8) {
    auto const ctx = this->template parse_from_string<TypeParam>("/..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (9)
TYPED_TEST(URIWhatwgTest, SerializeInPath9) {
    auto const ctx = this->template parse_from_string<TypeParam>("..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (10)
TYPED_TEST(URIWhatwgTest, SerializeInPath10) {
    auto const ctx = this->template parse_from_string<TypeParam>("a/..//path", "non-spec:/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (11)
TYPED_TEST(URIWhatwgTest, SerializeInPath11) {
    auto const ctx = this->template parse_from_string<TypeParam>("", "non-spec:/..//p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Serialize /. in path (12)
TYPED_TEST(URIWhatwgTest, SerializeInPath12) {
    auto const ctx = this->template parse_from_string<TypeParam>("path", "non-spec:/..//p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Do not serialize /. in path (1)
TYPED_TEST(URIWhatwgTest, DoNotSerializeInPath1) {
    auto const ctx = this->template parse_from_string<TypeParam>("../path", "non-spec:/.//p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # percent encoded hosts in non-special-URLs (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedHostsInNonSpecialUrls1) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://%E2%80%A0/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "%E2%80%A0");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # percent encoded hosts in non-special-URLs (2)
TYPED_TEST(URIWhatwgTest, PercentEncodedHostsInNonSpecialUrls2) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://H%4fSt/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "H%4fSt");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (1)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls1) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2:0:0:5:0:0:0]/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2:0:0:5::]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (2)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls2) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2:0:0:0:0:0:3]/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2::3]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (3)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls3) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[1:2::3]:80/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "[1:2::3]");
    EXPECT_EQ(ctx.out.get_port(), "80");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (4)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls4) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special://[:80/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// # IPv6 in non-special-URLs (5)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls5) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:https://example.com:443/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (6)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls6) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:http://example.org:88/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (7)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls7) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:d3958f5c-0777-0845-9dcf-2cb28783acaf");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// # IPv6 in non-special-URLs (8)
TYPED_TEST(URIWhatwgTest, Ipv6InNonSpecialUrls8) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// blob: in blob: (1)
TYPED_TEST(URIWhatwgTest, BlobInBlob1) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:blob:");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// blob: in blob: (2)
TYPED_TEST(URIWhatwgTest, BlobInBlob2) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:blob:https://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-http(s): in blob: (1)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob1) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:about:blank");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-http(s): in blob: (2)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob2) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:file://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-http(s): in blob: (3)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob3) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:ftp://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-http(s): in blob: (4)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob4) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:ws://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-http(s): in blob: (5)
TYPED_TEST(URIWhatwgTest, NonHttpSInBlob5) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:wss://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded http: in blob: (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedHttpInBlob1) {
    auto const ctx = this->template parse_from_string<TypeParam>("blob:http%3a//example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "blob");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Invalid IPv4 radix digits (1)
TYPED_TEST(URIWhatwgTest, InvalidIpv4RadixDigits1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x7f.0.0.0x7g");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "0x7f.0.0.0x7g");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Invalid IPv4 radix digits (2)
TYPED_TEST(URIWhatwgTest, InvalidIpv4RadixDigits2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0X7F.0.0.0X7G");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "0x7f.0.0.0x7g");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Invalid IPv4 portion of IPv6 address (1)
TYPED_TEST(URIWhatwgTest, InvalidIpv4PortionOfIpv6Address1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[::127.0.0.0.1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Uncompressed IPv6 addresses with 0 (1)
TYPED_TEST(URIWhatwgTest, UncompressedIpv6AddressesWith01) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[0:1:0:1:0:1:0:1]");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[0:1:0:1:0:1:0:1]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Uncompressed IPv6 addresses with 0 (2)
TYPED_TEST(URIWhatwgTest, UncompressedIpv6AddressesWith02) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://[1:0:1:0:1:0:1:0]");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "[1:0:1:0:1:0:1:0]");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (1)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?\"");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%22");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (2)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment2) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?#");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (3)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment3) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?<");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%3C");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (4)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment4) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?>");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%3E");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (5)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment5) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?⌣");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%E2%8C%A3");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (6)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment6) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?%23%23");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%23%23");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (7)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment7) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?%GH");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%GH");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Percent-encoded query and fragment (8)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment8) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#%EF");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a");
    EXPECT_EQ(ctx.out.get_fragment(), "%EF");
}

// Percent-encoded query and fragment (9)
TYPED_TEST(URIWhatwgTest, PercentEncodedQueryAndFragment9) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#%GH");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a");
    EXPECT_EQ(ctx.out.get_fragment(), "%GH");
}

// URLs that require a non-about:blank base. (Also serve as invalid base tests.) (1)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests1) {
    auto const ctx = this->template parse_from_string<TypeParam>("a");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// URLs that require a non-about:blank base. (Also serve as invalid base tests.) (2)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests2) {
    auto const ctx = this->template parse_from_string<TypeParam>("a/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// URLs that require a non-about:blank base. (Also serve as invalid base tests.) (3)
TYPED_TEST(URIWhatwgTest, UrlsThatRequireANonAboutBlankBaseAlsoServeAsInvalidBaseTests3) {
    auto const ctx = this->template parse_from_string<TypeParam>("a//");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Bases that don't fail to parse but fail to be bases (1)
TYPED_TEST(URIWhatwgTest, BasesThatDonTFailToParseButFailToBeBases1) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon.html", "a:");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Bases that don't fail to parse but fail to be bases (2)
TYPED_TEST(URIWhatwgTest, BasesThatDonTFailToParseButFailToBeBases2) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-b.html", "a:b");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Other base URL tests, that must succeed (1)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed1) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash.html", "a:/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Other base URL tests, that must succeed (2)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed2) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-slash.html", "a://");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Other base URL tests, that must succeed (3)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed3) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-b.html", "a:/b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Other base URL tests, that must succeed (4)
TYPED_TEST(URIWhatwgTest, OtherBaseUrlTestsThatMustSucceed4) {
    auto const ctx = this->template parse_from_string<TypeParam>("test-a-colon-slash-slash-b.html", "a://b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a");
    EXPECT_EQ(ctx.out.get_hostname(), "b");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Null code point in fragment (1)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment1) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://example.org/test?a#b\u0000c");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a");
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c");
}

// Null code point in fragment (2)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment2) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec://example.org/test?a#b\u0000c");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a");
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c");
}

// Null code point in fragment (3)
TYPED_TEST(URIWhatwgTest, NullCodePointInFragment3) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-spec:/test?a#b\u0000c");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-spec");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "a");
    EXPECT_EQ(ctx.out.get_fragment(), "b%00c");
}

// First scheme char - not allowed: https://github.com/whatwg/url/issues/464 (1)
TYPED_TEST(URIWhatwgTest, FirstSchemeCharNotAllowedHttpsGithubComWhatwgUrlIssues4641) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("10.0.0.7:8080/foo.html", "file:///some/dir/bar.html");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Subsequent scheme chars - not allowed (1)
TYPED_TEST(URIWhatwgTest, SubsequentSchemeCharsNotAllowed1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("a!@$*=/foo.html", "file:///some/dir/bar.html");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// First and subsequent scheme chars - allowed (1)
TYPED_TEST(URIWhatwgTest, FirstAndSubsequentSchemeCharsAllowed1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("a1234567890-+.:foo/bar", "http://example.com/dir/file");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "a1234567890-+.");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// IDNA ignored code points in file URLs hosts (1)
TYPED_TEST(URIWhatwgTest, IdnaIgnoredCodePointsInFileUrlsHosts1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://a\u00adb/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "ab");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// IDNA ignored code points in file URLs hosts (2)
TYPED_TEST(URIWhatwgTest, IdnaIgnoredCodePointsInFileUrlsHosts2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://a%C2%ADb/p");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "ab");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// IDNA hostnames which get mapped to 'localhost' (1)
TYPED_TEST(URIWhatwgTest, IdnaHostnamesWhichGetMappedToLocalhost1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Empty host after the domain to ASCII (1)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii1) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://\u00ad/p");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Empty host after the domain to ASCII (2)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii2) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://%C2%AD/p");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Empty host after the domain to ASCII (3)
TYPED_TEST(URIWhatwgTest, EmptyHostAfterTheDomainToAscii3) {
    auto const ctx = this->template parse_from_string<TypeParam>("file://xn--/p");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// https://bugzilla.mozilla.org/show_bug.cgi?id=1647058 (1)
TYPED_TEST(URIWhatwgTest, HttpsBugzillaMozillaOrgShowBugCgiId16470581) {
    auto const ctx = this->template parse_from_string<TypeParam>("#link", "https://example.org/##link");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "link");
}

// UTF-8 percent-encode of C0 control percent-encode set and supersets (1)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets1) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "non-special:cannot-be-a-base-url-\u0000\u0001\u001f\u001e~\u007f\u0080");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// UTF-8 percent-encode of C0 control percent-encode set and supersets (2)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets2) {
    auto const ctx = this->template parse_from_string<TypeParam>(
      "https://www.example.com/path{\u007fpath.html?query'\u007f=query#fragment<\u007ffragment");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "www.example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "query%27%7F=query");
    EXPECT_EQ(ctx.out.get_fragment(), "fragment%3C%7Ffragment");
}

// UTF-8 percent-encode of C0 control percent-encode set and supersets (3)
TYPED_TEST(URIWhatwgTest, Utf8PercentEncodeOfC0ControlPercentEncodeSetAndSupersets3) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("https://user:pass[\u007f@foo/bar", "http://example.org");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "foo");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "user");
    EXPECT_EQ(ctx.out.get_password(), "pass%5B%7F");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (1)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo:// !\"$%&'()*+,-.;<=>@[\\]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (2)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets2) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss:// !\"$%&'()*+,-.;<=>@[]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (3)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets3) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://joe: !\"$%&'()*+,-.:;<=>@[\\]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "joe");
    EXPECT_EQ(ctx.out.get_password(), "%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (4)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets4) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://joe: !\"$%&'()*+,-.:;<=>@[]^_`{|}~@host/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "joe");
    EXPECT_EQ(ctx.out.get_password(), "%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (5)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets5) {
    auto const ctx = this->template parse_from_string<TypeParam>("foo://!\"$%&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$%&'()*+,-.;=_`{}~");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (6)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets6) {
    auto const ctx = this->template parse_from_string<TypeParam>("wss://!\"$&'()*+,-.;=_`{}~/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "!\"$&'()*+,-.;=_`{}~");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (7)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets7) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/ !\"$%&'()*+,-./:;<=>@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (8)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets8) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/ !\"$%&'()*+,-./:;<=>@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (9)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets9) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/dir/? !\"$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%20!%22$%&'()*+,-./:;%3C=%3E?@[\\]^_`{|}~");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (10)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets10) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/dir/? !\"$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%20!%22$%&%27()*+,-./:;%3C=%3E?@[\\]^_`{|}~");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Tests for the distinct percent-encode sets (11)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets11) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("foo://host/dir/# !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "foo");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\]^_%60{|}~");
}

// Tests for the distinct percent-encode sets (12)
TYPED_TEST(URIWhatwgTest, TestsForTheDistinctPercentEncodeSets12) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("wss://host/dir/# !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "wss");
    EXPECT_EQ(ctx.out.get_hostname(), "host");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%20!%22#$%&'()*+,-./:;%3C=%3E?@[\\]^_%60{|}~");
}

// Ensure that input schemes are not ignored when resolving non-special URLs (1)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls1) {
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "abc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Ensure that input schemes are not ignored when resolving non-special URLs (2)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls2) {
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc:/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "abc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Ensure that input schemes are not ignored when resolving non-special URLs (3)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls3) {
    auto const ctx = this->template parse_from_string<TypeParam>("abc:rootless", "abc:path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "abc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Ensure that input schemes are not ignored when resolving non-special URLs (4)
TYPED_TEST(URIWhatwgTest, EnsureThatInputSchemesAreNotIgnoredWhenResolvingNonSpecialUrls4) {
    auto const ctx = this->template parse_from_string<TypeParam>("abc:/rooted", "abc://host/path");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "abc");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Empty query and fragment with blank should throw an error (1)
TYPED_TEST(URIWhatwgTest, EmptyQueryAndFragmentWithBlankShouldThrowAnError1) {
    auto const ctx = this->template parse_from_string<TypeParam>("#");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Empty query and fragment with blank should throw an error (2)
TYPED_TEST(URIWhatwgTest, EmptyQueryAndFragmentWithBlankShouldThrowAnError2) {
    auto const ctx = this->template parse_from_string<TypeParam>("?");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (1)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv41) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4.5", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (2)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv42) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.4.5.", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (3)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv43) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0..0x300/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (4)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv44) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0..0x300./");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (5)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv45) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256.256", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (6)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv46) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("http://256.256.256.256.256.", "http://other.com/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (7)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv47) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.08");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (8)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv48) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.08.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (9)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv49) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://1.2.3.09");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (10)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv410) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://09.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (11)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv411) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://09.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (12)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv412) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://01.2.3.4.5");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (13)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv413) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://01.2.3.4.5.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (14)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv414) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x100.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (15)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv415) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x100.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (16)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv416) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x1.2.3.4.5");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (17)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv417) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0x1.2.3.4.5.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (18)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv418) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.1.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (19)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv419) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.1.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (20)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv420) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.2.3.4");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (21)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv421) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.2.3.4.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (22)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv422) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (23)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv423) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (24)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv424) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x4");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (25)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv425) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x4.");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (26)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv426) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.09..");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "foo.09..");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Last component looks like a number, but not valid IPv4 (27)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv427) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://0999999999999999999/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (28)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv428) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0x");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (29)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv429) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://foo.0XFfFfFfFfFfFfFfFfFfAcE123");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Last component looks like a number, but not valid IPv4 (30)
TYPED_TEST(URIWhatwgTest, LastComponentLooksLikeANumberButNotValidIpv430) {
    auto const ctx = this->template parse_from_string<TypeParam>("http://💩.123/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (1)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces1) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://\u0000y");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (2)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces2) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (3)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces3) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%00y");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (4)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces4) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?#\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%00y");
}

// U+0000 and U+FFFF in various places (5)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces5) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://￿y");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (6)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces6) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (7)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces7) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BFy");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (8)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces8) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://x/?#￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BFy");
}

// U+0000 and U+FFFF in various places (9)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces9) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (10)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces10) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (11)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces11) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%00y");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (12)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces12) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?#\u0000y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%00y");
}

// U+0000 and U+FFFF in various places (13)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces13) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (14)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces14) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (15)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces15) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "%EF%BF%BFy");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (16)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces16) {
    auto const ctx = this->template parse_from_string<TypeParam>("non-special:x/?#￿y");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "non-special");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "%EF%BF%BFy");
}

// U+0000 and U+FFFF in various places (17)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces17) {
    auto const ctx = this->template parse_from_string<TypeParam>("");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (18)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces18) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://example.com/\"quoted\"");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (19)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces19) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://a%C2%ADb/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "https");
    EXPECT_EQ(ctx.out.get_hostname(), "ab");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// U+0000 and U+FFFF in various places (20)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces20) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://\u00ad/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (21)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces21) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://%C2%AD/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// U+0000 and U+FFFF in various places (22)
TYPED_TEST(URIWhatwgTest, U0000AndUFfffInVariousPlaces22) {
    auto const ctx = this->template parse_from_string<TypeParam>("https://xn--/");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (1)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial1) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("data://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (2)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial2) {
    auto const ctx = this->template parse_from_string<TypeParam>("data:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (3)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial3) {
    auto const ctx = this->template parse_from_string<TypeParam>("data://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "data");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (4)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial4) {
    auto const ctx = this->template parse_from_string<TypeParam>("data://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (5)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial5) {
    auto const ctx = this->template parse_from_string<TypeParam>("data://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (6)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial6) {
    auto const ctx = this->template parse_from_string<TypeParam>("data://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (7)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial7) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("javascript://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (8)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial8) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (9)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial9) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "javascript");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (10)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial10) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (11)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial11) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (12)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial12) {
    auto const ctx = this->template parse_from_string<TypeParam>("javascript://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (13)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial13) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("mailto://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (14)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial14) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (15)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial15) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "mailto");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (16)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial16) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (17)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial17) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (18)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial18) {
    auto const ctx = this->template parse_from_string<TypeParam>("mailto://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (19)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial19) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("intent://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "intent");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (20)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial20) {
    auto const ctx = this->template parse_from_string<TypeParam>("intent:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "intent");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (21)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial21) {
    auto const ctx = this->template parse_from_string<TypeParam>("intent://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "intent");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (22)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial22) {
    auto const ctx = this->template parse_from_string<TypeParam>("intent://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (23)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial23) {
    auto const ctx = this->template parse_from_string<TypeParam>("intent://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (24)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial24) {
    auto const ctx = this->template parse_from_string<TypeParam>("intent://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (25)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial25) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("urn://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "urn");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (26)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial26) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "urn");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (27)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial27) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "urn");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (28)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial28) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (29)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial29) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (30)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial30) {
    auto const ctx = this->template parse_from_string<TypeParam>("urn://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (31)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial31) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("turn://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "turn");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (32)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial32) {
    auto const ctx = this->template parse_from_string<TypeParam>("turn:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "turn");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (33)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial33) {
    auto const ctx = this->template parse_from_string<TypeParam>("turn://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "turn");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (34)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial34) {
    auto const ctx = this->template parse_from_string<TypeParam>("turn://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (35)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial35) {
    auto const ctx = this->template parse_from_string<TypeParam>("turn://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (36)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial36) {
    auto const ctx = this->template parse_from_string<TypeParam>("turn://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (37)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial37) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("stun://example.com:8080/pathname?search#hash");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "stun");
    EXPECT_EQ(ctx.out.get_hostname(), "example.com");
    EXPECT_EQ(ctx.out.get_port(), "8080");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "search");
    EXPECT_EQ(ctx.out.get_fragment(), "hash");
}

// Non-special schemes that some implementations might incorrectly treat as special (38)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial38) {
    auto const ctx = this->template parse_from_string<TypeParam>("stun:///test");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "stun");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (39)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial39) {
    auto const ctx = this->template parse_from_string<TypeParam>("stun://test/a/../b");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "stun");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (40)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial40) {
    auto const ctx = this->template parse_from_string<TypeParam>("stun://:443");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (41)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial41) {
    auto const ctx = this->template parse_from_string<TypeParam>("stun://test:test");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (42)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial42) {
    auto const ctx = this->template parse_from_string<TypeParam>("stun://[:1]");
    EXPECT_FALSE(uri::is_valid(ctx.status));
}

// Non-special schemes that some implementations might incorrectly treat as special (43)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial43) {
    auto const ctx = this->template parse_from_string<TypeParam>("w://x:0");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "w");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "0");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Non-special schemes that some implementations might incorrectly treat as special (44)
TYPED_TEST(URIWhatwgTest, NonSpecialSchemesThatSomeImplementationsMightIncorrectlyTreatAsSpecial44) {
    auto const ctx = this->template parse_from_string<TypeParam>("west://x:0");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "west");
    EXPECT_EQ(ctx.out.get_hostname(), "x");
    EXPECT_EQ(ctx.out.get_port(), "0");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (1)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes1) {
    auto const ctx = this->template parse_from_string<TypeParam>("///test", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (2)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes2) {
    auto const ctx = this->template parse_from_string<TypeParam>("///\\//\\//test", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "test");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (3)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes3) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (4)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes4) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (5)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes5) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../../", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (6)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes6) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path/../../", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (7)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes7) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("///example.org/../path/../../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (8)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes8) {
    auto const ctx =
      this->template parse_from_string<TypeParam>("/\\/\\//example.org/../path", "http://example.org/");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "http");
    EXPECT_EQ(ctx.out.get_hostname(), "example.org");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (9)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes9) {
    auto const ctx = this->template parse_from_string<TypeParam>("///abcdef/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (10)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes10) {
    auto const ctx = this->template parse_from_string<TypeParam>("/\\//\\/a/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}

// Scheme relative path starting with multiple slashes (11)
TYPED_TEST(URIWhatwgTest, SchemeRelativePathStartingWithMultipleSlashes11) {
    auto const ctx = this->template parse_from_string<TypeParam>("//a/../", "file:///");
    EXPECT_TRUE(uri::is_valid(ctx.status));
    EXPECT_EQ(ctx.out.get_scheme(), "file");
    EXPECT_EQ(ctx.out.get_hostname(), "a");
    EXPECT_EQ(ctx.out.get_port(), "");
    EXPECT_EQ(ctx.out.get_username(), "");
    EXPECT_EQ(ctx.out.get_password(), "");
    EXPECT_EQ(ctx.out.get_queries(), "");
    EXPECT_EQ(ctx.out.get_fragment(), "");
}
