
/**
 * Attention: Auto-generated file, don't modify.
 *
 *   Auto generated from:                generate_normalization_table.js
 *   Unicode UCD Database Creation Date: 2023-08-28
 *   This file's generation date:        Mon, 29 Apr 2024 13:01:37 GMT
 *   Unicode Version:                    15.1.0
 *
 * Details about the contents of this file can be found here:
 *   UTS #15: https://www.unicode.org/reports/tr15/
 *   UTS #44: https://www.unicode.org/reports/tr44/#UnicodeData.txt
 *   IDN FAQ: https://www.unicode.org/faq/idn.html
 *
 *   UCD Database Code Points (used the get the CCC values and what not):
 *       https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
 *   UCD README file (used to check the version and creation date):
 *       https://www.unicode.org/Public/UCD/latest/ucd/ReadMe.txt
 */

#ifndef WEBPP_UNICODE_NORMALIZATION_TABLES_HPP
#define WEBPP_UNICODE_NORMALIZATION_TABLES_HPP

#include <array>
#include <cstdint>

namespace webpp::unicode::details {


    /**
     * In "ccc_index" table, any code point bigger than this number will have "zero" as it's CCC value;
     * so it's designed this way to reduce the table size.
     */
    static constexpr auto trailing_zero_cccs = 0x1E94BUL;

    /**
     * CCC Index Table
     *
     * CCC: Canonical Combining Class
     * These are the indeces that are used to find which values from "ccc_values" table correspond to a
     * unicode code point.
     *
     * Usage:
     * @code
     *    uint32_t code_point = ...;
     *    auto helper_code = ccc_index[code_point >> 8];
     *    auto pos         = helper_code >> 8;           // starting position
     *    auto mask        = helper_code &  0xFF;        // which positions should be converted to zero
     *    auto index       = pos         &  mask;        // now use ccc_values[index]
     * @endcode
     *
     * Table size:
     *   - in bits:       15648
     *   - in bytes:      1956 B
     *   - in KibiBytes:  2 KiB
     */
    static constexpr std::array<std::uint32_t, 489ULL> ccc_index{
      255,   255,   255,   65535, 32255, 28671, 61695, 61439, 60159, 50431, 50431, 50431, 50431, 50687, 51455,
      59647, 51711, 255,   255,   41983, 255,   255,   255,   60671, 22527, 51199, 59903, 52479, 51711, 16639,
      255,   255,   12543, 255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   4607,
      33279, 255,   255,   55039, 255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   37375, 255,   64255, 54783, 20735, 5119,  255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   58111, 255,   255,   57599,
      255,   255,   1023,  8447,  35583, 255,   255,   255,   255,   255,   255,   62463, 255,   255,   56575,
      22015, 47871, 47871, 65535, 52223, 50687, 48895, 16895, 49663, 54783, 51199, 50175, 52479, 255,   49663,
      48895, 255,   49151, 255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   4351,  53503, 255,   255,   255,   4351,  255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   25343, 255,   255,   255,   255,   255,
      255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
      39935, 48895, 255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   255,   254,
      65535, 53503, 21247, 255,   5375,  255,   255,   255,   12543};


    /**
     * CCC Table
     *
     * CCC: Canonical Combining Class
     * These values are calculated and individually represend actual CCC values, but they have no
     * valid order by themselves, and they only make sense if they're being used in conjuction with
     * the "ccc_index" table.
     *
     * Table size:
     *   - in bits:       6672
     *   - in bytes:      834 B
     *   - in KibiBytes:  1 KiB
     */
    static constexpr std::array<std::uint8_t, 834ULL> ccc_values{
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0, 0};

} // namespace webpp::unicode::details

#endif // WEBPP_UNICODE_NORMALIZATION_TABLES_HPP
